<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elastic.Apm.AspNetCore</name>
    </assembly>
    <members>
        <member name="M:Elastic.Apm.AspNetCore.ApmMiddlewareExtension.UseElasticApm(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Configuration.IConfiguration,Elastic.Apm.DiagnosticSource.IDiagnosticsSubscriber[])">
            <summary>
            Adds the Elastic APM Middleware to the ASP.NET Core pipeline.
            You can customize the agent by passing additional IDiagnosticsSubscriber components to this method.
            Use this method if you want to control what tracing capability of the agent you would like to use
            or in case you want to minimize the number of dependencies added to your application.
            Please note that by default without additional parameters this method only enables ASP.NET Core
            monitoring - e.g. database statements or outgoing HTTP calls won't be traced.
            If you want to simply enable every tracing component without configuration please use the
            UseAllElasticApm extension method from the Elastic.Apm.NetCoreAll package.
            </summary>
            <returns>The elastic apm.</returns>
            <param name="builder">Builder.</param>
            <param name="configuration">
            You can optionally pass the IConfiguration of your application to the Elastic APM Agent. By
            doing this the agent will read agent related configurations through this IConfiguration instance.
            If no <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> is passed to the agent then it will read configs from environment variables.
            </param>
            <param name="subscribers">
            Specify which diagnostic source subscribers you want to connect. The
            <see cref="T:Elastic.Apm.AspNetCore.DiagnosticListener.AspNetCoreErrorDiagnosticsSubscriber" /> is by default enabled.
            </param>
        </member>
        <member name="F:Elastic.Apm.AspNetCore.DiagnosticListener.AspNetCoreDiagnosticListener._processingRequests">
            <summary>
            Keeps track of ongoing transactions
            </summary>
        </member>
        <member name="T:Elastic.Apm.AspNetCore.DiagnosticListener.AspNetCoreDiagnosticSubscriber">
            <summary>
            A Diagnostic listner to create transactions based on diagnostic source events for ASP.NET Core.
            This itself manages all transaction and error capturing without the need for a middleware.
            </summary>
        </member>
        <member name="T:Elastic.Apm.AspNetCore.DiagnosticListener.AspNetCoreErrorDiagnosticsSubscriber">
            <summary>
            Activates the <see cref="T:Elastic.Apm.AspNetCore.DiagnosticListener.AspNetCoreErrorDiagnosticListener" /> which enables
            capturing errors within an ASP.NET Core application.
            This is used in combination with <see cref="T:Elastic.Apm.AspNetCore.ApmMiddleware"/> to capture errors handled by error pages
            </summary>
        </member>
        <member name="M:Elastic.Apm.AspNetCore.DiagnosticListener.AspNetCoreErrorDiagnosticsSubscriber.Subscribe(Elastic.Apm.IApmAgent)">
            <summary>
            Start listening for ASP.NET Core related diagnostic source events.
            </summary>
        </member>
        <member name="M:Elastic.Apm.AspNetCore.Extensions.ListExtensions.ContainsLike(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Similar to <see cref="M:System.Collections.Generic.List`1.Contains(`0)"/> but matches the string using
            a 'like' operator instead of an exact match
            </summary>
            <param name="list">The list in which to find the match</param>
            <param name="matchedString">The string to match</param>
            <returns></returns>
        </member>
        <member name="M:Elastic.Apm.AspNetCore.Extensions.HttpRequestExtensions.ExtractRequestBody(Microsoft.AspNetCore.Http.HttpRequest,Elastic.Apm.Logging.IApmLogger,Elastic.Apm.Config.IConfigSnapshot)">
            <summary>
            Extracts the request body, up to a specified maximum length.
            The request body that is read is buffered.
            </summary>
            <param name="request">The request</param>
            <param name="logger">The logger</param>
            <param name="configSnapshot">The configuration snapshot</param>
            <returns></returns>
        </member>
        <member name="M:Elastic.Apm.AspNetCore.Extensions.StringExtensions.IsLike(System.String,System.String,System.Boolean)">
            <summary>
            Enables wildcard string matching
            </summary>
            <param name="pattern">The pattern used for matchinf</param>
            <param name="text">String being matched</param>
            <param name="caseSensitive">Weather to match with case sensitivy</param>
            <returns></returns>
        </member>
        <member name="M:Elastic.Apm.AspNetCore.Extensions.TransactionExtensions.CollectRequestBody(Elastic.Apm.Model.Transaction,System.Boolean,Microsoft.AspNetCore.Http.HttpRequest,Elastic.Apm.Logging.IApmLogger)">
            <summary>
            Collects the Request body in the transaction
            </summary>
            <param name="transaction">Transaction object</param>
            <param name="isForError">Is request body being captured for error (otherwise it's for transaction)</param>
            <param name="httpRequest">Current http request</param>
            <param name="logger">Logger object</param>
        </member>
        <member name="T:Elastic.Apm.AspNetCore.WebRequestTransactionCreator">
            <summary>
            A helper class to capture an <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> as a transaction.
            </summary>
        </member>
        <member name="M:Elastic.Apm.AspNetCore.WebRequestTransactionCreator.CollectGrpcInfo">
            <summary>
            Collects gRPC info for the given request
            </summary>
            <returns>default if it's not a grpc call, otherwise the Grpc method name and result as a tuple </returns>
        </member>
    </members>
</doc>
