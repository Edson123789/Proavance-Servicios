using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BSI.Integra.Persistencia.Models
{
    public partial class integraDBContext : DbContext
    {
        public integraDBContext()
        {
        }

        public integraDBContext(DbContextOptions<integraDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<TAccesosIntegraDetalleLog> TAccesosIntegraDetalleLog { get; set; }
        public virtual DbSet<TAccesosIntegraLog> TAccesosIntegraLog { get; set; }
        public virtual DbSet<TAccionFormulario> TAccionFormulario { get; set; }
        public virtual DbSet<TAccionFormularioPorCampoContacto> TAccionFormularioPorCampoContacto { get; set; }
        public virtual DbSet<TAccionFormularioPorCategoriaOrigen> TAccionFormularioPorCategoriaOrigen { get; set; }
        public virtual DbSet<TActividadBase> TActividadBase { get; set; }
        public virtual DbSet<TActividadCabecera> TActividadCabecera { get; set; }
        public virtual DbSet<TActividadCabeceraDiaSemana> TActividadCabeceraDiaSemana { get; set; }
        public virtual DbSet<TActividadCabeceraLog> TActividadCabeceraLog { get; set; }
        public virtual DbSet<TActividadCabeceraTipoDato> TActividadCabeceraTipoDato { get; set; }
        public virtual DbSet<TActividadCertificadoGeneradoAutomaticoLog> TActividadCertificadoGeneradoAutomaticoLog { get; set; }
        public virtual DbSet<TActividadDetalle> TActividadDetalle { get; set; }
        public virtual DbSet<TAdicionalProgramaGeneral> TAdicionalProgramaGeneral { get; set; }
        public virtual DbSet<TAdwordInsigth> TAdwordInsigth { get; set; }
        public virtual DbSet<TAdwordsApiPalabraClave> TAdwordsApiPalabraClave { get; set; }
        public virtual DbSet<TAdwordsApiVolumenBusqueda> TAdwordsApiVolumenBusqueda { get; set; }
        public virtual DbSet<TAdwordsLog> TAdwordsLog { get; set; }
        public virtual DbSet<TAgendaTab> TAgendaTab { get; set; }
        public virtual DbSet<TAgendaTabConfiguracion> TAgendaTabConfiguracion { get; set; }
        public virtual DbSet<TAgendaTipoUsuario> TAgendaTipoUsuario { get; set; }
        public virtual DbSet<TAlumno> TAlumno { get; set; }
        public virtual DbSet<TAlumnoLog> TAlumnoLog { get; set; }
        public virtual DbSet<TAmbiente> TAmbiente { get; set; }
        public virtual DbSet<TAnuncio> TAnuncio { get; set; }
        public virtual DbSet<TAnuncioElemento> TAnuncioElemento { get; set; }
        public virtual DbSet<TAnuncioFacebook> TAnuncioFacebook { get; set; }
        public virtual DbSet<TAnuncioFacebookMetrica> TAnuncioFacebookMetrica { get; set; }
        public virtual DbSet<TArea> TArea { get; set; }
        public virtual DbSet<TAreaCampaniaMailingDetalle> TAreaCampaniaMailingDetalle { get; set; }
        public virtual DbSet<TAreaCampoEtiqueta> TAreaCampoEtiqueta { get; set; }
        public virtual DbSet<TAreaCapacitacion> TAreaCapacitacion { get; set; }
        public virtual DbSet<TAreaCapacitacionFacebook> TAreaCapacitacionFacebook { get; set; }
        public virtual DbSet<TAreaCc> TAreaCc { get; set; }
        public virtual DbSet<TAreaFormacion> TAreaFormacion { get; set; }
        public virtual DbSet<TAreaParametroSeoPw> TAreaParametroSeoPw { get; set; }
        public virtual DbSet<TAreaTrabajo> TAreaTrabajo { get; set; }
        public virtual DbSet<TArticulo> TArticulo { get; set; }
        public virtual DbSet<TArticuloPgeneral> TArticuloPgeneral { get; set; }
        public virtual DbSet<TArticuloSeo> TArticuloSeo { get; set; }
        public virtual DbSet<TArticuloTag> TArticuloTag { get; set; }
        public virtual DbSet<TAscenso> TAscenso { get; set; }
        public virtual DbSet<TAscensoAreaFormacion> TAscensoAreaFormacion { get; set; }
        public virtual DbSet<TAscensoCertificacion> TAscensoCertificacion { get; set; }
        public virtual DbSet<TAscensoExperienciaCargoIndustria> TAscensoExperienciaCargoIndustria { get; set; }
        public virtual DbSet<TAscensoMembresia> TAscensoMembresia { get; set; }
        public virtual DbSet<TAscensoProgramaCapacitacion> TAscensoProgramaCapacitacion { get; set; }
        public virtual DbSet<TAscensoProgramaCapacitacionExperiencia> TAscensoProgramaCapacitacionExperiencia { get; set; }
        public virtual DbSet<TAsesor> TAsesor { get; set; }
        public virtual DbSet<TAsesorAreaCapacitacionDetalle> TAsesorAreaCapacitacionDetalle { get; set; }
        public virtual DbSet<TAsesorCategoriaOrigenDetalle> TAsesorCategoriaOrigenDetalle { get; set; }
        public virtual DbSet<TAsesorCentroCosto> TAsesorCentroCosto { get; set; }
        public virtual DbSet<TAsesorCentroCostoDetalle> TAsesorCentroCostoDetalle { get; set; }
        public virtual DbSet<TAsesorCentroCostoOcurrencia> TAsesorCentroCostoOcurrencia { get; set; }
        public virtual DbSet<TAsesorChat> TAsesorChat { get; set; }
        public virtual DbSet<TAsesorChatDetalle> TAsesorChatDetalle { get; set; }
        public virtual DbSet<TAsesorFaseOpoProbabilidadDetalle> TAsesorFaseOpoProbabilidadDetalle { get; set; }
        public virtual DbSet<TAsesorGrupoFiltroProgramaCriticoDetalle> TAsesorGrupoFiltroProgramaCriticoDetalle { get; set; }
        public virtual DbSet<TAsesorPaisDetalle> TAsesorPaisDetalle { get; set; }
        public virtual DbSet<TAsesorProbabilidadDetalle> TAsesorProbabilidadDetalle { get; set; }
        public virtual DbSet<TAsesorProgramaGeneralDetalle> TAsesorProgramaGeneralDetalle { get; set; }
        public virtual DbSet<TAsesorSubAreaCapacitacionDetalle> TAsesorSubAreaCapacitacionDetalle { get; set; }
        public virtual DbSet<TAsesorTipoCategoriaOrigenDetalle> TAsesorTipoCategoriaOrigenDetalle { get; set; }
        public virtual DbSet<TAsignacionAutomatica> TAsignacionAutomatica { get; set; }
        public virtual DbSet<TAsignacionAutomaticaConfiguracion> TAsignacionAutomaticaConfiguracion { get; set; }
        public virtual DbSet<TAsignacionAutomaticaError> TAsignacionAutomaticaError { get; set; }
        public virtual DbSet<TAsignacionAutomaticaOrigen> TAsignacionAutomaticaOrigen { get; set; }
        public virtual DbSet<TAsignacionAutomaticaTemp> TAsignacionAutomaticaTemp { get; set; }
        public virtual DbSet<TAsignacionAutomaticaTipoError> TAsignacionAutomaticaTipoError { get; set; }
        public virtual DbSet<TAsignacionOportunidad> TAsignacionOportunidad { get; set; }
        public virtual DbSet<TAsignacionOportunidadLog> TAsignacionOportunidadLog { get; set; }
        public virtual DbSet<TAsignacionPreguntaExamen> TAsignacionPreguntaExamen { get; set; }
        public virtual DbSet<TAsistencia> TAsistencia { get; set; }
        public virtual DbSet<TAsociacionPreguntaEvaluacion> TAsociacionPreguntaEvaluacion { get; set; }
        public virtual DbSet<TAutenticacionPlataforma> TAutenticacionPlataforma { get; set; }
        public virtual DbSet<TAutenticacionServicioExterno> TAutenticacionServicioExterno { get; set; }
        public virtual DbSet<TAutoevaluacionPorCursoMoodle> TAutoevaluacionPorCursoMoodle { get; set; }
        public virtual DbSet<TAvanceTiempoReal> TAvanceTiempoReal { get; set; }
        public virtual DbSet<TAvanceTiempoRealLog> TAvanceTiempoRealLog { get; set; }
        public virtual DbSet<TAvatar> TAvatar { get; set; }
        public virtual DbSet<TBandejaPendientePw> TBandejaPendientePw { get; set; }
        public virtual DbSet<TBeneficioDatoAdicional> TBeneficioDatoAdicional { get; set; }
        public virtual DbSet<TBeneficioLaboralPorPeriodo> TBeneficioLaboralPorPeriodo { get; set; }
        public virtual DbSet<TBeneficioLaboralTipo> TBeneficioLaboralTipo { get; set; }
        public virtual DbSet<TBeneficiosAlumnoPespecifico> TBeneficiosAlumnoPespecifico { get; set; }
        public virtual DbSet<TBloqueHorario> TBloqueHorario { get; set; }
        public virtual DbSet<TBloqueHorarioProcesaOportunidad> TBloqueHorarioProcesaOportunidad { get; set; }
        public virtual DbSet<TCaja> TCaja { get; set; }
        public virtual DbSet<TCajaEgreso> TCajaEgreso { get; set; }
        public virtual DbSet<TCajaEgresoAprobado> TCajaEgresoAprobado { get; set; }
        public virtual DbSet<TCajaPorRendir> TCajaPorRendir { get; set; }
        public virtual DbSet<TCajaPorRendirCabecera> TCajaPorRendirCabecera { get; set; }
        public virtual DbSet<TCalculoOportunidadRn2> TCalculoOportunidadRn2 { get; set; }
        public virtual DbSet<TCalidadLlamadaLog> TCalidadLlamadaLog { get; set; }
        public virtual DbSet<TCalidadProcesamiento> TCalidadProcesamiento { get; set; }
        public virtual DbSet<TCambioPorPeriodoCronograma> TCambioPorPeriodoCronograma { get; set; }
        public virtual DbSet<TCampaniaFacebook> TCampaniaFacebook { get; set; }
        public virtual DbSet<TCampaniaGeneral> TCampaniaGeneral { get; set; }
        public virtual DbSet<TCampaniaGeneralDetalle> TCampaniaGeneralDetalle { get; set; }
        public virtual DbSet<TCampaniaGeneralDetalleArea> TCampaniaGeneralDetalleArea { get; set; }
        public virtual DbSet<TCampaniaGeneralDetallePrograma> TCampaniaGeneralDetallePrograma { get; set; }
        public virtual DbSet<TCampaniaGeneralDetalleResponsable> TCampaniaGeneralDetalleResponsable { get; set; }
        public virtual DbSet<TCampaniaGeneralDetalleSubArea> TCampaniaGeneralDetalleSubArea { get; set; }
        public virtual DbSet<TCampaniaMailchimp> TCampaniaMailchimp { get; set; }
        public virtual DbSet<TCampaniaMailing> TCampaniaMailing { get; set; }
        public virtual DbSet<TCampaniaMailingDetalle> TCampaniaMailingDetalle { get; set; }
        public virtual DbSet<TCampaniaMailingDetallePrograma> TCampaniaMailingDetallePrograma { get; set; }
        public virtual DbSet<TCampaniaMailingTop5> TCampaniaMailingTop5 { get; set; }
        public virtual DbSet<TCampaniaMailingValorTipo> TCampaniaMailingValorTipo { get; set; }
        public virtual DbSet<TCampoContacto> TCampoContacto { get; set; }
        public virtual DbSet<TCampoEtiqueta> TCampoEtiqueta { get; set; }
        public virtual DbSet<TCampoFormulario> TCampoFormulario { get; set; }
        public virtual DbSet<TCantidadInteraccion> TCantidadInteraccion { get; set; }
        public virtual DbSet<TCargo> TCargo { get; set; }
        public virtual DbSet<TCarreraProfesional> TCarreraProfesional { get; set; }
        public virtual DbSet<TCategoriaAsesor> TCategoriaAsesor { get; set; }
        public virtual DbSet<TCategoriaCiudad> TCategoriaCiudad { get; set; }
        public virtual DbSet<TCategoriaIndicador> TCategoriaIndicador { get; set; }
        public virtual DbSet<TCategoriaInteraccion> TCategoriaInteraccion { get; set; }
        public virtual DbSet<TCategoriaObjetoFiltro> TCategoriaObjetoFiltro { get; set; }
        public virtual DbSet<TCategoriaOrigen> TCategoriaOrigen { get; set; }
        public virtual DbSet<TCategoriaPreguntaEvaluacion> TCategoriaPreguntaEvaluacion { get; set; }
        public virtual DbSet<TCategoriaPrograma> TCategoriaPrograma { get; set; }
        public virtual DbSet<TCategoriaTipoMoodle> TCategoriaTipoMoodle { get; set; }
        public virtual DbSet<TCausa> TCausa { get; set; }
        public virtual DbSet<TCausaCliente> TCausaCliente { get; set; }
        public virtual DbSet<TCentil> TCentil { get; set; }
        public virtual DbSet<TCentralLlamada> TCentralLlamada { get; set; }
        public virtual DbSet<TCentralLlamadaDireccion> TCentralLlamadaDireccion { get; set; }
        public virtual DbSet<TCentroCosto> TCentroCosto { get; set; }
        public virtual DbSet<TCentroCostoCertificado> TCentroCostoCertificado { get; set; }
        public virtual DbSet<TCentroEstudio> TCentroEstudio { get; set; }
        public virtual DbSet<TCertificacion> TCertificacion { get; set; }
        public virtual DbSet<TCertificacionPgeneral> TCertificacionPgeneral { get; set; }
        public virtual DbSet<TCertificacionTipo> TCertificacionTipo { get; set; }
        public virtual DbSet<TCertificadoBrochure> TCertificadoBrochure { get; set; }
        public virtual DbSet<TCertificadoDetalle> TCertificadoDetalle { get; set; }
        public virtual DbSet<TCertificadoDetallePartner> TCertificadoDetallePartner { get; set; }
        public virtual DbSet<TCertificadoEnvio> TCertificadoEnvio { get; set; }
        public virtual DbSet<TCertificadoEnvioLog> TCertificadoEnvioLog { get; set; }
        public virtual DbSet<TCertificadoFormaEntrega> TCertificadoFormaEntrega { get; set; }
        public virtual DbSet<TCertificadoGeneradoAutomatico> TCertificadoGeneradoAutomatico { get; set; }
        public virtual DbSet<TCertificadoGeneradoAutomaticoContenido> TCertificadoGeneradoAutomaticoContenido { get; set; }
        public virtual DbSet<TCertificadoPartnerComplemento> TCertificadoPartnerComplemento { get; set; }
        public virtual DbSet<TCertificadoReversionEmision> TCertificadoReversionEmision { get; set; }
        public virtual DbSet<TCertificadoSolicitud> TCertificadoSolicitud { get; set; }
        public virtual DbSet<TCertificadoTipo> TCertificadoTipo { get; set; }
        public virtual DbSet<TCertificadoTipoPrograma> TCertificadoTipoPrograma { get; set; }
        public virtual DbSet<TChatDetalleIntegra> TChatDetalleIntegra { get; set; }
        public virtual DbSet<TChatDetalleIntegraArchivo> TChatDetalleIntegraArchivo { get; set; }
        public virtual DbSet<TChatIntegraHistorialAsesor> TChatIntegraHistorialAsesor { get; set; }
        public virtual DbSet<TChatZopim> TChatZopim { get; set; }
        public virtual DbSet<TCiudad> TCiudad { get; set; }
        public virtual DbSet<TCiudadCodigoAeropuerto> TCiudadCodigoAeropuerto { get; set; }
        public virtual DbSet<TClasificacionPersona> TClasificacionPersona { get; set; }
        public virtual DbSet<TClasificacionPreguntaEvaluacion> TClasificacionPreguntaEvaluacion { get; set; }
        public virtual DbSet<TClasificacionUbicacionDocente> TClasificacionUbicacionDocente { get; set; }
        public virtual DbSet<TCloudflareFirmaVideo> TCloudflareFirmaVideo { get; set; }
        public virtual DbSet<TCloudflareFirmaVideoDominioAsignado> TCloudflareFirmaVideoDominioAsignado { get; set; }
        public virtual DbSet<TCloudflareLlaveGenerada> TCloudflareLlaveGenerada { get; set; }
        public virtual DbSet<TCloudflareTokenVideo> TCloudflareTokenVideo { get; set; }
        public virtual DbSet<TCloudflareUsuarioLlave> TCloudflareUsuarioLlave { get; set; }
        public virtual DbSet<TCodigoCiiuIndustria> TCodigoCiiuIndustria { get; set; }
        public virtual DbSet<TComercialTipoPersonal> TComercialTipoPersonal { get; set; }
        public virtual DbSet<TComisionEstadoPago> TComisionEstadoPago { get; set; }
        public virtual DbSet<TComisionMontoPago> TComisionMontoPago { get; set; }
        public virtual DbSet<TComisionPersonal> TComisionPersonal { get; set; }
        public virtual DbSet<TComisionTipo> TComisionTipo { get; set; }
        public virtual DbSet<TCompetenciaTecnica> TCompetenciaTecnica { get; set; }
        public virtual DbSet<TCompetidor> TCompetidor { get; set; }
        public virtual DbSet<TCompetidorCapacitacion> TCompetidorCapacitacion { get; set; }
        public virtual DbSet<TCompetidorCertificacion> TCompetidorCertificacion { get; set; }
        public virtual DbSet<TCompetidorMembresia> TCompetidorMembresia { get; set; }
        public virtual DbSet<TCompetidorProgramaRelacionado> TCompetidorProgramaRelacionado { get; set; }
        public virtual DbSet<TCompetidorTipoModalidad> TCompetidorTipoModalidad { get; set; }
        public virtual DbSet<TCompetidorVentajaDesventaja> TCompetidorVentajaDesventaja { get; set; }
        public virtual DbSet<TComprobantePago> TComprobantePago { get; set; }
        public virtual DbSet<TComprobantePagoEstado> TComprobantePagoEstado { get; set; }
        public virtual DbSet<TComprobantePagoOportunidad> TComprobantePagoOportunidad { get; set; }
        public virtual DbSet<TComprobantePagoPorFur> TComprobantePagoPorFur { get; set; }
        public virtual DbSet<TCompromisoAlumno> TCompromisoAlumno { get; set; }
        public virtual DbSet<TCondicionOcurrenciaLlamada> TCondicionOcurrenciaLlamada { get; set; }
        public virtual DbSet<TCondicionPago> TCondicionPago { get; set; }
        public virtual DbSet<TCondicionTipoPago> TCondicionTipoPago { get; set; }
        public virtual DbSet<TConectorOcurrenciaLlamada> TConectorOcurrenciaLlamada { get; set; }
        public virtual DbSet<TConfiguracion> TConfiguracion { get; set; }
        public virtual DbSet<TConfiguracionAnexoOpenVox> TConfiguracionAnexoOpenVox { get; set; }
        public virtual DbSet<TConfiguracionAsignacionCoordinadorOportunidadOperaciones> TConfiguracionAsignacionCoordinadorOportunidadOperaciones { get; set; }
        public virtual DbSet<TConfiguracionAsignacionCoordinadorOportunidadOperacionesDetalle> TConfiguracionAsignacionCoordinadorOportunidadOperacionesDetalle { get; set; }
        public virtual DbSet<TConfiguracionAsignacionEvaluacion> TConfiguracionAsignacionEvaluacion { get; set; }
        public virtual DbSet<TConfiguracionAsignacionExamen> TConfiguracionAsignacionExamen { get; set; }
        public virtual DbSet<TConfiguracionBeneficioProgramaGeneral> TConfiguracionBeneficioProgramaGeneral { get; set; }
        public virtual DbSet<TConfiguracionBeneficioProgramaGeneralDatoAdicional> TConfiguracionBeneficioProgramaGeneralDatoAdicional { get; set; }
        public virtual DbSet<TConfiguracionBeneficioProgramaGeneralEstadoMatricula> TConfiguracionBeneficioProgramaGeneralEstadoMatricula { get; set; }
        public virtual DbSet<TConfiguracionBeneficioProgramaGeneralPais> TConfiguracionBeneficioProgramaGeneralPais { get; set; }
        public virtual DbSet<TConfiguracionBeneficioProgramaGeneralSubEstado> TConfiguracionBeneficioProgramaGeneralSubEstado { get; set; }
        public virtual DbSet<TConfiguracionBeneficioProgramaGeneralVersion> TConfiguracionBeneficioProgramaGeneralVersion { get; set; }
        public virtual DbSet<TConfiguracionBic> TConfiguracionBic { get; set; }
        public virtual DbSet<TConfiguracionBicdetalle> TConfiguracionBicdetalle { get; set; }
        public virtual DbSet<TConfiguracionCerrarBnc> TConfiguracionCerrarBnc { get; set; }
        public virtual DbSet<TConfiguracionChat> TConfiguracionChat { get; set; }
        public virtual DbSet<TConfiguracionCreacion> TConfiguracionCreacion { get; set; }
        public virtual DbSet<TConfiguracionDatoRemarketing> TConfiguracionDatoRemarketing { get; set; }
        public virtual DbSet<TConfiguracionDatoRemarketingCategoriaOrigen> TConfiguracionDatoRemarketingCategoriaOrigen { get; set; }
        public virtual DbSet<TConfiguracionDatoRemarketingProbabilidadRegistro> TConfiguracionDatoRemarketingProbabilidadRegistro { get; set; }
        public virtual DbSet<TConfiguracionDatoRemarketingTipoCategoriaOrigen> TConfiguracionDatoRemarketingTipoCategoriaOrigen { get; set; }
        public virtual DbSet<TConfiguracionDatoRemarketingTipoDato> TConfiguracionDatoRemarketingTipoDato { get; set; }
        public virtual DbSet<TConfiguracionDiscador> TConfiguracionDiscador { get; set; }
        public virtual DbSet<TConfiguracionEnvioAutomatico> TConfiguracionEnvioAutomatico { get; set; }
        public virtual DbSet<TConfiguracionEnvioAutomaticoDetalle> TConfiguracionEnvioAutomaticoDetalle { get; set; }
        public virtual DbSet<TConfiguracionEnvioMailing> TConfiguracionEnvioMailing { get; set; }
        public virtual DbSet<TConfiguracionEnvioMailingDetalle> TConfiguracionEnvioMailingDetalle { get; set; }
        public virtual DbSet<TConfiguracionFija> TConfiguracionFija { get; set; }
        public virtual DbSet<TConfiguracionHorarioMarcacion> TConfiguracionHorarioMarcacion { get; set; }
        public virtual DbSet<TConfiguracionHorarioMarcacionGrupo> TConfiguracionHorarioMarcacionGrupo { get; set; }
        public virtual DbSet<TConfiguracionInvitacion> TConfiguracionInvitacion { get; set; }
        public virtual DbSet<TConfiguracionLlamadaOcurrencia> TConfiguracionLlamadaOcurrencia { get; set; }
        public virtual DbSet<TConfiguracionLlamadaOcurrenciaAlterno> TConfiguracionLlamadaOcurrenciaAlterno { get; set; }
        public virtual DbSet<TConfiguracionMarcadorMensaje> TConfiguracionMarcadorMensaje { get; set; }
        public virtual DbSet<TConfiguracionPlanilla> TConfiguracionPlanilla { get; set; }
        public virtual DbSet<TConfiguracionPlanillaFechas> TConfiguracionPlanillaFechas { get; set; }
        public virtual DbSet<TConfiguracionRutinaBncObsoleto> TConfiguracionRutinaBncObsoleto { get; set; }
        public virtual DbSet<TConfiguracionRutinaBncObsoletoCategoriaOrigen> TConfiguracionRutinaBncObsoletoCategoriaOrigen { get; set; }
        public virtual DbSet<TConfiguracionRutinaBncObsoletoTipoDato> TConfiguracionRutinaBncObsoletoTipoDato { get; set; }
        public virtual DbSet<TConfiguracionTipoMarcacion> TConfiguracionTipoMarcacion { get; set; }
        public virtual DbSet<TConfiguracionWebinar> TConfiguracionWebinar { get; set; }
        public virtual DbSet<TConfigurarEvaluacionTrabajo> TConfigurarEvaluacionTrabajo { get; set; }
        public virtual DbSet<TConfigurarExamenPrograma> TConfigurarExamenPrograma { get; set; }
        public virtual DbSet<TConfigurarExamenProgramaPregunta> TConfigurarExamenProgramaPregunta { get; set; }
        public virtual DbSet<TConfigurarExamenesEncuestasEstructura> TConfigurarExamenesEncuestasEstructura { get; set; }
        public virtual DbSet<TConfigurarVideoPrograma> TConfigurarVideoPrograma { get; set; }
        public virtual DbSet<TConfigurarWebinar> TConfigurarWebinar { get; set; }
        public virtual DbSet<TConfirmacionWebinar> TConfirmacionWebinar { get; set; }
        public virtual DbSet<TCongelamientoPespecificoEsquemaEvaluacionDetalleMatriculaAlumno> TCongelamientoPespecificoEsquemaEvaluacionDetalleMatriculaAlumno { get; set; }
        public virtual DbSet<TConjuntoAnuncio> TConjuntoAnuncio { get; set; }
        public virtual DbSet<TConjuntoAnuncioAdword> TConjuntoAnuncioAdword { get; set; }
        public virtual DbSet<TConjuntoAnuncioFacebook> TConjuntoAnuncioFacebook { get; set; }
        public virtual DbSet<TConjuntoAnuncioFuente> TConjuntoAnuncioFuente { get; set; }
        public virtual DbSet<TConjuntoAnuncioTipoObjetivo> TConjuntoAnuncioTipoObjetivo { get; set; }
        public virtual DbSet<TConjuntoLista> TConjuntoLista { get; set; }
        public virtual DbSet<TConjuntoListaDetalle> TConjuntoListaDetalle { get; set; }
        public virtual DbSet<TConjuntoListaDetalleValor> TConjuntoListaDetalleValor { get; set; }
        public virtual DbSet<TConjuntoListaResultado> TConjuntoListaResultado { get; set; }
        public virtual DbSet<TContactoConfiguracion> TContactoConfiguracion { get; set; }
        public virtual DbSet<TContadorBic> TContadorBic { get; set; }
        public virtual DbSet<TContadorBicHistorico> TContadorBicHistorico { get; set; }
        public virtual DbSet<TContenidoCertificadoIrca> TContenidoCertificadoIrca { get; set; }
        public virtual DbSet<TContenidoDatoAdicional> TContenidoDatoAdicional { get; set; }
        public virtual DbSet<TContratoEstado> TContratoEstado { get; set; }
        public virtual DbSet<TControlDescargaLlamadaAsterisk> TControlDescargaLlamadaAsterisk { get; set; }
        public virtual DbSet<TControlDoc> TControlDoc { get; set; }
        public virtual DbSet<TControlDocAlumno> TControlDocAlumno { get; set; }
        public virtual DbSet<TControlPantalla> TControlPantalla { get; set; }
        public virtual DbSet<TControlPantallaAsesores> TControlPantallaAsesores { get; set; }
        public virtual DbSet<TControlPantallaCategoriaOrigen> TControlPantallaCategoriaOrigen { get; set; }
        public virtual DbSet<TControlPantallaCentroCosto> TControlPantallaCentroCosto { get; set; }
        public virtual DbSet<TControlPantallaFaseOportunidad> TControlPantallaFaseOportunidad { get; set; }
        public virtual DbSet<TControlPantallaTipoDato> TControlPantallaTipoDato { get; set; }
        public virtual DbSet<TConvalidacionNota> TConvalidacionNota { get; set; }
        public virtual DbSet<TConvocatoriaPersonal> TConvocatoriaPersonal { get; set; }
        public virtual DbSet<TCoordinadora> TCoordinadora { get; set; }
        public virtual DbSet<TCorreoGmail> TCorreoGmail { get; set; }
        public virtual DbSet<TCorreoGmailArchivoAdjunto> TCorreoGmailArchivoAdjunto { get; set; }
        public virtual DbSet<TCorreoPlantillaPorOcurrenciaActividad> TCorreoPlantillaPorOcurrenciaActividad { get; set; }
        public virtual DbSet<TCourier> TCourier { get; set; }
        public virtual DbSet<TCourierDetalle> TCourierDetalle { get; set; }
        public virtual DbSet<TCreativoPublicidad> TCreativoPublicidad { get; set; }
        public virtual DbSet<TCriterioCalificacion> TCriterioCalificacion { get; set; }
        public virtual DbSet<TCriterioDoc> TCriterioDoc { get; set; }
        public virtual DbSet<TCriterioEvaluacion> TCriterioEvaluacion { get; set; }
        public virtual DbSet<TCriterioEvaluacionCategoria> TCriterioEvaluacionCategoria { get; set; }
        public virtual DbSet<TCriterioEvaluacionModalidadCurso> TCriterioEvaluacionModalidadCurso { get; set; }
        public virtual DbSet<TCriterioEvaluacionProceso> TCriterioEvaluacionProceso { get; set; }
        public virtual DbSet<TCriterioEvaluacionTipo> TCriterioEvaluacionTipo { get; set; }
        public virtual DbSet<TCriterioEvaluacionTipoPersona> TCriterioEvaluacionTipoPersona { get; set; }
        public virtual DbSet<TCriterioEvaluacionTipoPrograma> TCriterioEvaluacionTipoPrograma { get; set; }
        public virtual DbSet<TCronogramaAlumnoProvisional> TCronogramaAlumnoProvisional { get; set; }
        public virtual DbSet<TCronogramaCabeceraCambio> TCronogramaCabeceraCambio { get; set; }
        public virtual DbSet<TCronogramaDetalleCambio> TCronogramaDetalleCambio { get; set; }
        public virtual DbSet<TCronogramaOriginalesCongeladoPorDia> TCronogramaOriginalesCongeladoPorDia { get; set; }
        public virtual DbSet<TCronogramaPago> TCronogramaPago { get; set; }
        public virtual DbSet<TCronogramaPagoDetalle> TCronogramaPagoDetalle { get; set; }
        public virtual DbSet<TCronogramaPagoDetalleFinal> TCronogramaPagoDetalleFinal { get; set; }
        public virtual DbSet<TCronogramaPagoDetalleFinalCierre> TCronogramaPagoDetalleFinalCierre { get; set; }
        public virtual DbSet<TCronogramaPagoDetalleFinalPorDia> TCronogramaPagoDetalleFinalPorDia { get; set; }
        public virtual DbSet<TCronogramaPagoDetalleFinalPorPeriodo> TCronogramaPagoDetalleFinalPorPeriodo { get; set; }
        public virtual DbSet<TCronogramaPagoDetalleInHouse> TCronogramaPagoDetalleInHouse { get; set; }
        public virtual DbSet<TCronogramaPagoDetalleMod> TCronogramaPagoDetalleMod { get; set; }
        public virtual DbSet<TCronogramaPagoDetalleModLog> TCronogramaPagoDetalleModLog { get; set; }
        public virtual DbSet<TCronogramaPagoDetalleModLogFinal> TCronogramaPagoDetalleModLogFinal { get; set; }
        public virtual DbSet<TCronogramaPagoDetalleOriginal> TCronogramaPagoDetalleOriginal { get; set; }
        public virtual DbSet<TCronogramaPagoTarifario> TCronogramaPagoTarifario { get; set; }
        public virtual DbSet<TCronogramaSubTipoModificacion> TCronogramaSubTipoModificacion { get; set; }
        public virtual DbSet<TCronogramaTipoModificacion> TCronogramaTipoModificacion { get; set; }
        public virtual DbSet<TCronogramaVersionFinalPorDia> TCronogramaVersionFinalPorDia { get; set; }
        public virtual DbSet<TCrucigramaProgramaCapacitacion> TCrucigramaProgramaCapacitacion { get; set; }
        public virtual DbSet<TCrucigramaProgramaCapacitacionDetalle> TCrucigramaProgramaCapacitacionDetalle { get; set; }
        public virtual DbSet<TCuentaContablePadre> TCuentaContablePadre { get; set; }
        public virtual DbSet<TCuentaCorriente> TCuentaCorriente { get; set; }
        public virtual DbSet<TCuerpoConvocatoria> TCuerpoConvocatoria { get; set; }
        public virtual DbSet<TCursoInformatica> TCursoInformatica { get; set; }
        public virtual DbSet<TCursoMoodle> TCursoMoodle { get; set; }
        public virtual DbSet<TCursoPespecifico> TCursoPespecifico { get; set; }
        public virtual DbSet<TDataCreditoBusqueda> TDataCreditoBusqueda { get; set; }
        public virtual DbSet<TDataCreditoCodigoClaseCuenta> TDataCreditoCodigoClaseCuenta { get; set; }
        public virtual DbSet<TDataCreditoCodigoClasificacionCuenta> TDataCreditoCodigoClasificacionCuenta { get; set; }
        public virtual DbSet<TDataCreditoCodigoEstadoCuenta> TDataCreditoCodigoEstadoCuenta { get; set; }
        public virtual DbSet<TDataCreditoCodigoSector> TDataCreditoCodigoSector { get; set; }
        public virtual DbSet<TDataCreditoCodigoSituacionTitular> TDataCreditoCodigoSituacionTitular { get; set; }
        public virtual DbSet<TDataCreditoCodigoTipoMoneda> TDataCreditoCodigoTipoMoneda { get; set; }
        public virtual DbSet<TDataCreditoConsulta> TDataCreditoConsulta { get; set; }
        public virtual DbSet<TDataCreditoDataCuentaAhorro> TDataCreditoDataCuentaAhorro { get; set; }
        public virtual DbSet<TDataCreditoDataCuentaCartera> TDataCreditoDataCuentaCartera { get; set; }
        public virtual DbSet<TDataCreditoDataEndeudamientoGlobal> TDataCreditoDataEndeudamientoGlobal { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrComposicionPortafolio> TDataCreditoDataInfAgrComposicionPortafolio { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrEvolucionDeudaAnalisisPromedio> TDataCreditoDataInfAgrEvolucionDeudaAnalisisPromedio { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrEvolucionDeudaTrimestre> TDataCreditoDataInfAgrEvolucionDeudaTrimestre { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrHistoricoSaldoTipoCuenta> TDataCreditoDataInfAgrHistoricoSaldoTipoCuenta { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrHistoricoSaldoTotal> TDataCreditoDataInfAgrHistoricoSaldoTotal { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrResumenComportamiento> TDataCreditoDataInfAgrResumenComportamiento { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrResumenEndeudamiento> TDataCreditoDataInfAgrResumenEndeudamiento { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrResumenPrincipal> TDataCreditoDataInfAgrResumenPrincipal { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrResumenSaldo> TDataCreditoDataInfAgrResumenSaldo { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrResumenSaldoMes> TDataCreditoDataInfAgrResumenSaldoMes { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrResumenSaldoSector> TDataCreditoDataInfAgrResumenSaldoSector { get; set; }
        public virtual DbSet<TDataCreditoDataInfAgrTotal> TDataCreditoDataInfAgrTotal { get; set; }
        public virtual DbSet<TDataCreditoDataInfMicroAnalisisVector> TDataCreditoDataInfMicroAnalisisVector { get; set; }
        public virtual DbSet<TDataCreditoDataInfMicroEndeudamientoActual> TDataCreditoDataInfMicroEndeudamientoActual { get; set; }
        public virtual DbSet<TDataCreditoDataInfMicroEvolucionDeuda> TDataCreditoDataInfMicroEvolucionDeuda { get; set; }
        public virtual DbSet<TDataCreditoDataInfMicroImagenTendenciaEndeudamiento> TDataCreditoDataInfMicroImagenTendenciaEndeudamiento { get; set; }
        public virtual DbSet<TDataCreditoDataInfMicroPerfilGeneral> TDataCreditoDataInfMicroPerfilGeneral { get; set; }
        public virtual DbSet<TDataCreditoDataInfMicroVectorSaldoMora> TDataCreditoDataInfMicroVectorSaldoMora { get; set; }
        public virtual DbSet<TDataCreditoDataNaturalNacional> TDataCreditoDataNaturalNacional { get; set; }
        public virtual DbSet<TDataCreditoDataProductoValor> TDataCreditoDataProductoValor { get; set; }
        public virtual DbSet<TDataCreditoDataScore> TDataCreditoDataScore { get; set; }
        public virtual DbSet<TDataCreditoDataTarjetaCredito> TDataCreditoDataTarjetaCredito { get; set; }
        public virtual DbSet<TDataCreditoLog> TDataCreditoLog { get; set; }
        public virtual DbSet<TDatoAdicionalPagina> TDatoAdicionalPagina { get; set; }
        public virtual DbSet<TDatoContratoComisionBono> TDatoContratoComisionBono { get; set; }
        public virtual DbSet<TDatoContratoPersonal> TDatoContratoPersonal { get; set; }
        public virtual DbSet<TDatoFamiliarPersonal> TDatoFamiliarPersonal { get; set; }
        public virtual DbSet<TDatoLandingPage> TDatoLandingPage { get; set; }
        public virtual DbSet<TDatoOportunidadAreaVenta> TDatoOportunidadAreaVenta { get; set; }
        public virtual DbSet<TDescuentoPromocion> TDescuentoPromocion { get; set; }
        public virtual DbSet<TDetalleOportunidadCompetidor> TDetalleOportunidadCompetidor { get; set; }
        public virtual DbSet<TDetraccion> TDetraccion { get; set; }
        public virtual DbSet<TDiaSemana> TDiaSemana { get; set; }
        public virtual DbSet<TDiccionarioPalabraOfensiva> TDiccionarioPalabraOfensiva { get; set; }
        public virtual DbSet<TDocumentacionComercialPw> TDocumentacionComercialPw { get; set; }
        public virtual DbSet<TDocumentacionPersonal> TDocumentacionPersonal { get; set; }
        public virtual DbSet<TDocumento> TDocumento { get; set; }
        public virtual DbSet<TDocumentoConfiguracionRecepcion> TDocumentoConfiguracionRecepcion { get; set; }
        public virtual DbSet<TDocumentoEnviadoWebPw> TDocumentoEnviadoWebPw { get; set; }
        public virtual DbSet<TDocumentoIdentidad> TDocumentoIdentidad { get; set; }
        public virtual DbSet<TDocumentoLegal> TDocumentoLegal { get; set; }
        public virtual DbSet<TDocumentoLegalAreaTrabajo> TDocumentoLegalAreaTrabajo { get; set; }
        public virtual DbSet<TDocumentoLegalPais> TDocumentoLegalPais { get; set; }
        public virtual DbSet<TDocumentoMarketing> TDocumentoMarketing { get; set; }
        public virtual DbSet<TDocumentoOportunidad> TDocumentoOportunidad { get; set; }
        public virtual DbSet<TDocumentoPago> TDocumentoPago { get; set; }
        public virtual DbSet<TDocumentoPw> TDocumentoPw { get; set; }
        public virtual DbSet<TDocumentoRecepcionado> TDocumentoRecepcionado { get; set; }
        public virtual DbSet<TDocumentoSeccionPw> TDocumentoSeccionPw { get; set; }
        public virtual DbSet<TDominio> TDominio { get; set; }
        public virtual DbSet<TDuracionAvanceAcademicoMoodle> TDuracionAvanceAcademicoMoodle { get; set; }
        public virtual DbSet<TEjecucionEstadoWhatsApp> TEjecucionEstadoWhatsApp { get; set; }
        public virtual DbSet<TEjecucionEstadoWhatsAppLog> TEjecucionEstadoWhatsAppLog { get; set; }
        public virtual DbSet<TElemento> TElemento { get; set; }
        public virtual DbSet<TElementoCategoria> TElementoCategoria { get; set; }
        public virtual DbSet<TElementoSubCategoria> TElementoSubCategoria { get; set; }
        public virtual DbSet<TEmbudo> TEmbudo { get; set; }
        public virtual DbSet<TEmbudoFiltro> TEmbudoFiltro { get; set; }
        public virtual DbSet<TEmbudoNivel> TEmbudoNivel { get; set; }
        public virtual DbSet<TEmbudoPre> TEmbudoPre { get; set; }
        public virtual DbSet<TEmbudoSubNivel> TEmbudoSubNivel { get; set; }
        public virtual DbSet<TEmpresa> TEmpresa { get; set; }
        public virtual DbSet<TEmpresaAutorizada> TEmpresaAutorizada { get; set; }
        public virtual DbSet<TEmpresaFinanza> TEmpresaFinanza { get; set; }
        public virtual DbSet<TEnlaceMailChimp> TEnlaceMailChimp { get; set; }
        public virtual DbSet<TEntidadFinanciera> TEntidadFinanciera { get; set; }
        public virtual DbSet<TEntidadSeguroSalud> TEntidadSeguroSalud { get; set; }
        public virtual DbSet<TEntidadSistemaPensionario> TEntidadSistemaPensionario { get; set; }
        public virtual DbSet<TEnvioCorreoBicOperaciones> TEnvioCorreoBicOperaciones { get; set; }
        public virtual DbSet<TEnvioCorreoIncidencia> TEnvioCorreoIncidencia { get; set; }
        public virtual DbSet<TEnvioCorreoMandril> TEnvioCorreoMandril { get; set; }
        public virtual DbSet<TEnvioCorreoMasivo> TEnvioCorreoMasivo { get; set; }
        public virtual DbSet<TError> TError { get; set; }
        public virtual DbSet<TErrorTipo> TErrorTipo { get; set; }
        public virtual DbSet<TEscalaCalificacion> TEscalaCalificacion { get; set; }
        public virtual DbSet<TEscalaCalificacionDetalle> TEscalaCalificacionDetalle { get; set; }
        public virtual DbSet<TEsquemaEvaluacion> TEsquemaEvaluacion { get; set; }
        public virtual DbSet<TEsquemaEvaluacionDetalle> TEsquemaEvaluacionDetalle { get; set; }
        public virtual DbSet<TEsquemaEvaluacionPgeneral> TEsquemaEvaluacionPgeneral { get; set; }
        public virtual DbSet<TEsquemaEvaluacionPgeneralDetalle> TEsquemaEvaluacionPgeneralDetalle { get; set; }
        public virtual DbSet<TEsquemaEvaluacionPgeneralModalidad> TEsquemaEvaluacionPgeneralModalidad { get; set; }
        public virtual DbSet<TEsquemaEvaluacionPgeneralProveedor> TEsquemaEvaluacionPgeneralProveedor { get; set; }
        public virtual DbSet<TEstadoActividadDetalle> TEstadoActividadDetalle { get; set; }
        public virtual DbSet<TEstadoCertificadoFisico> TEstadoCertificadoFisico { get; set; }
        public virtual DbSet<TEstadoChat> TEstadoChat { get; set; }
        public virtual DbSet<TEstadoCivil> TEstadoCivil { get; set; }
        public virtual DbSet<TEstadoContactoMailing> TEstadoContactoMailing { get; set; }
        public virtual DbSet<TEstadoContactoWhatsApp> TEstadoContactoWhatsApp { get; set; }
        public virtual DbSet<TEstadoEnvio> TEstadoEnvio { get; set; }
        public virtual DbSet<TEstadoEnvioCorreo> TEstadoEnvioCorreo { get; set; }
        public virtual DbSet<TEstadoEtapaProcesoSeleccion> TEstadoEtapaProcesoSeleccion { get; set; }
        public virtual DbSet<TEstadoMatricula> TEstadoMatricula { get; set; }
        public virtual DbSet<TEstadoMatriculaEstandar> TEstadoMatriculaEstandar { get; set; }
        public virtual DbSet<TEstadoOcurrencia> TEstadoOcurrencia { get; set; }
        public virtual DbSet<TEstadoOportunidad> TEstadoOportunidad { get; set; }
        public virtual DbSet<TEstadoPagoMatricula> TEstadoPagoMatricula { get; set; }
        public virtual DbSet<TEstadoPespecifico> TEstadoPespecifico { get; set; }
        public virtual DbSet<TEstadoProcesoSeleccion> TEstadoProcesoSeleccion { get; set; }
        public virtual DbSet<TEstadoRegistroMaterial> TEstadoRegistroMaterial { get; set; }
        public virtual DbSet<TEstadoSeguimientoPreProcesoListaWhatsApp> TEstadoSeguimientoPreProcesoListaWhatsApp { get; set; }
        public virtual DbSet<TEstadoSolicitudBeneficio> TEstadoSolicitudBeneficio { get; set; }
        public virtual DbSet<TEstructuraEspecifica> TEstructuraEspecifica { get; set; }
        public virtual DbSet<TEstructuraEspecificaCapitulo> TEstructuraEspecificaCapitulo { get; set; }
        public virtual DbSet<TEstructuraEspecificaEncuesta> TEstructuraEspecificaEncuesta { get; set; }
        public virtual DbSet<TEstructuraEspecificaSesion> TEstructuraEspecificaSesion { get; set; }
        public virtual DbSet<TEstructuraEspecificaSubSesion> TEstructuraEspecificaSubSesion { get; set; }
        public virtual DbSet<TEstructuraEspecificaTarea> TEstructuraEspecificaTarea { get; set; }
        public virtual DbSet<TEtapaProcesoSeleccionCalificado> TEtapaProcesoSeleccionCalificado { get; set; }
        public virtual DbSet<TEtiqueta> TEtiqueta { get; set; }
        public virtual DbSet<TEtiquetaBotonReemplazo> TEtiquetaBotonReemplazo { get; set; }
        public virtual DbSet<TEvaluacion> TEvaluacion { get; set; }
        public virtual DbSet<TEvaluacionCategoria> TEvaluacionCategoria { get; set; }
        public virtual DbSet<TEvaluacionComportamiento> TEvaluacionComportamiento { get; set; }
        public virtual DbSet<TEvaluacionConfiguracionFormato> TEvaluacionConfiguracionFormato { get; set; }
        public virtual DbSet<TEvaluacionEscalaCalificacion> TEvaluacionEscalaCalificacion { get; set; }
        public virtual DbSet<TEvaluacionFeedback> TEvaluacionFeedback { get; set; }
        public virtual DbSet<TEvaluacionPersona> TEvaluacionPersona { get; set; }
        public virtual DbSet<TEvaluacionResultado> TEvaluacionResultado { get; set; }
        public virtual DbSet<TEvaluacionTipo> TEvaluacionTipo { get; set; }
        public virtual DbSet<TEventoCalendarioProyecto> TEventoCalendarioProyecto { get; set; }
        public virtual DbSet<TEventoCalendarioProyectoPersonal> TEventoCalendarioProyectoPersonal { get; set; }
        public virtual DbSet<TExamen> TExamen { get; set; }
        public virtual DbSet<TExamenAsignado> TExamenAsignado { get; set; }
        public virtual DbSet<TExamenAsignadoEvaluador> TExamenAsignadoEvaluador { get; set; }
        public virtual DbSet<TExamenComportamiento> TExamenComportamiento { get; set; }
        public virtual DbSet<TExamenConfiguracionFormato> TExamenConfiguracionFormato { get; set; }
        public virtual DbSet<TExamenConfigurarResultado> TExamenConfigurarResultado { get; set; }
        public virtual DbSet<TExamenFeedback> TExamenFeedback { get; set; }
        public virtual DbSet<TExamenRealizadoRespuesta> TExamenRealizadoRespuesta { get; set; }
        public virtual DbSet<TExamenRealizadoRespuestaAulaVirtual> TExamenRealizadoRespuestaAulaVirtual { get; set; }
        public virtual DbSet<TExamenRealizadoRespuestaEvaluador> TExamenRealizadoRespuestaEvaluador { get; set; }
        public virtual DbSet<TExamenTest> TExamenTest { get; set; }
        public virtual DbSet<TExcepcionFrecuenciaPw> TExcepcionFrecuenciaPw { get; set; }
        public virtual DbSet<TExperiencia> TExperiencia { get; set; }
        public virtual DbSet<TExpositor> TExpositor { get; set; }
        public virtual DbSet<TExpositorLog> TExpositorLog { get; set; }
        public virtual DbSet<TExpositorPorArea> TExpositorPorArea { get; set; }
        public virtual DbSet<TFacebookAnuncio> TFacebookAnuncio { get; set; }
        public virtual DbSet<TFacebookAnuncioCreativo> TFacebookAnuncioCreativo { get; set; }
        public virtual DbSet<TFacebookAplicacion> TFacebookAplicacion { get; set; }
        public virtual DbSet<TFacebookAplicacionPagina> TFacebookAplicacionPagina { get; set; }
        public virtual DbSet<TFacebookAudiencia> TFacebookAudiencia { get; set; }
        public virtual DbSet<TFacebookAudienciaAlumno> TFacebookAudienciaAlumno { get; set; }
        public virtual DbSet<TFacebookAudienciaCuentaPublicitaria> TFacebookAudienciaCuentaPublicitaria { get; set; }
        public virtual DbSet<TFacebookCampanha> TFacebookCampanha { get; set; }
        public virtual DbSet<TFacebookConjuntoAnuncioEstadisticaDiaria> TFacebookConjuntoAnuncioEstadisticaDiaria { get; set; }
        public virtual DbSet<TFacebookCuentaPublicitaria> TFacebookCuentaPublicitaria { get; set; }
        public virtual DbSet<TFacebookFormularioLeadgen> TFacebookFormularioLeadgen { get; set; }
        public virtual DbSet<TFacebookFormularioWebhookLeadgen> TFacebookFormularioWebhookLeadgen { get; set; }
        public virtual DbSet<TFacebookFormularioWebhookLeadgenError> TFacebookFormularioWebhookLeadgenError { get; set; }
        public virtual DbSet<TFacebookPagina> TFacebookPagina { get; set; }
        public virtual DbSet<TFacebookPost> TFacebookPost { get; set; }
        public virtual DbSet<TFacebookPostLogTask> TFacebookPostLogTask { get; set; }
        public virtual DbSet<TFacebookReaccionPublicacion> TFacebookReaccionPublicacion { get; set; }
        public virtual DbSet<TFacebookTipoReaccion> TFacebookTipoReaccion { get; set; }
        public virtual DbSet<TFacebookUsuario> TFacebookUsuario { get; set; }
        public virtual DbSet<TFacebookUsuarioOportunidad> TFacebookUsuarioOportunidad { get; set; }
        public virtual DbSet<TFaseByPlantilla> TFaseByPlantilla { get; set; }
        public virtual DbSet<TFaseOportunidad> TFaseOportunidad { get; set; }
        public virtual DbSet<TFaseTiempoLlamada> TFaseTiempoLlamada { get; set; }
        public virtual DbSet<TFeedbackConfigurar> TFeedbackConfigurar { get; set; }
        public virtual DbSet<TFeedbackConfigurarDetalle> TFeedbackConfigurarDetalle { get; set; }
        public virtual DbSet<TFeedbackConfigurarGrupoPregunta> TFeedbackConfigurarGrupoPregunta { get; set; }
        public virtual DbSet<TFeedbackGrupoPreguntaProgramaEspecifico> TFeedbackGrupoPreguntaProgramaEspecifico { get; set; }
        public virtual DbSet<TFeedbackGrupoPreguntaProgramaGeneral> TFeedbackGrupoPreguntaProgramaGeneral { get; set; }
        public virtual DbSet<TFeedbackTipo> TFeedbackTipo { get; set; }
        public virtual DbSet<TFeriado> TFeriado { get; set; }
        public virtual DbSet<TFeriadoEspecial> TFeriadoEspecial { get; set; }
        public virtual DbSet<TFeriadoFrecuencia> TFeriadoFrecuencia { get; set; }
        public virtual DbSet<TFeriadoTipo> TFeriadoTipo { get; set; }
        public virtual DbSet<TFiltroSegmento> TFiltroSegmento { get; set; }
        public virtual DbSet<TFiltroSegmentoCalculado> TFiltroSegmentoCalculado { get; set; }
        public virtual DbSet<TFiltroSegmentoDetalle> TFiltroSegmentoDetalle { get; set; }
        public virtual DbSet<TFiltroSegmentoTipoContacto> TFiltroSegmentoTipoContacto { get; set; }
        public virtual DbSet<TFiltroSegmentoTipoNivel> TFiltroSegmentoTipoNivel { get; set; }
        public virtual DbSet<TFiltroSegmentoValorTipo> TFiltroSegmentoValorTipo { get; set; }
        public virtual DbSet<TFlujo> TFlujo { get; set; }
        public virtual DbSet<TFlujoActividad> TFlujoActividad { get; set; }
        public virtual DbSet<TFlujoFase> TFlujoFase { get; set; }
        public virtual DbSet<TFlujoOcurrencia> TFlujoOcurrencia { get; set; }
        public virtual DbSet<TFlujoPorPespecifico> TFlujoPorPespecifico { get; set; }
        public virtual DbSet<TFormaCalculoEvaluacion> TFormaCalculoEvaluacion { get; set; }
        public virtual DbSet<TFormaCalificacionEvaluacion> TFormaCalificacionEvaluacion { get; set; }
        public virtual DbSet<TFormaPago> TFormaPago { get; set; }
        public virtual DbSet<TFormulaPuntaje> TFormulaPuntaje { get; set; }
        public virtual DbSet<TFormulaTipoDescuento> TFormulaTipoDescuento { get; set; }
        public virtual DbSet<TFormularioIncompletoPreprocesado> TFormularioIncompletoPreprocesado { get; set; }
        public virtual DbSet<TFormularioIncompletoProcesado> TFormularioIncompletoProcesado { get; set; }
        public virtual DbSet<TFormularioLandingAb> TFormularioLandingAb { get; set; }
        public virtual DbSet<TFormularioLandingPage> TFormularioLandingPage { get; set; }
        public virtual DbSet<TFormularioPlantilla> TFormularioPlantilla { get; set; }
        public virtual DbSet<TFormularioRespuesta> TFormularioRespuesta { get; set; }
        public virtual DbSet<TFormularioRespuestaPlantilla> TFormularioRespuestaPlantilla { get; set; }
        public virtual DbSet<TFormularioSolicitud> TFormularioSolicitud { get; set; }
        public virtual DbSet<TFormularioSolicitudTextoBoton> TFormularioSolicitudTextoBoton { get; set; }
        public virtual DbSet<TFrecuencia> TFrecuencia { get; set; }
        public virtual DbSet<TFrecuenciaPuestoTrabajo> TFrecuenciaPuestoTrabajo { get; set; }
        public virtual DbSet<TFur> TFur { get; set; }
        public virtual DbSet<TFurConfiguracionAutomatica> TFurConfiguracionAutomatica { get; set; }
        public virtual DbSet<TFurFaseAprobacion> TFurFaseAprobacion { get; set; }
        public virtual DbSet<TFurLog> TFurLog { get; set; }
        public virtual DbSet<TFurPago> TFurPago { get; set; }
        public virtual DbSet<TFurSubFaseAprobacion> TFurSubFaseAprobacion { get; set; }
        public virtual DbSet<TFurTipoPedido> TFurTipoPedido { get; set; }
        public virtual DbSet<TFurTipoSolicitud> TFurTipoSolicitud { get; set; }
        public virtual DbSet<TGastoFinancieroCronograma> TGastoFinancieroCronograma { get; set; }
        public virtual DbSet<TGastoFinancieroCronogramaDetalle> TGastoFinancieroCronogramaDetalle { get; set; }
        public virtual DbSet<TGenero> TGenero { get; set; }
        public virtual DbSet<TGmailCliente> TGmailCliente { get; set; }
        public virtual DbSet<TGmailCorreo> TGmailCorreo { get; set; }
        public virtual DbSet<TGmailCorreoArchivoAdjunto> TGmailCorreoArchivoAdjunto { get; set; }
        public virtual DbSet<TGmailFolder> TGmailFolder { get; set; }
        public virtual DbSet<TGmailLabel> TGmailLabel { get; set; }
        public virtual DbSet<TGoogleAnalyticsMetrica> TGoogleAnalyticsMetrica { get; set; }
        public virtual DbSet<TGoogleAnalyticsReporteDetalle> TGoogleAnalyticsReporteDetalle { get; set; }
        public virtual DbSet<TGoogleAnalyticsReportePagina> TGoogleAnalyticsReportePagina { get; set; }
        public virtual DbSet<TGoogleAnalyticsSegmento> TGoogleAnalyticsSegmento { get; set; }
        public virtual DbSet<TGradoEstudio> TGradoEstudio { get; set; }
        public virtual DbSet<TGrupoComparacionProcesoSeleccion> TGrupoComparacionProcesoSeleccion { get; set; }
        public virtual DbSet<TGrupoComponenteEvaluacion> TGrupoComponenteEvaluacion { get; set; }
        public virtual DbSet<TGrupoFiltroProgramaCritico> TGrupoFiltroProgramaCritico { get; set; }
        public virtual DbSet<TGrupoFiltroProgramaCriticoCentroCosto> TGrupoFiltroProgramaCriticoCentroCosto { get; set; }
        public virtual DbSet<TGrupoFiltroProgramaCriticoPgeneral> TGrupoFiltroProgramaCriticoPgeneral { get; set; }
        public virtual DbSet<TGrupoFiltroProgramaCriticoPorAsesor> TGrupoFiltroProgramaCriticoPorAsesor { get; set; }
        public virtual DbSet<THabilidadSimulador> THabilidadSimulador { get; set; }
        public virtual DbSet<THistoricoDetalleOportunidadRn2> THistoricoDetalleOportunidadRn2 { get; set; }
        public virtual DbSet<THistoricoOportunidadRn2> THistoricoOportunidadRn2 { get; set; }
        public virtual DbSet<THistoricoProductoProveedor> THistoricoProductoProveedor { get; set; }
        public virtual DbSet<THojaOportunidadTipoPanel> THojaOportunidadTipoPanel { get; set; }
        public virtual DbSet<THora> THora { get; set; }
        public virtual DbSet<THoraBloqueada> THoraBloqueada { get; set; }
        public virtual DbSet<THorarioGrupo> THorarioGrupo { get; set; }
        public virtual DbSet<THorarioGrupoPersonal> THorarioGrupoPersonal { get; set; }
        public virtual DbSet<TIdioma> TIdioma { get; set; }
        public virtual DbSet<TIndicador> TIndicador { get; set; }
        public virtual DbSet<TIndicadorFrecuencia> TIndicadorFrecuencia { get; set; }
        public virtual DbSet<TIndicadorProblema> TIndicadorProblema { get; set; }
        public virtual DbSet<TIndicadorProblemaTipoPanel> TIndicadorProblemaTipoPanel { get; set; }
        public virtual DbSet<TIndicadorReporteCambioFase> TIndicadorReporteCambioFase { get; set; }
        public virtual DbSet<TIndustria> TIndustria { get; set; }
        public virtual DbSet<TInformacionAlumnoChat> TInformacionAlumnoChat { get; set; }
        public virtual DbSet<TInformacionAlumnoChatLog> TInformacionAlumnoChatLog { get; set; }
        public virtual DbSet<TInstagramComentario> TInstagramComentario { get; set; }
        public virtual DbSet<TInstagramPublicacion> TInstagramPublicacion { get; set; }
        public virtual DbSet<TInstagramUsuario> TInstagramUsuario { get; set; }
        public virtual DbSet<TIntegraAspNetUsers> TIntegraAspNetUsers { get; set; }
        public virtual DbSet<TIntentoPreguntaEvaluacion> TIntentoPreguntaEvaluacion { get; set; }
        public virtual DbSet<TInteraccion> TInteraccion { get; set; }
        public virtual DbSet<TInteraccionChat> TInteraccionChat { get; set; }
        public virtual DbSet<TInteraccionChatIntegra> TInteraccionChatIntegra { get; set; }
        public virtual DbSet<TInteraccionChatMessenger> TInteraccionChatMessenger { get; set; }
        public virtual DbSet<TInteraccionChatWhatsApp> TInteraccionChatWhatsApp { get; set; }
        public virtual DbSet<TInteraccionCorreo> TInteraccionCorreo { get; set; }
        public virtual DbSet<TInteraccionCorreoDetalleMailChimp> TInteraccionCorreoDetalleMailChimp { get; set; }
        public virtual DbSet<TInteraccionCorreoMailChimp> TInteraccionCorreoMailChimp { get; set; }
        public virtual DbSet<TInteraccionEnlaceDetalleMailChimp> TInteraccionEnlaceDetalleMailChimp { get; set; }
        public virtual DbSet<TInteraccionEnlaceMailchimp> TInteraccionEnlaceMailchimp { get; set; }
        public virtual DbSet<TInteraccionFormulario> TInteraccionFormulario { get; set; }
        public virtual DbSet<TInteraccionFormularioCampo> TInteraccionFormularioCampo { get; set; }
        public virtual DbSet<TInteraccionLlamadaDetalle> TInteraccionLlamadaDetalle { get; set; }
        public virtual DbSet<TInteraccionPagina> TInteraccionPagina { get; set; }
        public virtual DbSet<TInteraccionPortal> TInteraccionPortal { get; set; }
        public virtual DbSet<TInteraccionPortalPagina> TInteraccionPortalPagina { get; set; }
        public virtual DbSet<TInteraccionPortalPaginaDetalle> TInteraccionPortalPaginaDetalle { get; set; }
        public virtual DbSet<TInteraccionPortalPaginaFormulario> TInteraccionPortalPaginaFormulario { get; set; }
        public virtual DbSet<TInteraccionPortalPaginaFormularioCampo> TInteraccionPortalPaginaFormularioCampo { get; set; }
        public virtual DbSet<TInteraccionScore> TInteraccionScore { get; set; }
        public virtual DbSet<TInteracionRecopilacion> TInteracionRecopilacion { get; set; }
        public virtual DbSet<TInteresPotencialAlumno> TInteresPotencialAlumno { get; set; }
        public virtual DbSet<TIntervaloTiempo> TIntervaloTiempo { get; set; }
        public virtual DbSet<TLicencia> TLicencia { get; set; }
        public virtual DbSet<TLicenciaComplemento> TLicenciaComplemento { get; set; }
        public virtual DbSet<TListaCursoAreaEtiqueta> TListaCursoAreaEtiqueta { get; set; }
        public virtual DbSet<TListaCursoAreaEtiquetaDetalle> TListaCursoAreaEtiquetaDetalle { get; set; }
        public virtual DbSet<TListaMailchimp> TListaMailchimp { get; set; }
        public virtual DbSet<TListaPlantilla> TListaPlantilla { get; set; }
        public virtual DbSet<TLlamadaActividad> TLlamadaActividad { get; set; }
        public virtual DbSet<TLlamadaInicioDia> TLlamadaInicioDia { get; set; }
        public virtual DbSet<TLlamadaTranscripcion> TLlamadaTranscripcion { get; set; }
        public virtual DbSet<TLlamadaWebphone> TLlamadaWebphone { get; set; }
        public virtual DbSet<TLlamadaWebphoneAsterisk> TLlamadaWebphoneAsterisk { get; set; }
        public virtual DbSet<TLlamadaWebphoneCruceCentral> TLlamadaWebphoneCruceCentral { get; set; }
        public virtual DbSet<TLlamadaWebphoneEstado> TLlamadaWebphoneEstado { get; set; }
        public virtual DbSet<TLlamadaWebphoneReinicioAsesor> TLlamadaWebphoneReinicioAsesor { get; set; }
        public virtual DbSet<TLlamadaWebphoneTipo> TLlamadaWebphoneTipo { get; set; }
        public virtual DbSet<TLocacion> TLocacion { get; set; }
        public virtual DbSet<TLog> TLog { get; set; }
        public virtual DbSet<TLogFiltroSegmentoEjecutado> TLogFiltroSegmentoEjecutado { get; set; }
        public virtual DbSet<TLogRecuperacionAutomaticoModuloSistema> TLogRecuperacionAutomaticoModuloSistema { get; set; }
        public virtual DbSet<TLogRecuperacionAutomaticoModuloSistemaResponsable> TLogRecuperacionAutomaticoModuloSistemaResponsable { get; set; }
        public virtual DbSet<TLogSicronizacionCronograma> TLogSicronizacionCronograma { get; set; }
        public virtual DbSet<TLoggerOportunidad> TLoggerOportunidad { get; set; }
        public virtual DbSet<TMailChimpListaControlSubida> TMailChimpListaControlSubida { get; set; }
        public virtual DbSet<TMailChimpListaId> TMailChimpListaId { get; set; }
        public virtual DbSet<TMailchimpCorreo> TMailchimpCorreo { get; set; }
        public virtual DbSet<TMailchimpEstadisticaPorPrioridad> TMailchimpEstadisticaPorPrioridad { get; set; }
        public virtual DbSet<TMailingDetalleTop5> TMailingDetalleTop5 { get; set; }
        public virtual DbSet<TMailingListaTop5> TMailingListaTop5 { get; set; }
        public virtual DbSet<TMandril> TMandril { get; set; }
        public virtual DbSet<TMandrilClick> TMandrilClick { get; set; }
        public virtual DbSet<TMandrilEnvioCorreo> TMandrilEnvioCorreo { get; set; }
        public virtual DbSet<TMandrilLog> TMandrilLog { get; set; }
        public virtual DbSet<TMandrilOpen> TMandrilOpen { get; set; }
        public virtual DbSet<TMandrilTipoAsignacion> TMandrilTipoAsignacion { get; set; }
        public virtual DbSet<TMandrilTipoEnvio> TMandrilTipoEnvio { get; set; }
        public virtual DbSet<TMaterialAccion> TMaterialAccion { get; set; }
        public virtual DbSet<TMaterialAdicionalAulaVirtual> TMaterialAdicionalAulaVirtual { get; set; }
        public virtual DbSet<TMaterialAdicionalAulaVirtualPespecifico> TMaterialAdicionalAulaVirtualPespecifico { get; set; }
        public virtual DbSet<TMaterialAdicionalAulaVirtualRegistro> TMaterialAdicionalAulaVirtualRegistro { get; set; }
        public virtual DbSet<TMaterialAsociacionAccion> TMaterialAsociacionAccion { get; set; }
        public virtual DbSet<TMaterialAsociacionCriterioVerificacion> TMaterialAsociacionCriterioVerificacion { get; set; }
        public virtual DbSet<TMaterialAsociacionVersion> TMaterialAsociacionVersion { get; set; }
        public virtual DbSet<TMaterialCriterioVerificacion> TMaterialCriterioVerificacion { get; set; }
        public virtual DbSet<TMaterialCriterioVerificacionDetalle> TMaterialCriterioVerificacionDetalle { get; set; }
        public virtual DbSet<TMaterialEntrega> TMaterialEntrega { get; set; }
        public virtual DbSet<TMaterialEnvio> TMaterialEnvio { get; set; }
        public virtual DbSet<TMaterialEnvioDetalle> TMaterialEnvioDetalle { get; set; }
        public virtual DbSet<TMaterialEstado> TMaterialEstado { get; set; }
        public virtual DbSet<TMaterialEstadoRecepcion> TMaterialEstadoRecepcion { get; set; }
        public virtual DbSet<TMaterialPespecifico> TMaterialPespecifico { get; set; }
        public virtual DbSet<TMaterialPespecificoDetalle> TMaterialPespecificoDetalle { get; set; }
        public virtual DbSet<TMaterialRegistroEntregaAlumno> TMaterialRegistroEntregaAlumno { get; set; }
        public virtual DbSet<TMaterialTipo> TMaterialTipo { get; set; }
        public virtual DbSet<TMaterialTipoEntrega> TMaterialTipoEntrega { get; set; }
        public virtual DbSet<TMaterialVersion> TMaterialVersion { get; set; }
        public virtual DbSet<TMatriculaAlumnoMoodle> TMatriculaAlumnoMoodle { get; set; }
        public virtual DbSet<TMatriculaCabecera> TMatriculaCabecera { get; set; }
        public virtual DbSet<TMatriculaCabeceraBeneficios> TMatriculaCabeceraBeneficios { get; set; }
        public virtual DbSet<TMatriculaCabeceraControlCondicionesComision> TMatriculaCabeceraControlCondicionesComision { get; set; }
        public virtual DbSet<TMatriculaCabeceraDatosCertificado> TMatriculaCabeceraDatosCertificado { get; set; }
        public virtual DbSet<TMatriculaCabeceraDatosCertificadoMensajes> TMatriculaCabeceraDatosCertificadoMensajes { get; set; }
        public virtual DbSet<TMatriculaCabeceraLog> TMatriculaCabeceraLog { get; set; }
        public virtual DbSet<TMatriculaCabeceraLogCoordinadorAcademico> TMatriculaCabeceraLogCoordinadorAcademico { get; set; }
        public virtual DbSet<TMatriculaCabeceraLogFinanzas> TMatriculaCabeceraLogFinanzas { get; set; }
        public virtual DbSet<TMatriculaCabeceraNoRecordatorio> TMatriculaCabeceraNoRecordatorio { get; set; }
        public virtual DbSet<TMatriculaDetalle> TMatriculaDetalle { get; set; }
        public virtual DbSet<TMatriculaMoodleSolicitud> TMatriculaMoodleSolicitud { get; set; }
        public virtual DbSet<TMatriculaMoodleSolicitudEstado> TMatriculaMoodleSolicitudEstado { get; set; }
        public virtual DbSet<TMatrizDimensionNeoPir> TMatrizDimensionNeoPir { get; set; }
        public virtual DbSet<TMatrizEscalaNeoPir> TMatrizEscalaNeoPir { get; set; }
        public virtual DbSet<TMensajePrecargado> TMensajePrecargado { get; set; }
        public virtual DbSet<TMensajeTexto> TMensajeTexto { get; set; }
        public virtual DbSet<TMensajeTiempoInactivo> TMensajeTiempoInactivo { get; set; }
        public virtual DbSet<TMessengerAsesor> TMessengerAsesor { get; set; }
        public virtual DbSet<TMessengerAsesorDetalle> TMessengerAsesorDetalle { get; set; }
        public virtual DbSet<TMessengerChat> TMessengerChat { get; set; }
        public virtual DbSet<TMessengerConfiguracionChat> TMessengerConfiguracionChat { get; set; }
        public virtual DbSet<TMessengerEnvioMasivo> TMessengerEnvioMasivo { get; set; }
        public virtual DbSet<TMessengerHistorialAsesor> TMessengerHistorialAsesor { get; set; }
        public virtual DbSet<TMessengerUsuario> TMessengerUsuario { get; set; }
        public virtual DbSet<TMessengerUsuarioLog> TMessengerUsuarioLog { get; set; }
        public virtual DbSet<TMessengerValue> TMessengerValue { get; set; }
        public virtual DbSet<TMiembroMailchimp> TMiembroMailchimp { get; set; }
        public virtual DbSet<TModalidadContrato> TModalidadContrato { get; set; }
        public virtual DbSet<TModalidadCurso> TModalidadCurso { get; set; }
        public virtual DbSet<TModeloDataMining> TModeloDataMining { get; set; }
        public virtual DbSet<TModeloDataMiningEstadoValor> TModeloDataMiningEstadoValor { get; set; }
        public virtual DbSet<TModeloDwOportunidad> TModeloDwOportunidad { get; set; }
        public virtual DbSet<TModeloDwOportunidadDetalle> TModeloDwOportunidadDetalle { get; set; }
        public virtual DbSet<TModeloGeneral> TModeloGeneral { get; set; }
        public virtual DbSet<TModeloGeneralAformacion> TModeloGeneralAformacion { get; set; }
        public virtual DbSet<TModeloGeneralAtrabajo> TModeloGeneralAtrabajo { get; set; }
        public virtual DbSet<TModeloGeneralCargo> TModeloGeneralCargo { get; set; }
        public virtual DbSet<TModeloGeneralCategoriaDato> TModeloGeneralCategoriaDato { get; set; }
        public virtual DbSet<TModeloGeneralEscala> TModeloGeneralEscala { get; set; }
        public virtual DbSet<TModeloGeneralIndustria> TModeloGeneralIndustria { get; set; }
        public virtual DbSet<TModeloGeneralPgeneral> TModeloGeneralPgeneral { get; set; }
        public virtual DbSet<TModeloGeneralTipoDato> TModeloGeneralTipoDato { get; set; }
        public virtual DbSet<TModeloPredictivo> TModeloPredictivo { get; set; }
        public virtual DbSet<TModeloPredictivoApellido> TModeloPredictivoApellido { get; set; }
        public virtual DbSet<TModeloPredictivoCargo> TModeloPredictivoCargo { get; set; }
        public virtual DbSet<TModeloPredictivoCategoriaDato> TModeloPredictivoCategoriaDato { get; set; }
        public virtual DbSet<TModeloPredictivoCiudad> TModeloPredictivoCiudad { get; set; }
        public virtual DbSet<TModeloPredictivoEscalaProbabilidad> TModeloPredictivoEscalaProbabilidad { get; set; }
        public virtual DbSet<TModeloPredictivoFormacion> TModeloPredictivoFormacion { get; set; }
        public virtual DbSet<TModeloPredictivoIndustria> TModeloPredictivoIndustria { get; set; }
        public virtual DbSet<TModeloPredictivoModalidad> TModeloPredictivoModalidad { get; set; }
        public virtual DbSet<TModeloPredictivoNombre> TModeloPredictivoNombre { get; set; }
        public virtual DbSet<TModeloPredictivoPais> TModeloPredictivoPais { get; set; }
        public virtual DbSet<TModeloPredictivoPartner> TModeloPredictivoPartner { get; set; }
        public virtual DbSet<TModeloPredictivoPrecio> TModeloPredictivoPrecio { get; set; }
        public virtual DbSet<TModeloPredictivoProbabilidad> TModeloPredictivoProbabilidad { get; set; }
        public virtual DbSet<TModeloPredictivoReemplazoPgeneral> TModeloPredictivoReemplazoPgeneral { get; set; }
        public virtual DbSet<TModeloPredictivoSubArea> TModeloPredictivoSubArea { get; set; }
        public virtual DbSet<TModeloPredictivoTelefonoFijo> TModeloPredictivoTelefonoFijo { get; set; }
        public virtual DbSet<TModeloPredictivoTelefonoMovil> TModeloPredictivoTelefonoMovil { get; set; }
        public virtual DbSet<TModeloPredictivoTipo> TModeloPredictivoTipo { get; set; }
        public virtual DbSet<TModeloPredictivoTipoDato> TModeloPredictivoTipoDato { get; set; }
        public virtual DbSet<TModeloPredictivoTrabajo> TModeloPredictivoTrabajo { get; set; }
        public virtual DbSet<TModoPago> TModoPago { get; set; }
        public virtual DbSet<TModuloSistema> TModuloSistema { get; set; }
        public virtual DbSet<TModuloSistemaAcceso> TModuloSistemaAcceso { get; set; }
        public virtual DbSet<TModuloSistemaGrupo> TModuloSistemaGrupo { get; set; }
        public virtual DbSet<TModuloSistemaPuestoTrabajo> TModuloSistemaPuestoTrabajo { get; set; }
        public virtual DbSet<TModuloSistemaSubGrupo> TModuloSistemaSubGrupo { get; set; }
        public virtual DbSet<TMoneda> TMoneda { get; set; }
        public virtual DbSet<TMontoPago> TMontoPago { get; set; }
        public virtual DbSet<TMontoPagoCronograma> TMontoPagoCronograma { get; set; }
        public virtual DbSet<TMontoPagoCronogramaDetalle> TMontoPagoCronogramaDetalle { get; set; }
        public virtual DbSet<TMontoPagoPlataforma> TMontoPagoPlataforma { get; set; }
        public virtual DbSet<TMontoPagoSuscripcion> TMontoPagoSuscripcion { get; set; }
        public virtual DbSet<TMoodleCategoria> TMoodleCategoria { get; set; }
        public virtual DbSet<TMoodleCategoriaTipo> TMoodleCategoriaTipo { get; set; }
        public virtual DbSet<TMoodleCronogramaEvaluacion> TMoodleCronogramaEvaluacion { get; set; }
        public virtual DbSet<TMoodleCurso> TMoodleCurso { get; set; }
        public virtual DbSet<TMotivoCese> TMotivoCese { get; set; }
        public virtual DbSet<TMotivoInactividad> TMotivoInactividad { get; set; }
        public virtual DbSet<TNivelCompetenciaTecnica> TNivelCompetenciaTecnica { get; set; }
        public virtual DbSet<TNivelEstudio> TNivelEstudio { get; set; }
        public virtual DbSet<TNivelIdioma> TNivelIdioma { get; set; }
        public virtual DbSet<TNota> TNota { get; set; }
        public virtual DbSet<TNotaIngresoCaja> TNotaIngresoCaja { get; set; }
        public virtual DbSet<TNuevoAlumnoCongelado> TNuevoAlumnoCongelado { get; set; }
        public virtual DbSet<TObservacionesCursosFinalizadosLog> TObservacionesCursosFinalizadosLog { get; set; }
        public virtual DbSet<TOcurrencia> TOcurrencia { get; set; }
        public virtual DbSet<TOcurrenciaActividad> TOcurrenciaActividad { get; set; }
        public virtual DbSet<TOcurrenciaActividadAlterno> TOcurrenciaActividadAlterno { get; set; }
        public virtual DbSet<TOcurrenciaAlterno> TOcurrenciaAlterno { get; set; }
        public virtual DbSet<TOcurrenciaReporte> TOcurrenciaReporte { get; set; }
        public virtual DbSet<TOcurrenciaReporteAlterno> TOcurrenciaReporteAlterno { get; set; }
        public virtual DbSet<TOcurrenciaValidacionFinalizarActividad> TOcurrenciaValidacionFinalizarActividad { get; set; }
        public virtual DbSet<TOperadorComparacion> TOperadorComparacion { get; set; }
        public virtual DbSet<TOperadorComparacionModuloSistema> TOperadorComparacionModuloSistema { get; set; }
        public virtual DbSet<TOportunidad> TOportunidad { get; set; }
        public virtual DbSet<TOportunidadBeneficio> TOportunidadBeneficio { get; set; }
        public virtual DbSet<TOportunidadClasificacionOperaciones> TOportunidadClasificacionOperaciones { get; set; }
        public virtual DbSet<TOportunidadCompetidor> TOportunidadCompetidor { get; set; }
        public virtual DbSet<TOportunidadIsVerificada> TOportunidadIsVerificada { get; set; }
        public virtual DbSet<TOportunidadLog> TOportunidadLog { get; set; }
        public virtual DbSet<TOportunidadMaximaPorCategoria> TOportunidadMaximaPorCategoria { get; set; }
        public virtual DbSet<TOportunidadPrerequisitoEspecifico> TOportunidadPrerequisitoEspecifico { get; set; }
        public virtual DbSet<TOportunidadPrerequisitoGeneral> TOportunidadPrerequisitoGeneral { get; set; }
        public virtual DbSet<TOportunidadRemarketingAgenda> TOportunidadRemarketingAgenda { get; set; }
        public virtual DbSet<TOportunidadTasaConversionHistorica> TOportunidadTasaConversionHistorica { get; set; }
        public virtual DbSet<TOrigen> TOrigen { get; set; }
        public virtual DbSet<TOrigenIngresoCaja> TOrigenIngresoCaja { get; set; }
        public virtual DbSet<TOrigenPrograma> TOrigenPrograma { get; set; }
        public virtual DbSet<TOtroMovimientoCaja> TOtroMovimientoCaja { get; set; }
        public virtual DbSet<TPageFbValue> TPageFbValue { get; set; }
        public virtual DbSet<TPaginaReclutadoraPersonal> TPaginaReclutadoraPersonal { get; set; }
        public virtual DbSet<TPaginaWebPw> TPaginaWebPw { get; set; }
        public virtual DbSet<TPago> TPago { get; set; }
        public virtual DbSet<TPagoFinal> TPagoFinal { get; set; }
        public virtual DbSet<TPais> TPais { get; set; }
        public virtual DbSet<TPanelControlMeta> TPanelControlMeta { get; set; }
        public virtual DbSet<TPanelIngresoDisponible> TPanelIngresoDisponible { get; set; }
        public virtual DbSet<TParametroEvaluacion> TParametroEvaluacion { get; set; }
        public virtual DbSet<TParametroEvaluacionNota> TParametroEvaluacionNota { get; set; }
        public virtual DbSet<TParametroSeoPw> TParametroSeoPw { get; set; }
        public virtual DbSet<TParentescoPersonal> TParentescoPersonal { get; set; }
        public virtual DbSet<TPartnerBeneficioPw> TPartnerBeneficioPw { get; set; }
        public virtual DbSet<TPartnerContactoPw> TPartnerContactoPw { get; set; }
        public virtual DbSet<TPartnerPw> TPartnerPw { get; set; }
        public virtual DbSet<TPasarelaPagoPw> TPasarelaPagoPw { get; set; }
        public virtual DbSet<TPerfilContactoProgramaColumna> TPerfilContactoProgramaColumna { get; set; }
        public virtual DbSet<TPerfilPuestoTrabajo> TPerfilPuestoTrabajo { get; set; }
        public virtual DbSet<TPerfilPuestoTrabajoEstadoSolicitud> TPerfilPuestoTrabajoEstadoSolicitud { get; set; }
        public virtual DbSet<TPerfilPuestoTrabajoPersonalAprobacion> TPerfilPuestoTrabajoPersonalAprobacion { get; set; }
        public virtual DbSet<TPeriodo> TPeriodo { get; set; }
        public virtual DbSet<TPeriodoMeta> TPeriodoMeta { get; set; }
        public virtual DbSet<TPeriodoReporteIngreso> TPeriodoReporteIngreso { get; set; }
        public virtual DbSet<TPersona> TPersona { get; set; }
        public virtual DbSet<TPersonal> TPersonal { get; set; }
        public virtual DbSet<TPersonalAccesoTemporalAulaVirtual> TPersonalAccesoTemporalAulaVirtual { get; set; }
        public virtual DbSet<TPersonalArchivo> TPersonalArchivo { get; set; }
        public virtual DbSet<TPersonalAreaTrabajo> TPersonalAreaTrabajo { get; set; }
        public virtual DbSet<TPersonalCertificacion> TPersonalCertificacion { get; set; }
        public virtual DbSet<TPersonalCese> TPersonalCese { get; set; }
        public virtual DbSet<TPersonalChatSoporte> TPersonalChatSoporte { get; set; }
        public virtual DbSet<TPersonalComputo> TPersonalComputo { get; set; }
        public virtual DbSet<TPersonalDireccion> TPersonalDireccion { get; set; }
        public virtual DbSet<TPersonalExperiencia> TPersonalExperiencia { get; set; }
        public virtual DbSet<TPersonalExperienciaRequerida> TPersonalExperienciaRequerida { get; set; }
        public virtual DbSet<TPersonalFormacion> TPersonalFormacion { get; set; }
        public virtual DbSet<TPersonalHistorialMedico> TPersonalHistorialMedico { get; set; }
        public virtual DbSet<TPersonalHorario> TPersonalHorario { get; set; }
        public virtual DbSet<TPersonalIdioma> TPersonalIdioma { get; set; }
        public virtual DbSet<TPersonalInformacionMedica> TPersonalInformacionMedica { get; set; }
        public virtual DbSet<TPersonalLog> TPersonalLog { get; set; }
        public virtual DbSet<TPersonalMotivoTiempoInactividad> TPersonalMotivoTiempoInactividad { get; set; }
        public virtual DbSet<TPersonalPuestoSedeHistorico> TPersonalPuestoSedeHistorico { get; set; }
        public virtual DbSet<TPersonalRecurso> TPersonalRecurso { get; set; }
        public virtual DbSet<TPersonalRecursoHabilidad> TPersonalRecursoHabilidad { get; set; }
        public virtual DbSet<TPersonalRelacionExterna> TPersonalRelacionExterna { get; set; }
        public virtual DbSet<TPersonalRemuneracion> TPersonalRemuneracion { get; set; }
        public virtual DbSet<TPersonalSeguroSalud> TPersonalSeguroSalud { get; set; }
        public virtual DbSet<TPersonalSistemaPensionario> TPersonalSistemaPensionario { get; set; }
        public virtual DbSet<TPersonalTipoFuncion> TPersonalTipoFuncion { get; set; }
        public virtual DbSet<TPespecifico> TPespecifico { get; set; }
        public virtual DbSet<TPespecificoAprobacionCalificacion> TPespecificoAprobacionCalificacion { get; set; }
        public virtual DbSet<TPespecificoAsesor> TPespecificoAsesor { get; set; }
        public virtual DbSet<TPespecificoConsumo> TPespecificoConsumo { get; set; }
        public virtual DbSet<TPespecificoExpositorGrupo> TPespecificoExpositorGrupo { get; set; }
        public virtual DbSet<TPespecificoFrecuencia> TPespecificoFrecuencia { get; set; }
        public virtual DbSet<TPespecificoFrecuenciaDetalle> TPespecificoFrecuenciaDetalle { get; set; }
        public virtual DbSet<TPespecificoMatriculaAlumno> TPespecificoMatriculaAlumno { get; set; }
        public virtual DbSet<TPespecificoMeta> TPespecificoMeta { get; set; }
        public virtual DbSet<TPespecificoNuevoAulaVirtual> TPespecificoNuevoAulaVirtual { get; set; }
        public virtual DbSet<TPespecificoPadrePespecificoHijo> TPespecificoPadrePespecificoHijo { get; set; }
        public virtual DbSet<TPespecificoParticipacionDocente> TPespecificoParticipacionDocente { get; set; }
        public virtual DbSet<TPespecificoParticipacionExpositor> TPespecificoParticipacionExpositor { get; set; }
        public virtual DbSet<TPespecificoSesion> TPespecificoSesion { get; set; }
        public virtual DbSet<TPespecificoSilabo> TPespecificoSilabo { get; set; }
        public virtual DbSet<TPespecificoTipoMatricula> TPespecificoTipoMatricula { get; set; }
        public virtual DbSet<TPgeneral> TPgeneral { get; set; }
        public virtual DbSet<TPgeneralAsubPgeneral> TPgeneralAsubPgeneral { get; set; }
        public virtual DbSet<TPgeneralAsubPgeneralVersionPrograma> TPgeneralAsubPgeneralVersionPrograma { get; set; }
        public virtual DbSet<TPgeneralCodigoPartner> TPgeneralCodigoPartner { get; set; }
        public virtual DbSet<TPgeneralCodigoPartnerModalidadCurso> TPgeneralCodigoPartnerModalidadCurso { get; set; }
        public virtual DbSet<TPgeneralCodigoPartnerVersionPrograma> TPgeneralCodigoPartnerVersionPrograma { get; set; }
        public virtual DbSet<TPgeneralConfiguracionPlantilla> TPgeneralConfiguracionPlantilla { get; set; }
        public virtual DbSet<TPgeneralConfiguracionPlantillaDetalle> TPgeneralConfiguracionPlantillaDetalle { get; set; }
        public virtual DbSet<TPgeneralConfiguracionPlantillaEstadoMatricula> TPgeneralConfiguracionPlantillaEstadoMatricula { get; set; }
        public virtual DbSet<TPgeneralConfiguracionPlantillaSubEstadoMatricula> TPgeneralConfiguracionPlantillaSubEstadoMatricula { get; set; }
        public virtual DbSet<TPgeneralCriterioEvaluacion> TPgeneralCriterioEvaluacion { get; set; }
        public virtual DbSet<TPgeneralCriterioEvaluacionHijo> TPgeneralCriterioEvaluacionHijo { get; set; }
        public virtual DbSet<TPgeneralDescripcion> TPgeneralDescripcion { get; set; }
        public virtual DbSet<TPgeneralDocumentoPw> TPgeneralDocumentoPw { get; set; }
        public virtual DbSet<TPgeneralExpositor> TPgeneralExpositor { get; set; }
        public virtual DbSet<TPgeneralForoAsignacionProveedor> TPgeneralForoAsignacionProveedor { get; set; }
        public virtual DbSet<TPgeneralModalidad> TPgeneralModalidad { get; set; }
        public virtual DbSet<TPgeneralParametroSeoPw> TPgeneralParametroSeoPw { get; set; }
        public virtual DbSet<TPgeneralProyectoAplicacion> TPgeneralProyectoAplicacion { get; set; }
        public virtual DbSet<TPgeneralProyectoAplicacionAnexo> TPgeneralProyectoAplicacionAnexo { get; set; }
        public virtual DbSet<TPgeneralProyectoAplicacionEnvio> TPgeneralProyectoAplicacionEnvio { get; set; }
        public virtual DbSet<TPgeneralProyectoAplicacionEstado> TPgeneralProyectoAplicacionEstado { get; set; }
        public virtual DbSet<TPgeneralProyectoAplicacionModalidad> TPgeneralProyectoAplicacionModalidad { get; set; }
        public virtual DbSet<TPgeneralProyectoAplicacionProveedor> TPgeneralProyectoAplicacionProveedor { get; set; }
        public virtual DbSet<TPgeneralRelacionado> TPgeneralRelacionado { get; set; }
        public virtual DbSet<TPgeneralTagsPw> TPgeneralTagsPw { get; set; }
        public virtual DbSet<TPgeneralTipoDescuento> TPgeneralTipoDescuento { get; set; }
        public virtual DbSet<TPgeneralVersionPrograma> TPgeneralVersionPrograma { get; set; }
        public virtual DbSet<TPlanContable> TPlanContable { get; set; }
        public virtual DbSet<TPlanContableTipoCuenta> TPlanContableTipoCuenta { get; set; }
        public virtual DbSet<TPlantilla> TPlantilla { get; set; }
        public virtual DbSet<TPlantillaAsociacionModuloSistema> TPlantillaAsociacionModuloSistema { get; set; }
        public virtual DbSet<TPlantillaBase> TPlantillaBase { get; set; }
        public virtual DbSet<TPlantillaClaveValor> TPlantillaClaveValor { get; set; }
        public virtual DbSet<TPlantillaLandingPage> TPlantillaLandingPage { get; set; }
        public virtual DbSet<TPlantillaLandingPagePgeneralAdicional> TPlantillaLandingPagePgeneralAdicional { get; set; }
        public virtual DbSet<TPlantillaMaestroPw> TPlantillaMaestroPw { get; set; }
        public virtual DbSet<TPlantillaPais> TPlantillaPais { get; set; }
        public virtual DbSet<TPlantillaPlantillaMaestroPw> TPlantillaPlantillaMaestroPw { get; set; }
        public virtual DbSet<TPlantillaPw> TPlantillaPw { get; set; }
        public virtual DbSet<TPlantillaRevisionPw> TPlantillaRevisionPw { get; set; }
        public virtual DbSet<TPlataformaPago> TPlataformaPago { get; set; }
        public virtual DbSet<TPortalEmpleo> TPortalEmpleo { get; set; }
        public virtual DbSet<TPortalEmpleoPais> TPortalEmpleoPais { get; set; }
        public virtual DbSet<TPostComentarioDetalle> TPostComentarioDetalle { get; set; }
        public virtual DbSet<TPostComentarioUsuario> TPostComentarioUsuario { get; set; }
        public virtual DbSet<TPostComentarioUsuarioLog> TPostComentarioUsuarioLog { get; set; }
        public virtual DbSet<TPostulante> TPostulante { get; set; }
        public virtual DbSet<TPostulanteAccesoTemporalAulaVirtual> TPostulanteAccesoTemporalAulaVirtual { get; set; }
        public virtual DbSet<TPostulanteComparacion> TPostulanteComparacion { get; set; }
        public virtual DbSet<TPostulanteConexionInternet> TPostulanteConexionInternet { get; set; }
        public virtual DbSet<TPostulanteCriterioDesaprobatorio> TPostulanteCriterioDesaprobatorio { get; set; }
        public virtual DbSet<TPostulanteCursoPortalNotasHistorico> TPostulanteCursoPortalNotasHistorico { get; set; }
        public virtual DbSet<TPostulanteEquipoComputo> TPostulanteEquipoComputo { get; set; }
        public virtual DbSet<TPostulanteExperiencia> TPostulanteExperiencia { get; set; }
        public virtual DbSet<TPostulanteExperienciaLog> TPostulanteExperienciaLog { get; set; }
        public virtual DbSet<TPostulanteFactorDesaprobatorio> TPostulanteFactorDesaprobatorio { get; set; }
        public virtual DbSet<TPostulanteFormacion> TPostulanteFormacion { get; set; }
        public virtual DbSet<TPostulanteFormacionLog> TPostulanteFormacionLog { get; set; }
        public virtual DbSet<TPostulanteIdioma> TPostulanteIdioma { get; set; }
        public virtual DbSet<TPostulanteInformacionImportacion> TPostulanteInformacionImportacion { get; set; }
        public virtual DbSet<TPostulanteInformacionImportacionLog> TPostulanteInformacionImportacionLog { get; set; }
        public virtual DbSet<TPostulanteLog> TPostulanteLog { get; set; }
        public virtual DbSet<TPostulanteNivelPotencial> TPostulanteNivelPotencial { get; set; }
        public virtual DbSet<TPostulanteProcesoSeleccion> TPostulanteProcesoSeleccion { get; set; }
        public virtual DbSet<TPreCalculadaCambioFase> TPreCalculadaCambioFase { get; set; }
        public virtual DbSet<TPregunta> TPregunta { get; set; }
        public virtual DbSet<TPreguntaCategoria> TPreguntaCategoria { get; set; }
        public virtual DbSet<TPreguntaEscalaValor> TPreguntaEscalaValor { get; set; }
        public virtual DbSet<TPreguntaEvaluacion> TPreguntaEvaluacion { get; set; }
        public virtual DbSet<TPreguntaEvaluacionTrabajo> TPreguntaEvaluacionTrabajo { get; set; }
        public virtual DbSet<TPreguntaFrecuente> TPreguntaFrecuente { get; set; }
        public virtual DbSet<TPreguntaFrecuenteArea> TPreguntaFrecuenteArea { get; set; }
        public virtual DbSet<TPreguntaFrecuentePgeneral> TPreguntaFrecuentePgeneral { get; set; }
        public virtual DbSet<TPreguntaFrecuenteSubArea> TPreguntaFrecuenteSubArea { get; set; }
        public virtual DbSet<TPreguntaFrecuenteTipo> TPreguntaFrecuenteTipo { get; set; }
        public virtual DbSet<TPreguntaIntento> TPreguntaIntento { get; set; }
        public virtual DbSet<TPreguntaIntentoDetalle> TPreguntaIntentoDetalle { get; set; }
        public virtual DbSet<TPreguntaProgramaCapacitacion> TPreguntaProgramaCapacitacion { get; set; }
        public virtual DbSet<TPreguntaTipo> TPreguntaTipo { get; set; }
        public virtual DbSet<TPremioRankingAsesor> TPremioRankingAsesor { get; set; }
        public virtual DbSet<TPrestacionRegistro> TPrestacionRegistro { get; set; }
        public virtual DbSet<TPrestacionTipo> TPrestacionTipo { get; set; }
        public virtual DbSet<TPrioridadMailChimpLista> TPrioridadMailChimpLista { get; set; }
        public virtual DbSet<TPrioridadMailChimpListaCorreo> TPrioridadMailChimpListaCorreo { get; set; }
        public virtual DbSet<TPrioridadMailChimpListaInteraccion> TPrioridadMailChimpListaInteraccion { get; set; }
        public virtual DbSet<TProbabilidadAlumnoPrograma> TProbabilidadAlumnoPrograma { get; set; }
        public virtual DbSet<TProbabilidadByContactoPrograma> TProbabilidadByContactoPrograma { get; set; }
        public virtual DbSet<TProbabilidadRegistroPw> TProbabilidadRegistroPw { get; set; }
        public virtual DbSet<TProbabilidadRegistroPwVentaCruzadaProbabilidad> TProbabilidadRegistroPwVentaCruzadaProbabilidad { get; set; }
        public virtual DbSet<TProblema> TProblema { get; set; }
        public virtual DbSet<TProblemaCliente> TProblemaCliente { get; set; }
        public virtual DbSet<TProblemaHorario> TProblemaHorario { get; set; }
        public virtual DbSet<TProcedenciaFormulario> TProcedenciaFormulario { get; set; }
        public virtual DbSet<TProcedenciaFormularioDetalle> TProcedenciaFormularioDetalle { get; set; }
        public virtual DbSet<TProcedenciaVentaCruzada> TProcedenciaVentaCruzada { get; set; }
        public virtual DbSet<TProcesoSeleccion> TProcesoSeleccion { get; set; }
        public virtual DbSet<TProcesoSeleccionEtapa> TProcesoSeleccionEtapa { get; set; }
        public virtual DbSet<TProcesoSeleccionPuntajeCalificacion> TProcesoSeleccionPuntajeCalificacion { get; set; }
        public virtual DbSet<TProcesoSeleccionRango> TProcesoSeleccionRango { get; set; }
        public virtual DbSet<TProducto> TProducto { get; set; }
        public virtual DbSet<TProductoPresentacion> TProductoPresentacion { get; set; }
        public virtual DbSet<TProgramaAreaRelacionada> TProgramaAreaRelacionada { get; set; }
        public virtual DbSet<TProgramaCapacitacion> TProgramaCapacitacion { get; set; }
        public virtual DbSet<TProgramaCapacitacionPorPgeneral> TProgramaCapacitacionPorPgeneral { get; set; }
        public virtual DbSet<TProgramaGeneralBeneficio> TProgramaGeneralBeneficio { get; set; }
        public virtual DbSet<TProgramaGeneralBeneficioArgumento> TProgramaGeneralBeneficioArgumento { get; set; }
        public virtual DbSet<TProgramaGeneralBeneficioModalidad> TProgramaGeneralBeneficioModalidad { get; set; }
        public virtual DbSet<TProgramaGeneralBeneficioRespuesta> TProgramaGeneralBeneficioRespuesta { get; set; }
        public virtual DbSet<TProgramaGeneralCertificacion> TProgramaGeneralCertificacion { get; set; }
        public virtual DbSet<TProgramaGeneralCertificacionArgumento> TProgramaGeneralCertificacionArgumento { get; set; }
        public virtual DbSet<TProgramaGeneralCertificacionModalidad> TProgramaGeneralCertificacionModalidad { get; set; }
        public virtual DbSet<TProgramaGeneralCertificacionRespuesta> TProgramaGeneralCertificacionRespuesta { get; set; }
        public virtual DbSet<TProgramaGeneralMaterialEstudioAdicional> TProgramaGeneralMaterialEstudioAdicional { get; set; }
        public virtual DbSet<TProgramaGeneralMaterialEstudioAdicionalEspecificos> TProgramaGeneralMaterialEstudioAdicionalEspecificos { get; set; }
        public virtual DbSet<TProgramaGeneralMotivacion> TProgramaGeneralMotivacion { get; set; }
        public virtual DbSet<TProgramaGeneralMotivacionArgumento> TProgramaGeneralMotivacionArgumento { get; set; }
        public virtual DbSet<TProgramaGeneralMotivacionModalidad> TProgramaGeneralMotivacionModalidad { get; set; }
        public virtual DbSet<TProgramaGeneralMotivacionRespuesta> TProgramaGeneralMotivacionRespuesta { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilAformacionCoeficiente> TProgramaGeneralPerfilAformacionCoeficiente { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilAtrabajoCoeficiente> TProgramaGeneralPerfilAtrabajoCoeficiente { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilCargoCoeficiente> TProgramaGeneralPerfilCargoCoeficiente { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilCategoriaCoeficiente> TProgramaGeneralPerfilCategoriaCoeficiente { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilCiudadCoeficiente> TProgramaGeneralPerfilCiudadCoeficiente { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilEscalaProbabilidad> TProgramaGeneralPerfilEscalaProbabilidad { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilIndustriaCoeficiente> TProgramaGeneralPerfilIndustriaCoeficiente { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilIntercepto> TProgramaGeneralPerfilIntercepto { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilModalidadCoeficiente> TProgramaGeneralPerfilModalidadCoeficiente { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilScoringAformacion> TProgramaGeneralPerfilScoringAformacion { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilScoringAtrabajo> TProgramaGeneralPerfilScoringAtrabajo { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilScoringCargo> TProgramaGeneralPerfilScoringCargo { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilScoringCategoria> TProgramaGeneralPerfilScoringCategoria { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilScoringCiudad> TProgramaGeneralPerfilScoringCiudad { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilScoringIndustria> TProgramaGeneralPerfilScoringIndustria { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilScoringModalidad> TProgramaGeneralPerfilScoringModalidad { get; set; }
        public virtual DbSet<TProgramaGeneralPerfilTipoDato> TProgramaGeneralPerfilTipoDato { get; set; }
        public virtual DbSet<TProgramaGeneralPrerequisito> TProgramaGeneralPrerequisito { get; set; }
        public virtual DbSet<TProgramaGeneralPrerequisitoModalidad> TProgramaGeneralPrerequisitoModalidad { get; set; }
        public virtual DbSet<TProgramaGeneralPrerequisitoRespuesta> TProgramaGeneralPrerequisitoRespuesta { get; set; }
        public virtual DbSet<TProgramaGeneralProblema> TProgramaGeneralProblema { get; set; }
        public virtual DbSet<TProgramaGeneralProblemaDetalleSolucion> TProgramaGeneralProblemaDetalleSolucion { get; set; }
        public virtual DbSet<TProgramaGeneralProblemaDetalleSolucionRespuesta> TProgramaGeneralProblemaDetalleSolucionRespuesta { get; set; }
        public virtual DbSet<TProgramaGeneralProblemaModalidad> TProgramaGeneralProblemaModalidad { get; set; }
        public virtual DbSet<TProgramaGeneralPuntoCorte> TProgramaGeneralPuntoCorte { get; set; }
        public virtual DbSet<TProgramaGeneralPuntoCorteConfiguracion> TProgramaGeneralPuntoCorteConfiguracion { get; set; }
        public virtual DbSet<TProgramaGeneralPuntoCorteDetalle> TProgramaGeneralPuntoCorteDetalle { get; set; }
        public virtual DbSet<TProgramaPlantilla> TProgramaPlantilla { get; set; }
        public virtual DbSet<TProveedor> TProveedor { get; set; }
        public virtual DbSet<TProveedorCalificacion> TProveedorCalificacion { get; set; }
        public virtual DbSet<TProveedorCampaniaIntegra> TProveedorCampaniaIntegra { get; set; }
        public virtual DbSet<TProveedorCriterioCalificacion> TProveedorCriterioCalificacion { get; set; }
        public virtual DbSet<TProveedorCuentaBanco> TProveedorCuentaBanco { get; set; }
        public virtual DbSet<TProveedorLog> TProveedorLog { get; set; }
        public virtual DbSet<TProveedorNube> TProveedorNube { get; set; }
        public virtual DbSet<TProveedorSubCriterioCalificacion> TProveedorSubCriterioCalificacion { get; set; }
        public virtual DbSet<TProveedorTipoServicio> TProveedorTipoServicio { get; set; }
        public virtual DbSet<TProyectoAplicacionDocumentoSeccionPw> TProyectoAplicacionDocumentoSeccionPw { get; set; }
        public virtual DbSet<TProyectoAplicacionEntregaVersionPw> TProyectoAplicacionEntregaVersionPw { get; set; }
        public virtual DbSet<TPublicidadWeb> TPublicidadWeb { get; set; }
        public virtual DbSet<TPublicidadWebFormulario> TPublicidadWebFormulario { get; set; }
        public virtual DbSet<TPublicidadWebFormularioCampo> TPublicidadWebFormularioCampo { get; set; }
        public virtual DbSet<TPublicidadWebPrograma> TPublicidadWebPrograma { get; set; }
        public virtual DbSet<TPublicoObjetivoRespuesta> TPublicoObjetivoRespuesta { get; set; }
        public virtual DbSet<TPuestoTrabajo> TPuestoTrabajo { get; set; }
        public virtual DbSet<TPuestoTrabajoCaracteristicaPersonal> TPuestoTrabajoCaracteristicaPersonal { get; set; }
        public virtual DbSet<TPuestoTrabajoCursoComplementario> TPuestoTrabajoCursoComplementario { get; set; }
        public virtual DbSet<TPuestoTrabajoDependencia> TPuestoTrabajoDependencia { get; set; }
        public virtual DbSet<TPuestoTrabajoExperiencia> TPuestoTrabajoExperiencia { get; set; }
        public virtual DbSet<TPuestoTrabajoFormacionAcademica> TPuestoTrabajoFormacionAcademica { get; set; }
        public virtual DbSet<TPuestoTrabajoFuncion> TPuestoTrabajoFuncion { get; set; }
        public virtual DbSet<TPuestoTrabajoGrupoComparacion> TPuestoTrabajoGrupoComparacion { get; set; }
        public virtual DbSet<TPuestoTrabajoIdioma> TPuestoTrabajoIdioma { get; set; }
        public virtual DbSet<TPuestoTrabajoLineaCarrera> TPuestoTrabajoLineaCarrera { get; set; }
        public virtual DbSet<TPuestoTrabajoNivel> TPuestoTrabajoNivel { get; set; }
        public virtual DbSet<TPuestoTrabajoObjetivo> TPuestoTrabajoObjetivo { get; set; }
        public virtual DbSet<TPuestoTrabajoPremio> TPuestoTrabajoPremio { get; set; }
        public virtual DbSet<TPuestoTrabajoPuestoAcargo> TPuestoTrabajoPuestoAcargo { get; set; }
        public virtual DbSet<TPuestoTrabajoPuntajeCalificacion> TPuestoTrabajoPuntajeCalificacion { get; set; }
        public virtual DbSet<TPuestoTrabajoRelacion> TPuestoTrabajoRelacion { get; set; }
        public virtual DbSet<TPuestoTrabajoRelacionDetalle> TPuestoTrabajoRelacionDetalle { get; set; }
        public virtual DbSet<TPuestoTrabajoRelacionExterna> TPuestoTrabajoRelacionExterna { get; set; }
        public virtual DbSet<TPuestoTrabajoRelacionInterna> TPuestoTrabajoRelacionInterna { get; set; }
        public virtual DbSet<TPuestoTrabajoRemuneracion> TPuestoTrabajoRemuneracion { get; set; }
        public virtual DbSet<TPuestoTrabajoRemuneracionDetalle> TPuestoTrabajoRemuneracionDetalle { get; set; }
        public virtual DbSet<TPuestoTrabajoReporte> TPuestoTrabajoReporte { get; set; }
        public virtual DbSet<TPuntoCorte> TPuntoCorte { get; set; }
        public virtual DbSet<TRaAerolinea> TRaAerolinea { get; set; }
        public virtual DbSet<TRaAlumno> TRaAlumno { get; set; }
        public virtual DbSet<TRaAlumnoCurso> TRaAlumnoCurso { get; set; }
        public virtual DbSet<TRaCentroCosto> TRaCentroCosto { get; set; }
        public virtual DbSet<TRaCentroCostoEstado> TRaCentroCostoEstado { get; set; }
        public virtual DbSet<TRaCertificadoBrochure> TRaCertificadoBrochure { get; set; }
        public virtual DbSet<TRaCertificadoPartnerComplemento> TRaCertificadoPartnerComplemento { get; set; }
        public virtual DbSet<TRaConstanciaAlumno> TRaConstanciaAlumno { get; set; }
        public virtual DbSet<TRaCoordinadorAccesoMoodleCorteMensual> TRaCoordinadorAccesoMoodleCorteMensual { get; set; }
        public virtual DbSet<TRaCoordinadorDocumentacionAlumno> TRaCoordinadorDocumentacionAlumno { get; set; }
        public virtual DbSet<TRaCurso> TRaCurso { get; set; }
        public virtual DbSet<TRaCursoMaterial> TRaCursoMaterial { get; set; }
        public virtual DbSet<TRaCursoObservacion> TRaCursoObservacion { get; set; }
        public virtual DbSet<TRaCursoTrabajoAlumno> TRaCursoTrabajoAlumno { get; set; }
        public virtual DbSet<TRaCursoTrabajoAlumnoTipo> TRaCursoTrabajoAlumnoTipo { get; set; }
        public virtual DbSet<TRaEstadoConstanciaAlumno> TRaEstadoConstanciaAlumno { get; set; }
        public virtual DbSet<TRaEvaluacion> TRaEvaluacion { get; set; }
        public virtual DbSet<TRaEvaluacionEscala> TRaEvaluacionEscala { get; set; }
        public virtual DbSet<TRaEvaluacionTipo> TRaEvaluacionTipo { get; set; }
        public virtual DbSet<TRaFrecuencia> TRaFrecuencia { get; set; }
        public virtual DbSet<TRaHistorialCambioAlumno> TRaHistorialCambioAlumno { get; set; }
        public virtual DbSet<TRaHistorialCambioAlumnoTipo> TRaHistorialCambioAlumnoTipo { get; set; }
        public virtual DbSet<TRaHotel> TRaHotel { get; set; }
        public virtual DbSet<TRaJerarquia> TRaJerarquia { get; set; }
        public virtual DbSet<TRaMovilidad> TRaMovilidad { get; set; }
        public virtual DbSet<TRaPresencialBoletoAereo> TRaPresencialBoletoAereo { get; set; }
        public virtual DbSet<TRaPresencialBoletoAereoDetalle> TRaPresencialBoletoAereoDetalle { get; set; }
        public virtual DbSet<TRaPresencialBoletoAereoReserva> TRaPresencialBoletoAereoReserva { get; set; }
        public virtual DbSet<TRaPresencialComprobantePago> TRaPresencialComprobantePago { get; set; }
        public virtual DbSet<TRaRemitente> TRaRemitente { get; set; }
        public virtual DbSet<TRaSede> TRaSede { get; set; }
        public virtual DbSet<TRaSesion> TRaSesion { get; set; }
        public virtual DbSet<TRaSesionBitacora> TRaSesionBitacora { get; set; }
        public virtual DbSet<TRaSesionTipo> TRaSesionTipo { get; set; }
        public virtual DbSet<TRaSkypeReunion> TRaSkypeReunion { get; set; }
        public virtual DbSet<TRaTipoBoletoAereo> TRaTipoBoletoAereo { get; set; }
        public virtual DbSet<TRaTipoConstanciaAlumno> TRaTipoConstanciaAlumno { get; set; }
        public virtual DbSet<TRaTipoContrato> TRaTipoContrato { get; set; }
        public virtual DbSet<TRaTipoCurso> TRaTipoCurso { get; set; }
        public virtual DbSet<TRaTipoCursoMaterial> TRaTipoCursoMaterial { get; set; }
        public virtual DbSet<TRaTipoMovilidad> TRaTipoMovilidad { get; set; }
        public virtual DbSet<TRankingIngreso> TRankingIngreso { get; set; }
        public virtual DbSet<TReclamo> TReclamo { get; set; }
        public virtual DbSet<TReclamoEstado> TReclamoEstado { get; set; }
        public virtual DbSet<TRecordAreaComercial> TRecordAreaComercial { get; set; }
        public virtual DbSet<TRecuperacionAutomaticoModuloSistema> TRecuperacionAutomaticoModuloSistema { get; set; }
        public virtual DbSet<TRecuperacionAutomaticoModuloSistemaResponsable> TRecuperacionAutomaticoModuloSistemaResponsable { get; set; }
        public virtual DbSet<TRecuperacionSesion> TRecuperacionSesion { get; set; }
        public virtual DbSet<TReferidoConfiguracion> TReferidoConfiguracion { get; set; }
        public virtual DbSet<TRegionCiudad> TRegionCiudad { get; set; }
        public virtual DbSet<TRegistroArchivoStorage> TRegistroArchivoStorage { get; set; }
        public virtual DbSet<TRegistroCertificadoFisicoGenerado> TRegistroCertificadoFisicoGenerado { get; set; }
        public virtual DbSet<TRegistroLlamada> TRegistroLlamada { get; set; }
        public virtual DbSet<TRegistroLlamadaError> TRegistroLlamadaError { get; set; }
        public virtual DbSet<TRegistroMarcadorFecha> TRegistroMarcadorFecha { get; set; }
        public virtual DbSet<TRegistroRecuperacionWhatsApp> TRegistroRecuperacionWhatsApp { get; set; }
        public virtual DbSet<TRegistroVideoProveedor> TRegistroVideoProveedor { get; set; }
        public virtual DbSet<TRemitenteMailing> TRemitenteMailing { get; set; }
        public virtual DbSet<TRemitenteMailingAsesor> TRemitenteMailingAsesor { get; set; }
        public virtual DbSet<TReporteAnalyticsFiltro> TReporteAnalyticsFiltro { get; set; }
        public virtual DbSet<TReporteAnalyticsFiltroDetalle> TReporteAnalyticsFiltroDetalle { get; set; }
        public virtual DbSet<TReporteCalidadProcesamiento> TReporteCalidadProcesamiento { get; set; }
        public virtual DbSet<TReporteCambiosCongelado> TReporteCambiosCongelado { get; set; }
        public virtual DbSet<TReporteDevolucionCongelado> TReporteDevolucionCongelado { get; set; }
        public virtual DbSet<TReporteFlujoCongeladoPorDia> TReporteFlujoCongeladoPorDia { get; set; }
        public virtual DbSet<TReporteFlujoCongeladoPorPeriodo> TReporteFlujoCongeladoPorPeriodo { get; set; }
        public virtual DbSet<TReporteNota> TReporteNota { get; set; }
        public virtual DbSet<TReportePagoCongeladoPorDia> TReportePagoCongeladoPorDia { get; set; }
        public virtual DbSet<TReportePagoCongeladoPorPeriodo> TReportePagoCongeladoPorPeriodo { get; set; }
        public virtual DbSet<TReportePendienteHistorico> TReportePendienteHistorico { get; set; }
        public virtual DbSet<TReprogramacionCabecera> TReprogramacionCabecera { get; set; }
        public virtual DbSet<TReprogramacionCabeceraPersonal> TReprogramacionCabeceraPersonal { get; set; }
        public virtual DbSet<TRespuestaPregunta> TRespuestaPregunta { get; set; }
        public virtual DbSet<TRespuestaPreguntaEvaluacion> TRespuestaPreguntaEvaluacion { get; set; }
        public virtual DbSet<TRespuestaPreguntaProgramaCapacitacion> TRespuestaPreguntaProgramaCapacitacion { get; set; }
        public virtual DbSet<TRetencion> TRetencion { get; set; }
        public virtual DbSet<TRevisionNivelPw> TRevisionNivelPw { get; set; }
        public virtual DbSet<TRevisionPw> TRevisionPw { get; set; }
        public virtual DbSet<TRolUsuarioTicket> TRolUsuarioTicket { get; set; }
        public virtual DbSet<TScrapingAerolineaConfiguracion> TScrapingAerolineaConfiguracion { get; set; }
        public virtual DbSet<TScrapingAerolineaEstadoConsulta> TScrapingAerolineaEstadoConsulta { get; set; }
        public virtual DbSet<TScrapingAerolineaResultado> TScrapingAerolineaResultado { get; set; }
        public virtual DbSet<TScrapingAerolineaResultadoDetalle> TScrapingAerolineaResultadoDetalle { get; set; }
        public virtual DbSet<TScrapingEmpleoClasificacionCertificacion> TScrapingEmpleoClasificacionCertificacion { get; set; }
        public virtual DbSet<TScrapingEmpleoClasificacionEstudio> TScrapingEmpleoClasificacionEstudio { get; set; }
        public virtual DbSet<TScrapingEmpleoClasificacionExperiencia> TScrapingEmpleoClasificacionExperiencia { get; set; }
        public virtual DbSet<TScrapingEmpleoPatronClasificacion> TScrapingEmpleoPatronClasificacion { get; set; }
        public virtual DbSet<TScrapingEmpleoResultadoClasificacion> TScrapingEmpleoResultadoClasificacion { get; set; }
        public virtual DbSet<TScrapingPagina> TScrapingPagina { get; set; }
        public virtual DbSet<TScrapingPortalEmpleoResultado> TScrapingPortalEmpleoResultado { get; set; }
        public virtual DbSet<TSeccionFormularioAb> TSeccionFormularioAb { get; set; }
        public virtual DbSet<TSeccionMaestraPw> TSeccionMaestraPw { get; set; }
        public virtual DbSet<TSeccionPreguntaFrecuente> TSeccionPreguntaFrecuente { get; set; }
        public virtual DbSet<TSeccionPw> TSeccionPw { get; set; }
        public virtual DbSet<TSeccionTipoContenidoPw> TSeccionTipoContenidoPw { get; set; }
        public virtual DbSet<TSeccionTipoDetallePw> TSeccionTipoDetallePw { get; set; }
        public virtual DbSet<TSede> TSede { get; set; }
        public virtual DbSet<TSedeTrabajo> TSedeTrabajo { get; set; }
        public virtual DbSet<TSedeTrabajoGrupoComparacion> TSedeTrabajoGrupoComparacion { get; set; }
        public virtual DbSet<TSeguimientoAlumnoCategoria> TSeguimientoAlumnoCategoria { get; set; }
        public virtual DbSet<TSeguimientoAlumnoComentario> TSeguimientoAlumnoComentario { get; set; }
        public virtual DbSet<TSeguimientoPreProcesoListaWhatsApp> TSeguimientoPreProcesoListaWhatsApp { get; set; }
        public virtual DbSet<TSemaforoFinanciero> TSemaforoFinanciero { get; set; }
        public virtual DbSet<TSemaforoFinancieroDetalle> TSemaforoFinancieroDetalle { get; set; }
        public virtual DbSet<TSemaforoFinancieroDetalleVariable> TSemaforoFinancieroDetalleVariable { get; set; }
        public virtual DbSet<TSemaforoFinancieroVariable> TSemaforoFinancieroVariable { get; set; }
        public virtual DbSet<TSensoresPersonal> TSensoresPersonal { get; set; }
        public virtual DbSet<TSentinel> TSentinel { get; set; }
        public virtual DbSet<TSentinelRepLegItem> TSentinelRepLegItem { get; set; }
        public virtual DbSet<TSentinelSdtEstandarItem> TSentinelSdtEstandarItem { get; set; }
        public virtual DbSet<TSentinelSdtInfGen> TSentinelSdtInfGen { get; set; }
        public virtual DbSet<TSentinelSdtLincreItem> TSentinelSdtLincreItem { get; set; }
        public virtual DbSet<TSentinelSdtPoshisItem> TSentinelSdtPoshisItem { get; set; }
        public virtual DbSet<TSentinelSdtRepSbsitem> TSentinelSdtRepSbsitem { get; set; }
        public virtual DbSet<TSentinelSdtResVenItem> TSentinelSdtResVenItem { get; set; }
        public virtual DbSet<TSentinelSueldoIndividual> TSentinelSueldoIndividual { get; set; }
        public virtual DbSet<TSentinelSueldoPorIndustria> TSentinelSueldoPorIndustria { get; set; }
        public virtual DbSet<TSentinelSueldoPorIndustriaDataDinamico> TSentinelSueldoPorIndustriaDataDinamico { get; set; }
        public virtual DbSet<TSentinelSueldoPorIndustriaDataTotal> TSentinelSueldoPorIndustriaDataTotal { get; set; }
        public virtual DbSet<TSesionConfigurarVideo> TSesionConfigurarVideo { get; set; }
        public virtual DbSet<TSesionGuardado> TSesionGuardado { get; set; }
        public virtual DbSet<TSexo> TSexo { get; set; }
        public virtual DbSet<TSilaboSeccion> TSilaboSeccion { get; set; }
        public virtual DbSet<TSistemaPensionario> TSistemaPensionario { get; set; }
        public virtual DbSet<TSmsConfiguracionEnvio> TSmsConfiguracionEnvio { get; set; }
        public virtual DbSet<TSmsConfiguracionEnvioDetalle> TSmsConfiguracionEnvioDetalle { get; set; }
        public virtual DbSet<TSmsConfiguracionLogEjecucion> TSmsConfiguracionLogEjecucion { get; set; }
        public virtual DbSet<TSmsDesuscrito> TSmsDesuscrito { get; set; }
        public virtual DbSet<TSmsMensajeEnviado> TSmsMensajeEnviado { get; set; }
        public virtual DbSet<TSmsMensajeRecibido> TSmsMensajeRecibido { get; set; }
        public virtual DbSet<TSolicitudCertificadoFisico> TSolicitudCertificadoFisico { get; set; }
        public virtual DbSet<TSolicitudOperaciones> TSolicitudOperaciones { get; set; }
        public virtual DbSet<TSolicitudOperacionesAccesoTemporalDetalle> TSolicitudOperacionesAccesoTemporalDetalle { get; set; }
        public virtual DbSet<TSolucion> TSolucion { get; set; }
        public virtual DbSet<TSolucionCliente> TSolucionCliente { get; set; }
        public virtual DbSet<TSolucionClienteByActividad> TSolucionClienteByActividad { get; set; }
        public virtual DbSet<TSubArea> TSubArea { get; set; }
        public virtual DbSet<TSubAreaCampaniaMailingDetalle> TSubAreaCampaniaMailingDetalle { get; set; }
        public virtual DbSet<TSubAreaCampoEtiqueta> TSubAreaCampoEtiqueta { get; set; }
        public virtual DbSet<TSubAreaCapacitacion> TSubAreaCapacitacion { get; set; }
        public virtual DbSet<TSubAreaParametroSeoPw> TSubAreaParametroSeoPw { get; set; }
        public virtual DbSet<TSubCategoriaDato> TSubCategoriaDato { get; set; }
        public virtual DbSet<TSubCategoriaInteraccion> TSubCategoriaInteraccion { get; set; }
        public virtual DbSet<TSubEstadoMatriculaEstandar> TSubEstadoMatriculaEstandar { get; set; }
        public virtual DbSet<TSubNivelCc> TSubNivelCc { get; set; }
        public virtual DbSet<TSubTipoMovimientoCaja> TSubTipoMovimientoCaja { get; set; }
        public virtual DbSet<TSunatDocumento> TSunatDocumento { get; set; }
        public virtual DbSet<TSuscripcionProgramaGeneral> TSuscripcionProgramaGeneral { get; set; }
        public virtual DbSet<TTableroComercialCategoriaAsesor> TTableroComercialCategoriaAsesor { get; set; }
        public virtual DbSet<TTableroComercialMejorMes> TTableroComercialMejorMes { get; set; }
        public virtual DbSet<TTableroComercialUnidad> TTableroComercialUnidad { get; set; }
        public virtual DbSet<TTagParametroSeoPw> TTagParametroSeoPw { get; set; }
        public virtual DbSet<TTagPw> TTagPw { get; set; }
        public virtual DbSet<TTamanioEmpresa> TTamanioEmpresa { get; set; }
        public virtual DbSet<TTarifario> TTarifario { get; set; }
        public virtual DbSet<TTarifarioDetalleAlterno> TTarifarioDetalleAlterno { get; set; }
        public virtual DbSet<TTasaConversionHistorica> TTasaConversionHistorica { get; set; }
        public virtual DbSet<TTasaConversionHistoricaAformacion> TTasaConversionHistoricaAformacion { get; set; }
        public virtual DbSet<TTasaConversionHistoricaAtrabajo> TTasaConversionHistoricaAtrabajo { get; set; }
        public virtual DbSet<TTasaConversionHistoricaBeta> TTasaConversionHistoricaBeta { get; set; }
        public virtual DbSet<TTasaConversionHistoricaCargo> TTasaConversionHistoricaCargo { get; set; }
        public virtual DbSet<TTasaConversionHistoricaCategoriaOrigen> TTasaConversionHistoricaCategoriaOrigen { get; set; }
        public virtual DbSet<TTasaConversionHistoricaIndustria> TTasaConversionHistoricaIndustria { get; set; }
        public virtual DbSet<TTasaConversionHistoricaPais> TTasaConversionHistoricaPais { get; set; }
        public virtual DbSet<TTerminoUsoSitioWebPw> TTerminoUsoSitioWebPw { get; set; }
        public virtual DbSet<TTesteoAb> TTesteoAb { get; set; }
        public virtual DbSet<TTestimonioPrograma> TTestimonioPrograma { get; set; }
        public virtual DbSet<TTiempoCapacitacion> TTiempoCapacitacion { get; set; }
        public virtual DbSet<TTiempoFrecuencia> TTiempoFrecuencia { get; set; }
        public virtual DbSet<TTiempoLibre> TTiempoLibre { get; set; }
        public virtual DbSet<TTiempoLibreTipo> TTiempoLibreTipo { get; set; }
        public virtual DbSet<TTiempoRestriccionOcurrencia> TTiempoRestriccionOcurrencia { get; set; }
        public virtual DbSet<TTipoAmbiente> TTipoAmbiente { get; set; }
        public virtual DbSet<TTipoAsociacion> TTipoAsociacion { get; set; }
        public virtual DbSet<TTipoCambio> TTipoCambio { get; set; }
        public virtual DbSet<TTipoCambioCol> TTipoCambioCol { get; set; }
        public virtual DbSet<TTipoCambioEntreMoneda> TTipoCambioEntreMoneda { get; set; }
        public virtual DbSet<TTipoCambioMoneda> TTipoCambioMoneda { get; set; }
        public virtual DbSet<TTipoCampoGlobal> TTipoCampoGlobal { get; set; }
        public virtual DbSet<TTipoCapacitacionMoodle> TTipoCapacitacionMoodle { get; set; }
        public virtual DbSet<TTipoCategoriaOrigen> TTipoCategoriaOrigen { get; set; }
        public virtual DbSet<TTipoCentroEstudio> TTipoCentroEstudio { get; set; }
        public virtual DbSet<TTipoCompensacionPersonal> TTipoCompensacionPersonal { get; set; }
        public virtual DbSet<TTipoCompetenciaTecnica> TTipoCompetenciaTecnica { get; set; }
        public virtual DbSet<TTipoComprobante> TTipoComprobante { get; set; }
        public virtual DbSet<TTipoComprobanteDetalle> TTipoComprobanteDetalle { get; set; }
        public virtual DbSet<TTipoContrato> TTipoContrato { get; set; }
        public virtual DbSet<TTipoContribuyente> TTipoContribuyente { get; set; }
        public virtual DbSet<TTipoCuentaBanco> TTipoCuentaBanco { get; set; }
        public virtual DbSet<TTipoDato> TTipoDato { get; set; }
        public virtual DbSet<TTipoDatoMeta> TTipoDatoMeta { get; set; }
        public virtual DbSet<TTipoDescuento> TTipoDescuento { get; set; }
        public virtual DbSet<TTipoDescuentoAsesorCoordinadorPw> TTipoDescuentoAsesorCoordinadorPw { get; set; }
        public virtual DbSet<TTipoDisponibilidadPersonal> TTipoDisponibilidadPersonal { get; set; }
        public virtual DbSet<TTipoDocumentacionPersonal> TTipoDocumentacionPersonal { get; set; }
        public virtual DbSet<TTipoDocumento> TTipoDocumento { get; set; }
        public virtual DbSet<TTipoDocumentoAlumno> TTipoDocumentoAlumno { get; set; }
        public virtual DbSet<TTipoDocumentoAlumnoEstadoMatricula> TTipoDocumentoAlumnoEstadoMatricula { get; set; }
        public virtual DbSet<TTipoDocumentoAlumnoModalidadCurso> TTipoDocumentoAlumnoModalidadCurso { get; set; }
        public virtual DbSet<TTipoDocumentoAlumnoPgeneral> TTipoDocumentoAlumnoPgeneral { get; set; }
        public virtual DbSet<TTipoDocumentoAlumnoSubEstadoMatricula> TTipoDocumentoAlumnoSubEstadoMatricula { get; set; }
        public virtual DbSet<TTipoDocumentoPersonal> TTipoDocumentoPersonal { get; set; }
        public virtual DbSet<TTipoEmpresa> TTipoEmpresa { get; set; }
        public virtual DbSet<TTipoEnvioAutomatico> TTipoEnvioAutomatico { get; set; }
        public virtual DbSet<TTipoEnvioCorreo> TTipoEnvioCorreo { get; set; }
        public virtual DbSet<TTipoEnvioPrograma> TTipoEnvioPrograma { get; set; }
        public virtual DbSet<TTipoEstadoRiesgo> TTipoEstadoRiesgo { get; set; }
        public virtual DbSet<TTipoEstudio> TTipoEstudio { get; set; }
        public virtual DbSet<TTipoEtiqueta> TTipoEtiqueta { get; set; }
        public virtual DbSet<TTipoEvaluacionTrabajo> TTipoEvaluacionTrabajo { get; set; }
        public virtual DbSet<TTipoExperiencia> TTipoExperiencia { get; set; }
        public virtual DbSet<TTipoFactor> TTipoFactor { get; set; }
        public virtual DbSet<TTipoFactorCentil> TTipoFactorCentil { get; set; }
        public virtual DbSet<TTipoFormacion> TTipoFormacion { get; set; }
        public virtual DbSet<TTipoFormulario> TTipoFormulario { get; set; }
        public virtual DbSet<TTipoIdentificador> TTipoIdentificador { get; set; }
        public virtual DbSet<TTipoImpuesto> TTipoImpuesto { get; set; }
        public virtual DbSet<TTipoInteracccion> TTipoInteracccion { get; set; }
        public virtual DbSet<TTipoInteraccionGeneral> TTipoInteraccionGeneral { get; set; }
        public virtual DbSet<TTipoInteraccionMandril> TTipoInteraccionMandril { get; set; }
        public virtual DbSet<TTipoInteraccionPortalFormulario> TTipoInteraccionPortalFormulario { get; set; }
        public virtual DbSet<TTipoMarcador> TTipoMarcador { get; set; }
        public virtual DbSet<TTipoMensajeMessenger> TTipoMensajeMessenger { get; set; }
        public virtual DbSet<TTipoModalidad> TTipoModalidad { get; set; }
        public virtual DbSet<TTipoMovimientoCaja> TTipoMovimientoCaja { get; set; }
        public virtual DbSet<TTipoPago> TTipoPago { get; set; }
        public virtual DbSet<TTipoPagoCategoria> TTipoPagoCategoria { get; set; }
        public virtual DbSet<TTipoPagoRemuneracion> TTipoPagoRemuneracion { get; set; }
        public virtual DbSet<TTipoPerfil> TTipoPerfil { get; set; }
        public virtual DbSet<TTipoPersona> TTipoPersona { get; set; }
        public virtual DbSet<TTipoPreguntaEvaluacion> TTipoPreguntaEvaluacion { get; set; }
        public virtual DbSet<TTipoPrograma> TTipoPrograma { get; set; }
        public virtual DbSet<TTipoPromedio> TTipoPromedio { get; set; }
        public virtual DbSet<TTipoPublicidadWeb> TTipoPublicidadWeb { get; set; }
        public virtual DbSet<TTipoReclamoAlumno> TTipoReclamoAlumno { get; set; }
        public virtual DbSet<TTipoRemuneracionAdicional> TTipoRemuneracionAdicional { get; set; }
        public virtual DbSet<TTipoRespuesta> TTipoRespuesta { get; set; }
        public virtual DbSet<TTipoRespuestaCalificacion> TTipoRespuestaCalificacion { get; set; }
        public virtual DbSet<TTipoRevisionPw> TTipoRevisionPw { get; set; }
        public virtual DbSet<TTipoSangre> TTipoSangre { get; set; }
        public virtual DbSet<TTipoSeguimientoAlumnoCategoria> TTipoSeguimientoAlumnoCategoria { get; set; }
        public virtual DbSet<TTipoServicio> TTipoServicio { get; set; }
        public virtual DbSet<TTipoSolicitudOperaciones> TTipoSolicitudOperaciones { get; set; }
        public virtual DbSet<TTipoTemaProgramaCapacitacion> TTipoTemaProgramaCapacitacion { get; set; }
        public virtual DbSet<TTipoVista> TTipoVista { get; set; }
        public virtual DbSet<TTitulo> TTitulo { get; set; }
        public virtual DbSet<TTokenPostulanteProcesoSeleccion> TTokenPostulanteProcesoSeleccion { get; set; }
        public virtual DbSet<TTroncalCiudad> TTroncalCiudad { get; set; }
        public virtual DbSet<TTroncalPais> TTroncalPais { get; set; }
        public virtual DbSet<TTroncalPartner> TTroncalPartner { get; set; }
        public virtual DbSet<TTroncalPgeneral> TTroncalPgeneral { get; set; }
        public virtual DbSet<TUnsuscribedMailchimp> TUnsuscribedMailchimp { get; set; }
        public virtual DbSet<TUrlBlockStorage> TUrlBlockStorage { get; set; }
        public virtual DbSet<TUrlContenedorPermisos> TUrlContenedorPermisos { get; set; }
        public virtual DbSet<TUrlSubContenedor> TUrlSubContenedor { get; set; }
        public virtual DbSet<TUsuario> TUsuario { get; set; }
        public virtual DbSet<TUsuarioRol> TUsuarioRol { get; set; }
        public virtual DbSet<TUsuarioZopim> TUsuarioZopim { get; set; }
        public virtual DbSet<TValidarCiudad> TValidarCiudad { get; set; }
        public virtual DbSet<TVersionPrograma> TVersionPrograma { get; set; }
        public virtual DbSet<TVisualizacionBsPlay> TVisualizacionBsPlay { get; set; }
        public virtual DbSet<TVueloTipoTramo> TVueloTipoTramo { get; set; }
        public virtual DbSet<TWebhookRequestLog> TWebhookRequestLog { get; set; }
        public virtual DbSet<TWebinar> TWebinar { get; set; }
        public virtual DbSet<TWebinarAsistencia> TWebinarAsistencia { get; set; }
        public virtual DbSet<TWebinarCategoriaConfirmacionAsistencia> TWebinarCategoriaConfirmacionAsistencia { get; set; }
        public virtual DbSet<TWebinarCentroCosto> TWebinarCentroCosto { get; set; }
        public virtual DbSet<TWebinarDetalle> TWebinarDetalle { get; set; }
        public virtual DbSet<TWebinarExcluir> TWebinarExcluir { get; set; }
        public virtual DbSet<TWhatsAppConfiguracion> TWhatsAppConfiguracion { get; set; }
        public virtual DbSet<TWhatsAppConfiguracionEnvio> TWhatsAppConfiguracionEnvio { get; set; }
        public virtual DbSet<TWhatsAppConfiguracionEnvioDetalle> TWhatsAppConfiguracionEnvioDetalle { get; set; }
        public virtual DbSet<TWhatsAppConfiguracionEnvioDetalleOportunidad> TWhatsAppConfiguracionEnvioDetalleOportunidad { get; set; }
        public virtual DbSet<TWhatsAppConfiguracionEnvioPorPrograma> TWhatsAppConfiguracionEnvioPorPrograma { get; set; }
        public virtual DbSet<TWhatsAppConfiguracionLogEjecucion> TWhatsAppConfiguracionLogEjecucion { get; set; }
        public virtual DbSet<TWhatsAppConfiguracionPreEnvio> TWhatsAppConfiguracionPreEnvio { get; set; }
        public virtual DbSet<TWhatsAppDesuscrito> TWhatsAppDesuscrito { get; set; }
        public virtual DbSet<TWhatsAppEstadoMensajeEnviado> TWhatsAppEstadoMensajeEnviado { get; set; }
        public virtual DbSet<TWhatsAppEstadoValidacion> TWhatsAppEstadoValidacion { get; set; }
        public virtual DbSet<TWhatsAppMensajeEnviado> TWhatsAppMensajeEnviado { get; set; }
        public virtual DbSet<TWhatsAppMensajeEnviadoPostulante> TWhatsAppMensajeEnviadoPostulante { get; set; }
        public virtual DbSet<TWhatsAppMensajePublicidad> TWhatsAppMensajePublicidad { get; set; }
        public virtual DbSet<TWhatsAppMensajeRecibido> TWhatsAppMensajeRecibido { get; set; }
        public virtual DbSet<TWhatsAppMensajeRecibidoPostulante> TWhatsAppMensajeRecibidoPostulante { get; set; }
        public virtual DbSet<TWhatsAppNumeroValidado> TWhatsAppNumeroValidado { get; set; }
        public virtual DbSet<TWhatsAppObjetoSerealizado> TWhatsAppObjetoSerealizado { get; set; }
        public virtual DbSet<TWhatsAppPlantillaPorOcurrenciaActividad> TWhatsAppPlantillaPorOcurrenciaActividad { get; set; }
        public virtual DbSet<TWhatsAppTipoMensaje> TWhatsAppTipoMensaje { get; set; }
        public virtual DbSet<TWhatsAppUsuario> TWhatsAppUsuario { get; set; }
        public virtual DbSet<TWhatsAppUsuarioCredencial> TWhatsAppUsuarioCredencial { get; set; }
        public virtual DbSet<TipoCambioSelector> TipoCambioSelector { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=23.96.90.6;Initial Catalog=integraDB;Persist Security Info=False;User ID=integrav4DB;Password=in$tegraV4BS2018;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity<TAccesosIntegraDetalleLog>(entity =>
            {
                entity.ToTable("T_AccesosIntegraDetalleLog", "conf");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAccesosIntegraLogNavigation)
                    .WithMany(p => p.TAccesosIntegraDetalleLog)
                    .HasForeignKey(d => d.IdAccesosIntegraLog)
                    .HasConstraintName("FK_T_AccesosIntegraDetalleLog_T_AccesosIntegraLog");
            });

            modelBuilder.Entity<TAccesosIntegraLog>(entity =>
            {
                entity.ToTable("T_AccesosIntegraLog", "conf");

                entity.Property(e => e.Cookie)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IpUsuario)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAccionFormulario>(entity =>
            {
                entity.ToTable("T_AccionFormulario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAccionFormularioPorCampoContacto>(entity =>
            {
                entity.ToTable("T_AccionFormularioPorCampoContacto", "mkt");

                entity.Property(e => e.Campo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAccionFormularioNavigation)
                    .WithMany(p => p.TAccionFormularioPorCampoContacto)
                    .HasForeignKey(d => d.IdAccionFormulario)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_AccionFormularioPorCampoContacto_T_AccionFormulario");

                entity.HasOne(d => d.IdCampoContactoNavigation)
                    .WithMany(p => p.TAccionFormularioPorCampoContacto)
                    .HasForeignKey(d => d.IdCampoContacto)
                    .HasConstraintName("FK_T_AccionFormularioPorCampoContacto_T_CampoContacto");
            });

            modelBuilder.Entity<TAccionFormularioPorCategoriaOrigen>(entity =>
            {
                entity.ToTable("T_AccionFormularioPorCategoriaOrigen", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAccionFormularioNavigation)
                    .WithMany(p => p.TAccionFormularioPorCategoriaOrigen)
                    .HasForeignKey(d => d.IdAccionFormulario)
                    .HasConstraintName("FK_T_AccionFormularioPorCategoriaOrigen_T_AccionFormulario");

                entity.HasOne(d => d.IdCategoriaOrigenNavigation)
                    .WithMany(p => p.TAccionFormularioPorCategoriaOrigen)
                    .HasForeignKey(d => d.IdCategoriaOrigen)
                    .HasConstraintName("FK_T_AccionFormularioPorCategoriaOrigen_T_CategoriaOrigen");
            });

            modelBuilder.Entity<TActividadBase>(entity =>
            {
                entity.ToTable("T_ActividadBase", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TActividadCabecera>(entity =>
            {
                entity.ToTable("T_ActividadCabecera", "com");

                entity.HasIndex(e => new { e.Nombre, e.ReproAutomatica, e.ReproManual, e.ValidaLlamada, e.Id, e.Estado })
                    .HasName("INC_T_ActividadCabecera_PorId_PorEstado");

                entity.HasIndex(e => new { e.Estado, e.Nombre, e.ReproAutomatica, e.ReproManual, e.ValidaLlamada, e.Id, e.IdActividadBase })
                    .HasName("INC_T_ActividadCabecera_PorIdActividadBase");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion2).HasColumnType("datetime");

                entity.Property(e => e.FechaFinActividad).HasColumnType("date");

                entity.Property(e => e.FechaInicioActividad).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion2).HasColumnType("datetime");

                entity.Property(e => e.HoraFin).HasColumnType("time(3)");

                entity.Property(e => e.HoraInicio).HasColumnType("time(3)");

                entity.Property(e => e.IdPlantillaSpeech).HasColumnName("IdPlantilla_Speech");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroMaximoLlamadas).HasColumnName("NumeroMaximo_Llamadas");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TActividadCabeceraDiaSemana>(entity =>
            {
                entity.ToTable("T_ActividadCabeceraDiaSemana", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TActividadCabeceraLog>(entity =>
            {
                entity.ToTable("T_ActividadCabeceraLog", "com");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion2).HasColumnType("datetime");

                entity.Property(e => e.FechaEjecucion).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion2).HasColumnType("datetime");

                entity.Property(e => e.HoraFin).HasColumnType("time(3)");

                entity.Property(e => e.HoraInicio).HasColumnType("time(3)");

                entity.Property(e => e.IdPlantillaSpeech).HasColumnName("IdPlantilla_Speech");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroMaximoLlamadas).HasColumnName("NumeroMaximo_Llamadas");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TActividadCabeceraTipoDato>(entity =>
            {
                entity.ToTable("T_ActividadCabeceraTipoDato", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TActividadCertificadoGeneradoAutomaticoLog>(entity =>
            {
                entity.ToTable("T_ActividadCertificadoGeneradoAutomaticoLog", "pla");

                entity.Property(e => e.Accion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TActividadDetalle>(entity =>
            {
                entity.ToTable("T_ActividadDetalle", "com");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_ActividadDetalle_PorIdMigracion");

                entity.HasIndex(e => new { e.IdOportunidad, e.UsuarioModificacion })
                    .HasName("INC_T_ActividadDetalle_PorIdOportunidad_PorUsuarioModificacion");

                entity.Property(e => e.Actor)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Comentario)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaOcultarWhatsapp).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramada).HasColumnType("datetime");

                entity.Property(e => e.FechaReal).HasColumnType("datetime");

                entity.Property(e => e.RefLlamada)
                    .HasColumnName("refLlamada")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TActividadDetalle)
                    .HasForeignKey(d => d.IdOportunidad)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ActividadDetalle_T_Oportunidad");
            });

            modelBuilder.Entity<TAdicionalProgramaGeneral>(entity =>
            {
                entity.ToTable("T_AdicionalProgramaGeneral", "pla");

                entity.Property(e => e.Descripcion).HasMaxLength(500);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.NombreImagen)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTitulo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TAdicionalProgramaGeneral)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_AdicionalProgramaGeneral_T_PGeneral");
            });

            modelBuilder.Entity<TAdwordInsigth>(entity =>
            {
                entity.ToTable("T_AdwordInsigth", "mkt");

                entity.Property(e => e.AdsetId)
                    .IsRequired()
                    .HasColumnName("adset_id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CpcMedio)
                    .HasColumnName("CPC_medio")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateStart)
                    .HasColumnName("date_start")
                    .HasColumnType("date");

                entity.Property(e => e.DateStop)
                    .HasColumnName("date_stop")
                    .HasColumnType("date");

                entity.Property(e => e.FCCosto).HasColumnName("f_c_costo");

                entity.Property(e => e.FComment).HasColumnName("f_comment");

                entity.Property(e => e.FLeadgenOther).HasColumnName("f_leadgenOther");

                entity.Property(e => e.FLike).HasColumnName("f_like");

                entity.Property(e => e.FLinkClick).HasColumnName("f_link_click");

                entity.Property(e => e.FPageEngagement).HasColumnName("f_page_engagement");

                entity.Property(e => e.FPhotoView).HasColumnName("f_photo_view");

                entity.Property(e => e.FPost).HasColumnName("f_post");

                entity.Property(e => e.FPostEngagement).HasColumnName("f_post_engagement");

                entity.Property(e => e.FPostLike).HasColumnName("f_post_like");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Frequency).HasColumnName("frequency");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdTipo).HasColumnName("id_tipo");

                entity.Property(e => e.Impressions).HasColumnName("impressions");

                entity.Property(e => e.Objective)
                    .IsRequired()
                    .HasColumnName("objective")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PosicionMedia)
                    .HasColumnName("Posicion_media")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.Reach).HasColumnName("reach");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Spend).HasColumnName("spend");

                entity.Property(e => e.UltimaActualizacion)
                    .HasColumnName("ultima_actualizacion")
                    .HasColumnType("datetime");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAdwordsApiPalabraClave>(entity =>
            {
                entity.ToTable("T_AdwordsApiPalabraClave", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PalabraClave)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAdwordsApiVolumenBusqueda>(entity =>
            {
                entity.ToTable("T_AdwordsApiVolumenBusqueda", "mkt");

                entity.HasIndex(e => new { e.IdAdwordsApiPalabraClave, e.Mes, e.Anho, e.IdPais, e.Estado })
                    .HasName("INC_T_AdwordsApiVolumenBusqueda_PorIdAdwordsApiPalabraClavePorMesPorAnhoPorIdPaisPorEstado");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAdwordsLog>(entity =>
            {
                entity.ToTable("T_AdwordsLog", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAgendaTab>(entity =>
            {
                entity.ToTable("T_AgendaTab", "com");

                entity.Property(e => e.CodigoAreaTrabajo)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAgendaTabConfiguracion>(entity =>
            {
                entity.ToTable("T_AgendaTabConfiguracion", "com");

                entity.Property(e => e.CamposVista)
                    .IsRequired()
                    .HasMaxLength(600);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCategoriaOrigen)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.IdEstadoOportunidad)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.IdFaseOportunidad)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.IdTipoCategoriaOrigen)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.IdTipoDato)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Probabilidad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VistaBaseDatos)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TAgendaTipoUsuario>(entity =>
            {
                entity.ToTable("T_AgendaTipoUsuario", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAlumno>(entity =>
            {
                entity.ToTable("T_Alumno", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_Alumno_PorIdMigracion");

                entity.HasIndex(e => new { e.Nombre1, e.ApellidoPaterno })
                    .HasName("INC_T_Alumno_PorNombre_PorApellidoPaterno");

                entity.HasIndex(e => new { e.IdCodigoPais, e.Email1, e.Estado })
                    .HasName("INC_T_Alumno_PorEmail1_PorEstado");

                entity.HasIndex(e => new { e.IdCodigoPais, e.Id, e.Estado })
                    .HasName("INC_T_Alumno_PorIdCodigoPais_PorEstado");

                entity.HasIndex(e => new { e.ApellidoMaterno, e.ApellidoPaterno, e.Nombre1, e.Nombre2, e.Email1, e.Id })
                    .HasName("INC_T_Alumno_PorEmail1_PorId");

                entity.HasIndex(e => new { e.ApellidoMaterno, e.ApellidoPaterno, e.Email1, e.Email2, e.Nombre1, e.Nombre2, e.Estado })
                    .HasName("INC_T_Alumno_PorEmail1PorEmail2");

                entity.HasIndex(e => new { e.Dni, e.Email1, e.IdAformacion, e.IdAtrabajo, e.IdCargo, e.IdCiudad, e.IdIndustria, e.IdCodigoPais })
                    .HasName("INC_T_Alumno_PorIdCodigoPais");

                entity.HasIndex(e => new { e.Email1, e.IdAformacion, e.IdAtrabajo, e.IdCargo, e.IdCiudad, e.IdCodigoPais, e.IdIndustria, e.Id, e.Estado })
                    .HasName("INC_T_Alumno_PorId_PorEstado");

                entity.HasIndex(e => new { e.ApellidoMaterno, e.ApellidoPaterno, e.Asociado, e.Celular, e.Direccion, e.Dni, e.Email1, e.Email2, e.HoraContacto, e.HoraPeru, e.IdAformacion, e.IdAtrabajo, e.IdCargo, e.IdCiudad, e.IdCodigoPais, e.IdEmpresa, e.IdIndustria, e.IdReferido, e.Nombre1, e.Nombre2, e.Telefono, e.Id })
                    .HasName("INC_T_AlumnoPorIdIncluyeEmail1");

                entity.Property(e => e.Aformacion)
                    .HasColumnName("AFormacion")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AniversarioBodas)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoMaterno).HasMaxLength(50);

                entity.Property(e => e.ApellidoPaterno).HasMaxLength(50);

                entity.Property(e => e.Atrabajo)
                    .HasColumnName("ATrabajo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cargo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Celular).HasMaxLength(50);

                entity.Property(e => e.Celular2).HasMaxLength(50);

                entity.Property(e => e.CiudadEnvioCertificado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionCargo).HasMaxLength(250);

                entity.Property(e => e.Direccion).HasMaxLength(1000);

                entity.Property(e => e.DireccionAv)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionCalle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionComp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionDpto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionEdificio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionEnvioCertificado)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionLt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionMz)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionTorre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionUrb)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionZona)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dni)
                    .HasColumnName("DNI")
                    .HasMaxLength(20);

                entity.Property(e => e.Email1).HasMaxLength(500);

                entity.Property(e => e.Email2).HasMaxLength(500);

                entity.Property(e => e.Empresa).HasMaxLength(500);

                entity.Property(e => e.EstadoCivil).HasMaxLength(50);

                entity.Property(e => e.FaseContacto)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.Genero)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.HoraContacto)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HoraMaxima)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HoraPeru)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdAformacion).HasColumnName("IdAFormacion");

                entity.Property(e => e.IdAtrabajo).HasColumnName("IdATrabajo");

                entity.Property(e => e.IdEstadoContactoWhatsAppSecundario).HasColumnName("IdEstadoContactoWhatsApp_Secundario");

                entity.Property(e => e.IdOportunidadInicial).HasColumnName("IdOportunidad_Inicial");

                entity.Property(e => e.Industria)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NivelFormacion).HasMaxLength(500);

                entity.Property(e => e.Nombre1).HasMaxLength(50);

                entity.Property(e => e.Nombre2).HasMaxLength(50);

                entity.Property(e => e.NombreCiudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreFamiliar)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePais)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NroDocumento).HasMaxLength(25);

                entity.Property(e => e.NroHijo)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Pais).HasMaxLength(50);

                entity.Property(e => e.Parentesco)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Profesion).HasMaxLength(500);

                entity.Property(e => e.Puesto)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaDetallada)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Referido)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Skype)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono).HasMaxLength(50);

                entity.Property(e => e.Telefono2).HasMaxLength(50);

                entity.Property(e => e.TelefonoFamiliar)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TelefonoTrabajo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TelefonoTrabajoAnexo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UbigeoCiudad)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UbigeoDepartamento)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UbigeoDistrito)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UbigeoPais)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UbigeoProvincia)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UsClave).HasMaxLength(100);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAlumnoLog>(entity =>
            {
                entity.ToTable("T_AlumnoLog", "mkt");

                entity.Property(e => e.CampoActualizado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAnterior)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNuevo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAmbiente>(entity =>
            {
                entity.ToTable("T_Ambiente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAnuncio>(entity =>
            {
                entity.ToTable("T_Anuncio", "mkt");

                entity.Property(e => e.EnlaceFormulario).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdAnuncioFacebook)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoAnuncioNavigation)
                    .WithMany(p => p.TAnuncio)
                    .HasForeignKey(d => d.IdConjuntoAnuncio)
                    .HasConstraintName("FK_T_Anuncio_T_ConjuntoAnuncio");

                entity.HasOne(d => d.IdCreativoPublicidadNavigation)
                    .WithMany(p => p.TAnuncio)
                    .HasForeignKey(d => d.IdCreativoPublicidad)
                    .HasConstraintName("FK_T_Anuncio_T_CreativoPublicidad");
            });

            modelBuilder.Entity<TAnuncioElemento>(entity =>
            {
                entity.ToTable("T_AnuncioElemento", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAnuncioNavigation)
                    .WithMany(p => p.TAnuncioElemento)
                    .HasForeignKey(d => d.IdAnuncio)
                    .HasConstraintName("FK_T_AnuncioElemento_T_Anuncio");

                entity.HasOne(d => d.IdElementoNavigation)
                    .WithMany(p => p.TAnuncioElemento)
                    .HasForeignKey(d => d.IdElemento)
                    .HasConstraintName("FK_T_AnuncioElemento_T_Elemento");
            });

            modelBuilder.Entity<TAnuncioFacebook>(entity =>
            {
                entity.ToTable("T_AnuncioFacebook", "mkt");

                entity.Property(e => e.FacebookIdAnuncio)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdConjuntoAnuncio)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookNombreAnuncio)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoAnuncioFacebookNavigation)
                    .WithMany(p => p.TAnuncioFacebook)
                    .HasForeignKey(d => d.IdConjuntoAnuncioFacebook)
                    .HasConstraintName("FK_T_AnuncioFacebook_T_ConjuntoAnuncioFacebook");
            });

            modelBuilder.Entity<TAnuncioFacebookMetrica>(entity =>
            {
                entity.ToTable("T_AnuncioFacebookMetrica", "mkt");

                entity.HasIndex(e => new { e.Estado, e.FechaConsulta, e.IdAnuncioFacebook })
                    .HasName("INC_T_AnuncioFacebookMetrica_PorIdAnuncioFacebook_FechaConsulta");

                entity.Property(e => e.FechaConsulta).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Gasto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAnuncioFacebookNavigation)
                    .WithMany(p => p.TAnuncioFacebookMetrica)
                    .HasForeignKey(d => d.IdAnuncioFacebook)
                    .HasConstraintName("FK_T_AnuncioFacebookMetrica_T_AnuncioFacebook");

                entity.HasOne(d => d.IdMonedaNavigation)
                    .WithMany(p => p.TAnuncioFacebookMetrica)
                    .HasForeignKey(d => d.IdMoneda)
                    .HasConstraintName("FK_T_AnuncioFacebookMetrica_T_Moneda");
            });

            modelBuilder.Entity<TArea>(entity =>
            {
                entity.ToTable("T_Area", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAreaCampaniaMailingDetalle>(entity =>
            {
                entity.ToTable("T_AreaCampaniaMailingDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaCapacitacionNavigation)
                    .WithMany(p => p.TAreaCampaniaMailingDetalle)
                    .HasForeignKey(d => d.IdAreaCapacitacion)
                    .HasConstraintName("FK_T_AreaCampaniaMailingDetalle_T_AreaCapacitacion");

                entity.HasOne(d => d.IdCampaniaMailingDetalleNavigation)
                    .WithMany(p => p.TAreaCampaniaMailingDetalle)
                    .HasForeignKey(d => d.IdCampaniaMailingDetalle)
                    .HasConstraintName("FK_T_AreaCampaniaMailingDetalle_T_CampaniaMailingDetalle");
            });

            modelBuilder.Entity<TAreaCampoEtiqueta>(entity =>
            {
                entity.ToTable("T_AreaCampoEtiqueta", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAreaCapacitacion>(entity =>
            {
                entity.ToTable("T_AreaCapacitacion", "pla");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionHtml)
                    .HasColumnName("DescripcionHTML")
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ImgPortada)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ImgPortadaAlt)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ImgSecundaria)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ImgSecundariaAlt)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAreaCapacitacionFacebook>(entity =>
            {
                entity.ToTable("T_AreaCapacitacionFacebook", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAreaCc>(entity =>
            {
                entity.ToTable("T_AreaCC", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAreaFormacion>(entity =>
            {
                entity.ToTable("T_AreaFormacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAreaParametroSeoPw>(entity =>
            {
                entity.ToTable("T_AreaParametroSEO_PW", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdParametroSeopw).HasColumnName("IdParametroSEOPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaCapacitacionNavigation)
                    .WithMany(p => p.TAreaParametroSeoPw)
                    .HasForeignKey(d => d.IdAreaCapacitacion)
                    .HasConstraintName("FK_T_AreaParametroSEO_PW_T_AreaCapacitacion");

                entity.HasOne(d => d.IdParametroSeopwNavigation)
                    .WithMany(p => p.TAreaParametroSeoPw)
                    .HasForeignKey(d => d.IdParametroSeopw)
                    .HasConstraintName("FK_T_AreaParametroSEO_PW_T_ParametroSEO_PW");
            });

            modelBuilder.Entity<TAreaTrabajo>(entity =>
            {
                entity.ToTable("T_AreaTrabajo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TArticulo>(entity =>
            {
                entity.ToTable("T_Articulo", "pla");

                entity.Property(e => e.Autor).HasMaxLength(250);

                entity.Property(e => e.DescripcionGeneral).HasMaxLength(1000);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ImgPortada).HasMaxLength(300);

                entity.Property(e => e.ImgPortadaAlt).HasMaxLength(250);

                entity.Property(e => e.ImgSecundaria).HasMaxLength(300);

                entity.Property(e => e.ImgSecundariaAlt).HasMaxLength(250);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.UrlDocumento).HasMaxLength(350);

                entity.Property(e => e.UrlWeb).HasMaxLength(350);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TArticuloPgeneral>(entity =>
            {
                entity.ToTable("T_ArticuloPGeneral", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TArticuloSeo>(entity =>
            {
                entity.ToTable("T_ArticuloSeo", "pla");

                entity.Property(e => e.Descripcion).HasMaxLength(500);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdParametroSeo).HasColumnName("IdParametroSEO");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TArticuloTag>(entity =>
            {
                entity.ToTable("T_ArticuloTag", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAscenso>(entity =>
            {
                entity.ToTable("T_Ascenso", "pla");

                entity.Property(e => e.CargoMercado)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPublicacion)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlOferta)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAscensoAreaFormacion>(entity =>
            {
                entity.ToTable("T_AscensoAreaFormacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAscensoCertificacion>(entity =>
            {
                entity.ToTable("T_AscensoCertificacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAscensoExperienciaCargoIndustria>(entity =>
            {
                entity.ToTable("T_AscensoExperienciaCargoIndustria", "pla");

                entity.Property(e => e.DescripcionPuestoAnterior)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAscensoMembresia>(entity =>
            {
                entity.ToTable("T_AscensoMembresia", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAscensoProgramaCapacitacion>(entity =>
            {
                entity.ToTable("T_AscensoProgramaCapacitacion", "pla");

                entity.Property(e => e.Contenido)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAscensoProgramaCapacitacionExperiencia>(entity =>
            {
                entity.ToTable("T_AscensoProgramaCapacitacionExperiencia", "pla");

                entity.Property(e => e.Contenido)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesor>(entity =>
            {
                entity.ToTable("T_Asesor", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorAreaCapacitacionDetalle>(entity =>
            {
                entity.ToTable("T_AsesorAreaCapacitacionDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaCapacitacionNavigation)
                    .WithMany(p => p.TAsesorAreaCapacitacionDetalle)
                    .HasForeignKey(d => d.IdAreaCapacitacion)
                    .HasConstraintName("FK_T_AsesorAreaCapacitacionDetalle_T_AreaCapacitacion");

                entity.HasOne(d => d.IdAsesorCentroCostoNavigation)
                    .WithMany(p => p.TAsesorAreaCapacitacionDetalle)
                    .HasForeignKey(d => d.IdAsesorCentroCosto)
                    .HasConstraintName("FK_T_AsesorAreaCapacitacionDetalle_T_AsesorCentroCosto");
            });

            modelBuilder.Entity<TAsesorCategoriaOrigenDetalle>(entity =>
            {
                entity.ToTable("T_AsesorCategoriaOrigenDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorCentroCosto>(entity =>
            {
                entity.ToTable("T_AsesorCentroCosto", "mkt");

                entity.Property(e => e.AsignacionPais)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorCentroCostoDetalle>(entity =>
            {
                entity.ToTable("T_AsesorCentroCostoDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorCentroCostoOcurrencia>(entity =>
            {
                entity.ToTable("T_AsesorCentroCostoOcurrencia", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorChat>(entity =>
            {
                entity.ToTable("T_AsesorChat", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreAsesor)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorChatDetalle>(entity =>
            {
                entity.ToTable("T_AsesorChatDetalle", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorFaseOpoProbabilidadDetalle>(entity =>
            {
                entity.ToTable("T_AsesorFaseOpoProbabilidadDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdProbabilidadRegistroPw).HasColumnName("IdProbabilidadRegistroPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorGrupoFiltroProgramaCriticoDetalle>(entity =>
            {
                entity.ToTable("T_AsesorGrupoFiltroProgramaCriticoDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAsesorCentroCostoNavigation)
                    .WithMany(p => p.TAsesorGrupoFiltroProgramaCriticoDetalle)
                    .HasForeignKey(d => d.IdAsesorCentroCosto)
                    .HasConstraintName("FK_T_AsesorGrupoFiltroProgramaCriticoDetalle_T_AsesorCentroCosto");

                entity.HasOne(d => d.IdGrupoFiltroProgramaCriticoNavigation)
                    .WithMany(p => p.TAsesorGrupoFiltroProgramaCriticoDetalle)
                    .HasForeignKey(d => d.IdGrupoFiltroProgramaCritico)
                    .HasConstraintName("FK_T_AsesorGrupoFiltroProgramaCriticoDetalle_T_GrupoFiltroProgramaCritico");
            });

            modelBuilder.Entity<TAsesorPaisDetalle>(entity =>
            {
                entity.ToTable("T_AsesorPaisDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorProbabilidadDetalle>(entity =>
            {
                entity.ToTable("T_AsesorProbabilidadDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdProbabilidadRegistroPw).HasColumnName("IdProbabilidadRegistroPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsesorProgramaGeneralDetalle>(entity =>
            {
                entity.ToTable("T_AsesorProgramaGeneralDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAsesorCentroCostoNavigation)
                    .WithMany(p => p.TAsesorProgramaGeneralDetalle)
                    .HasForeignKey(d => d.IdAsesorCentroCosto)
                    .HasConstraintName("FK_T_AsesorProgramaGeneralDetalle_T_AsesorCentroCosto");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TAsesorProgramaGeneralDetalle)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_AsesorProgramaGeneralDetalle_T_PGeneral");
            });

            modelBuilder.Entity<TAsesorSubAreaCapacitacionDetalle>(entity =>
            {
                entity.ToTable("T_AsesorSubAreaCapacitacionDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAsesorCentroCostoNavigation)
                    .WithMany(p => p.TAsesorSubAreaCapacitacionDetalle)
                    .HasForeignKey(d => d.IdAsesorCentroCosto)
                    .HasConstraintName("FK_T_AsesorSubAreaCapacitacionDetalle_T_AsesorCentroCosto");

                entity.HasOne(d => d.IdSubAreaCapacitacionNavigation)
                    .WithMany(p => p.TAsesorSubAreaCapacitacionDetalle)
                    .HasForeignKey(d => d.IdSubAreaCapacitacion)
                    .HasConstraintName("FK_T_AsesorSubAreaCapacitacionDetalle_T_SubAreaCapacitacion");
            });

            modelBuilder.Entity<TAsesorTipoCategoriaOrigenDetalle>(entity =>
            {
                entity.ToTable("T_AsesorTipoCategoriaOrigenDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAsesorCentroCostoNavigation)
                    .WithMany(p => p.TAsesorTipoCategoriaOrigenDetalle)
                    .HasForeignKey(d => d.IdAsesorCentroCosto)
                    .HasConstraintName("FK_T_AsesorTipoCategoriaOrigenDetalle_T_AsesorCentroCosto");

                entity.HasOne(d => d.IdTipoCategoriaOrigenNavigation)
                    .WithMany(p => p.TAsesorTipoCategoriaOrigenDetalle)
                    .HasForeignKey(d => d.IdTipoCategoriaOrigen)
                    .HasConstraintName("FK_T_AsesorTipoCategoriaOrigenDetalle_T_TipoCategoriaOrigen");
            });

            modelBuilder.Entity<TAsignacionAutomatica>(entity =>
            {
                entity.ToTable("T_AsignacionAutomatica", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_AsignacionAutomatica_PorIdMigracion");

                entity.HasIndex(e => new { e.Email, e.FechaCreacion, e.IdOportunidad })
                    .HasName("INC_T_AsignacionAutomatica_PorEmailPorFechaCreacionPorIdOportunidad");

                entity.HasIndex(e => new { e.IdOportunidad, e.Estado, e.IdAnuncioFacebook })
                    .HasName("INC_T_AsignacionAutomatica_PorEstado_PorIdAnuncioFacebook");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AptoProcesamiento)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Celular)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Corregido).HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramada).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistroCampania).HasColumnType("datetime");

                entity.Property(e => e.Nombre1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrigenCampania)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProbabilidadActualDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UrlOrigen).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Validado).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TAsignacionAutomaticaConfiguracion>(entity =>
            {
                entity.ToTable("T_AsignacionAutomaticaConfiguracion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsignacionAutomaticaError>(entity =>
            {
                entity.ToTable("T_AsignacionAutomaticaError", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_AsignacionAutomaticaError_PorIdMigracion");

                entity.Property(e => e.Campo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsignacionAutomaticaOrigen>(entity =>
            {
                entity.ToTable("T_AsignacionAutomaticaOrigen", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsignacionAutomaticaTemp>(entity =>
            {
                entity.ToTable("T_AsignacionAutomatica_Temp", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_AsignacionAutomatica_Temp_PorIdMigracion");

                entity.HasIndex(e => new { e.Estado, e.IdFaseOportunidadPortal })
                    .HasName("INC_T_AsignacionAutomaticaTemp_PorIdFaseOportunidadPortal");

                entity.Property(e => e.Apellidos)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AptoProcesamiento)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Correo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistroCampania).HasColumnType("datetime");

                entity.Property(e => e.Fijo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Movil)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Nombres)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Origen)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesado).HasColumnName("procesado");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlOrigen).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsignacionAutomaticaTipoError>(entity =>
            {
                entity.ToTable("T_AsignacionAutomaticaTipoError", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_AsignacionAutomaticaTipoError_PorIdMigracion");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsignacionOportunidad>(entity =>
            {
                entity.ToTable("T_AsignacionOportunidad", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_AsignacionOportunidad_PorIdMigracion");

                entity.Property(e => e.FechaAsignacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TAsignacionOportunidad)
                    .HasForeignKey(d => d.IdOportunidad)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_AsignacionOportunidad_T_Oportunidad");
            });

            modelBuilder.Entity<TAsignacionOportunidadLog>(entity =>
            {
                entity.ToTable("T_AsignacionOportunidadLog", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_AsignacionOportunidadLog_PorIdMigracion");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaLog).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCentroCostoAnt).HasColumnName("IdCentroCosto_Ant");

                entity.Property(e => e.IdPersonalAnterior).HasColumnName("IdPersonal_Anterior");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAsignacionOportunidadNavigation)
                    .WithMany(p => p.TAsignacionOportunidadLog)
                    .HasForeignKey(d => d.IdAsignacionOportunidad)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_AsignacionOportunidadLog_T_AsignacionOportunidad");
            });

            modelBuilder.Entity<TAsignacionPreguntaExamen>(entity =>
            {
                entity.ToTable("T_AsignacionPreguntaExamen", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsistencia>(entity =>
            {
                entity.ToTable("T_Asistencia", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecificoSesion).HasColumnName("IdPEspecificoSesion");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAsociacionPreguntaEvaluacion>(entity =>
            {
                entity.ToTable("T_AsociacionPreguntaEvaluacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAutenticacionPlataforma>(entity =>
            {
                entity.ToTable("T_AutenticacionPlataforma", "conf");

                entity.Property(e => e.Autenticacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("date");

                entity.Property(e => e.Producto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAutenticacionServicioExterno>(entity =>
            {
                entity.ToTable("T_AutenticacionServicioExterno", "conf");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAutoevaluacionPorCursoMoodle>(entity =>
            {
                entity.ToTable("T_AutoevaluacionPorCurso_Moodle", "ope");

                entity.Property(e => e.Evaluacion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaActualizacion).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreCurso)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSeccion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAvanceTiempoReal>(entity =>
            {
                entity.ToTable("T_AvanceTiempoReal", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdInteraccionSesion).HasMaxLength(128);

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAvanceTiempoRealLog>(entity =>
            {
                entity.ToTable("T_AvanceTiempoRealLog", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TAvatar>(entity =>
            {
                entity.ToTable("T_Avatar", "com");

                entity.Property(e => e.Accessories)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Clothes)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClothesColor)
                    .IsRequired()
                    .HasColumnName("Clothes_Color")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Eyes)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Eyesbrow)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FacialHair)
                    .IsRequired()
                    .HasColumnName("Facial_Hair")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FacialHairColor)
                    .IsRequired()
                    .HasColumnName("Facial_Hair_Color")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.HairColor)
                    .IsRequired()
                    .HasColumnName("Hair_Color")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mouth)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Skin)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Top)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBandejaPendientePw>(entity =>
            {
                entity.ToTable("T_BandejaPendiente_PW", "pla");

                entity.Property(e => e.Comentario)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ComentarioRechazar)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdDocumentoPw).HasColumnName("IdDocumentoPW");

                entity.Property(e => e.IdRevisionNivelPw).HasColumnName("IdRevisionNivelPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDocumentoPwNavigation)
                    .WithMany(p => p.TBandejaPendientePw)
                    .HasForeignKey(d => d.IdDocumentoPw)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_BandejaPendiente_PW_T_Documento_PW");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TBandejaPendientePw)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_BandejaPendiente_PW_T_Personal");

                entity.HasOne(d => d.IdRevisionNivelPwNavigation)
                    .WithMany(p => p.TBandejaPendientePw)
                    .HasForeignKey(d => d.IdRevisionNivelPw)
                    .HasConstraintName("FK_T_BandejaPendiente_PW_T_RevisionNivel_PW");
            });

            modelBuilder.Entity<TBeneficioDatoAdicional>(entity =>
            {
                entity.ToTable("T_BeneficioDatoAdicional", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBeneficioLaboralPorPeriodo>(entity =>
            {
                entity.ToTable("T_BeneficioLaboralPorPeriodo", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Monto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBeneficioLaboralTipo>(entity =>
            {
                entity.ToTable("T_BeneficioLaboralTipo", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBeneficiosAlumnoPespecifico>(entity =>
            {
                entity.ToTable("T_BeneficiosAlumnoPEspecifico", "pla");

                entity.Property(e => e.Beneficios)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBloqueHorario>(entity =>
            {
                entity.ToTable("T_BloqueHorario", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdConfiguracionBic).HasColumnName("IdConfiguracionBIC");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBloqueHorarioProcesaOportunidad>(entity =>
            {
                entity.ToTable("T_BloqueHorarioProcesaOportunidad", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Dia)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ProbabilidadOportunidad)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Sede)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCaja>(entity =>
            {
                entity.ToTable("T_Caja", "fin");

                entity.Property(e => e.CodigoCaja)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalResponsable).HasColumnName("IdPersonal_Responsable");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCajaEgreso>(entity =>
            {
                entity.ToTable("T_CajaEgreso", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalResponsable).HasColumnName("IdPersonal_Responsable");

                entity.Property(e => e.IdPersonalSolicitante).HasColumnName("IdPersonal_Solicitante");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TotalEfectivo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCajaEgresoAprobado>(entity =>
            {
                entity.ToTable("T_CajaEgresoAprobado", "fin");

                entity.Property(e => e.Anho)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoRec)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Detalle)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionRegistro).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Observacion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Origen)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCajaPorRendir>(entity =>
            {
                entity.ToTable("T_CajaPorRendir", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEntregaEfectivo).HasColumnType("date");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalResponsableCaja).HasColumnName("IdPersonal_ResponsableCaja");

                entity.Property(e => e.IdPersonalSolicitante).HasColumnName("IdPersonal_Solicitante");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TotalEfectivo).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCajaPorRendirCabecera>(entity =>
            {
                entity.ToTable("T_CajaPorRendirCabecera", "fin");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalAprobacion).HasColumnName("IdPersonal_Aprobacion");

                entity.Property(e => e.IdPersonalSolicitante).HasColumnName("IdPersonal_Solicitante");

                entity.Property(e => e.MontoDevolucion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Observacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCalculoOportunidadRn2>(entity =>
            {
                entity.ToTable("T_CalculoOportunidadRN2", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdOportunidadRn2).HasColumnName("IdOportunidadRN2");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCalidadLlamadaLog>(entity =>
            {
                entity.ToTable("T_CalidadLLamadaLog", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMigracion).HasColumnName("IdMIgracion");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCalidadProcesamiento>(entity =>
            {
                entity.ToTable("T_CalidadProcesamiento", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PespecificoTotal).HasColumnName("PEspecificoTotal");

                entity.Property(e => e.PespecificoValidados).HasColumnName("PEspecificoValidados");

                entity.Property(e => e.PgeneralTotal).HasColumnName("PGeneralTotal");

                entity.Property(e => e.PgeneralValidados).HasColumnName("PGeneralValidados");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TCalidadProcesamiento)
                    .HasForeignKey(d => d.IdOportunidad)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CalidadProcesamiento_T_Oportunidad");
            });

            modelBuilder.Entity<TCambioPorPeriodoCronograma>(entity =>
            {
                entity.ToTable("T_CambioPorPeriodoCronograma", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.MontoCambio).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoModificacion)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCampaniaFacebook>(entity =>
            {
                entity.ToTable("T_CampaniaFacebook", "mkt");

                entity.HasIndex(e => e.FacebookIdCampania)
                    .HasName("IX_T_CampaniaFacebook")
                    .IsUnique();

                entity.Property(e => e.FacebookIdCampania)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdCuenta)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookNombreCampania)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCampaniaGeneral>(entity =>
            {
                entity.ToTable("T_CampaniaGeneral", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaFinEnvioWhatsapp).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioEnvioWhatsapp).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEstadoEnvioMailing).HasColumnName("IdEstadoEnvio_Mailing");

                entity.Property(e => e.IdEstadoEnvioWhatsapp).HasColumnName("IdEstadoEnvio_Whatsapp");

                entity.Property(e => e.IdHoraEnvioMailing).HasColumnName("IdHoraEnvio_Mailing");

                entity.Property(e => e.IdHoraEnvioWhatsapp).HasColumnName("IdHoraEnvio_Whatsapp");

                entity.Property(e => e.IdPlantillaMailing).HasColumnName("IdPlantilla_Mailing");

                entity.Property(e => e.IdPlantillaWhatsapp).HasColumnName("IdPlantilla_Whatsapp");

                entity.Property(e => e.IdProbabilidadRegistroPw).HasColumnName("IdProbabilidadRegistro_PW");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCategoriaObjetoFiltroNavigation)
                    .WithMany(p => p.TCampaniaGeneral)
                    .HasForeignKey(d => d.IdCategoriaObjetoFiltro)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CampaniaGeneral_T_CategoriaObjetoFiltro");

                entity.HasOne(d => d.IdCategoriaOrigenNavigation)
                    .WithMany(p => p.TCampaniaGeneral)
                    .HasForeignKey(d => d.IdCategoriaOrigen)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CampaniaGeneral_T_CategoriaOrigen");

                entity.HasOne(d => d.IdFiltroSegmentoNavigation)
                    .WithMany(p => p.TCampaniaGeneral)
                    .HasForeignKey(d => d.IdFiltroSegmento)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CampaniaGeneral_T_FiltroSegmento");

                entity.HasOne(d => d.IdProbabilidadRegistroPwNavigation)
                    .WithMany(p => p.TCampaniaGeneral)
                    .HasForeignKey(d => d.IdProbabilidadRegistroPw)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CampaniaGeneral_T_ProbabilidadRegistro_PW");

                entity.HasOne(d => d.IdRemitenteMailingNavigation)
                    .WithMany(p => p.TCampaniaGeneral)
                    .HasForeignKey(d => d.IdRemitenteMailing)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CampaniaGeneral_T_RemitenteMailing");

                entity.HasOne(d => d.IdTiempoFrecuenciaNavigation)
                    .WithMany(p => p.TCampaniaGeneral)
                    .HasForeignKey(d => d.IdTiempoFrecuencia)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CampaniaGeneral_T_TiempoFrecuencia");

                entity.HasOne(d => d.IdTipoAsociacionNavigation)
                    .WithMany(p => p.TCampaniaGeneral)
                    .HasForeignKey(d => d.IdTipoAsociacion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CampaniaGeneral_T_TipoAsociacion");
            });

            modelBuilder.Entity<TCampaniaGeneralDetalle>(entity =>
            {
                entity.ToTable("T_CampaniaGeneralDetalle", "mkt");

                entity.HasIndex(e => new { e.Estado, e.IdCampaniaGeneral })
                    .HasName("INC_T_CampaniaGeneralDetalle_PorIdCampaniaGeneral");

                entity.Property(e => e.Asunto)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaGeneralNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetalle)
                    .HasForeignKey(d => d.IdCampaniaGeneral)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_CampaniaGeneralDetalle_T_CampaniaGeneral");

                entity.HasOne(d => d.IdCentroCostoNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetalle)
                    .HasForeignKey(d => d.IdCentroCosto)
                    .HasConstraintName("FK_T_CampaniaGeneralDetalle_T_CentroCosto");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetalle)
                    .HasForeignKey(d => d.IdPersonal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_CampaniaGeneralDetalle_T_Personal");
            });

            modelBuilder.Entity<TCampaniaGeneralDetalleArea>(entity =>
            {
                entity.ToTable("T_CampaniaGeneralDetalleArea", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaCapacitacionNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetalleArea)
                    .HasForeignKey(d => d.IdAreaCapacitacion)
                    .HasConstraintName("FK_T_CampaniaGeneralDetalleArea_T_AreaCapacitacion");

                entity.HasOne(d => d.IdCampaniaGeneralDetalleNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetalleArea)
                    .HasForeignKey(d => d.IdCampaniaGeneralDetalle)
                    .HasConstraintName("FK_T_CampaniaGeneralDetalleArea_T_CampaniaGeneralDetalle");
            });

            modelBuilder.Entity<TCampaniaGeneralDetallePrograma>(entity =>
            {
                entity.ToTable("T_CampaniaGeneralDetallePrograma", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.NombreProgramaGeneral)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaGeneralDetalleNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetallePrograma)
                    .HasForeignKey(d => d.IdCampaniaGeneralDetalle)
                    .HasConstraintName("FK_T_CampaniaGeneralDetallePrograma_T_CampaniaGeneralDetalle");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetallePrograma)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_CampaniaGeneralDetallePrograma_T_PGeneral");
            });

            modelBuilder.Entity<TCampaniaGeneralDetalleResponsable>(entity =>
            {
                entity.ToTable("T_CampaniaGeneralDetalleResponsable", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaGeneralDetalleNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetalleResponsable)
                    .HasForeignKey(d => d.IdCampaniaGeneralDetalle)
                    .HasConstraintName("FK_T_CampaniaGeneralDetalleResponsable_T_CampaniaGeneralDetalle");
            });

            modelBuilder.Entity<TCampaniaGeneralDetalleSubArea>(entity =>
            {
                entity.ToTable("T_CampaniaGeneralDetalleSubArea", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaGeneralDetalleNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetalleSubArea)
                    .HasForeignKey(d => d.IdCampaniaGeneralDetalle)
                    .HasConstraintName("FK_T_CampaniaGeneralDetalleSubArea_T_CampaniaGeneralDetalle");

                entity.HasOne(d => d.IdSubAreaCapacitacionNavigation)
                    .WithMany(p => p.TCampaniaGeneralDetalleSubArea)
                    .HasForeignKey(d => d.IdSubAreaCapacitacion)
                    .HasConstraintName("FK_T_CampaniaGeneralDetalleSubArea_T_SubAreaCapacitacion");
            });

            modelBuilder.Entity<TCampaniaMailchimp>(entity =>
            {
                entity.ToTable("T_CampaniaMailchimp", "mkt");

                entity.Property(e => e.CorreoRemitente)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MailchimpAsunto)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpEstado)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpFechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.MailchimpId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpListaId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpListaNombre)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpTipo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpTitulo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.NombreRemitente)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TasaApertura).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TasaClic).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TipoContenido)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCampaniaMailing>(entity =>
            {
                entity.ToTable("T_CampaniaMailing", "mkt");

                entity.Property(e => e.ActivaValorTiempo)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinExcluirPorEnviadoMismoProgramaGeneralPrincipal).HasColumnType("date");

                entity.Property(e => e.FechaInicioExcluirPorEnviadoMismoProgramaGeneralPrincipal).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalValorTiempo)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SecundarioValorTiempo)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCampaniaMailingDetalle>(entity =>
            {
                entity.ToTable("T_CampaniaMailingDetalle", "mkt");

                entity.HasIndex(e => e.IdCampaniaMailing)
                    .HasName("INC_T_CampaniaMailingDetalle_PorIdCampaniaMailing");

                entity.Property(e => e.Campania)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CodMailing)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdHoraEnvio).HasColumnName("IdHora_Envio");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaMailingNavigation)
                    .WithMany(p => p.TCampaniaMailingDetalle)
                    .HasForeignKey(d => d.IdCampaniaMailing)
                    .HasConstraintName("FK_T_CampaniaMailingDetalle_T_CampaniaMailing");
            });

            modelBuilder.Entity<TCampaniaMailingDetallePrograma>(entity =>
            {
                entity.ToTable("T_CampaniaMailingDetallePrograma", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaMailingDetalleNavigation)
                    .WithMany(p => p.TCampaniaMailingDetallePrograma)
                    .HasForeignKey(d => d.IdCampaniaMailingDetalle)
                    .HasConstraintName("FK_T_CampaniaMailingDetallePrograma_T_CampaniaMailingDetalle");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TCampaniaMailingDetallePrograma)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_CampaniaMailingDetallePrograma_T_PGeneral");
            });

            modelBuilder.Entity<TCampaniaMailingTop5>(entity =>
            {
                entity.ToTable("T_CampaniaMailingTop5", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCampaniaMailingValorTipo>(entity =>
            {
                entity.ToTable("T_CampaniaMailingValorTipo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaMailingNavigation)
                    .WithMany(p => p.TCampaniaMailingValorTipo)
                    .HasForeignKey(d => d.IdCampaniaMailing)
                    .HasConstraintName("FK_T_CampaniaMailingValorTipo_T_CampaniaMailing");
            });

            modelBuilder.Entity<TCampoContacto>(entity =>
            {
                entity.ToTable("T_CampoContacto", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procedimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoControl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCampoEtiqueta>(entity =>
            {
                entity.ToTable("T_CampoEtiqueta", "mkt");

                entity.Property(e => e.Campo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSubAreaCampoEtiquetaNavigation)
                    .WithMany(p => p.TCampoEtiqueta)
                    .HasForeignKey(d => d.IdSubAreaCampoEtiqueta)
                    .HasConstraintName("FK_T_CampoEtiqueta_T_SubAreaCampoEtiqueta");
            });

            modelBuilder.Entity<TCampoFormulario>(entity =>
            {
                entity.ToTable("T_CampoFormulario", "mkt");

                entity.Property(e => e.Campo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCantidadInteraccion>(entity =>
            {
                entity.ToTable("T_CantidadInteraccion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCargo>(entity =>
            {
                entity.ToTable("T_Cargo", "pla");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCarreraProfesional>(entity =>
            {
                entity.ToTable("T_CarreraProfesional", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCategoriaAsesor>(entity =>
            {
                entity.ToTable("T_CategoriaAsesor", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCategoriaCiudad>(entity =>
            {
                entity.ToTable("T_CategoriaCiudad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TroncalCompleto)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCategoriaIndicador>(entity =>
            {
                entity.ToTable("T_CategoriaIndicador", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCategoriaInteraccion>(entity =>
            {
                entity.ToTable("T_CategoriaInteraccion", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCategoriaObjetoFiltro>(entity =>
            {
                entity.ToTable("T_CategoriaObjetoFiltro", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreObjeto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCategoriaOrigen>(entity =>
            {
                entity.ToTable("T_CategoriaOrigen", "mkt");

                entity.Property(e => e.CodigoOrigen)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCategoriaPreguntaEvaluacion>(entity =>
            {
                entity.ToTable("T_CategoriaPreguntaEvaluacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCategoriaPrograma>(entity =>
            {
                entity.ToTable("T_CategoriaPrograma", "pla");

                entity.Property(e => e.Categoria)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCategoriaTipoMoodle>(entity =>
            {
                entity.ToTable("T_CategoriaTipo_Moodle", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdTipoCapacitacionMoodle)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCategoria)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCausa>(entity =>
            {
                entity.ToTable("T_Causa", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCausaCliente>(entity =>
            {
                entity.ToTable("T_CausaCliente", "com");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCentil>(entity =>
            {
                entity.ToTable("T_Centil", "gp");

                entity.Property(e => e.Centil).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.CentilLetra).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorMaximo).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ValorMinimo).HasColumnType("decimal(14, 4)");
            });

            modelBuilder.Entity<TCentralLlamada>(entity =>
            {
                entity.ToTable("T_CentralLlamada", "com");

                entity.HasIndex(e => new { e.TelefonoDestino, e.Usuario })
                    .HasName("INC_T_CentralLlamada_PorUsuario_PorTelefonoDestino");

                entity.HasIndex(e => new { e.DuracionContesto, e.DuracionTimbrado, e.EstadoLlamada, e.Fecha, e.Id })
                    .HasName("INC_T_CentralLlamada_PorFecha_PorId");

                entity.Property(e => e.Anexo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Area)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Central)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatriculaCabecera)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoLlamada)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RefLlamada)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TelefonoDestino)
                    .HasColumnName("Telefono_Destino")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCentralLlamadaDireccion>(entity =>
            {
                entity.ToTable("T_CentralLlamadaDireccion", "conf");

                entity.Property(e => e.DireccionIp)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCentroCosto>(entity =>
            {
                entity.ToTable("T_CentroCosto", "pla");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Icpftotales).HasColumnName("ICPFTotales");

                entity.Property(e => e.IdAreaCc)
                    .HasColumnName("IdAreaCC")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdPgeneral)
                    .IsRequired()
                    .HasColumnName("IdPGeneral")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ismtotales).HasColumnName("ISMTotales");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCentroCostoCertificado>(entity =>
            {
                entity.ToTable("T_CentroCostoCertificado", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCentroEstudio>(entity =>
            {
                entity.ToTable("T_CentroEstudio", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificacion>(entity =>
            {
                entity.ToTable("T_Certificacion", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(900)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificacionPgeneral>(entity =>
            {
                entity.ToTable("T_CertificacionPGeneral", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificacionTipo>(entity =>
            {
                entity.ToTable("T_CertificacionTipo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoBrochure>(entity =>
            {
                entity.ToTable("T_CertificadoBrochure", "ope");

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NombreEnCertificado)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoDetalle>(entity =>
            {
                entity.ToTable("T_CertificadoDetalle", "ope");

                entity.Property(e => e.CodigoCertificado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContentType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionEntrega)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.EscalaCalificacion).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEmision).HasColumnType("date");

                entity.Property(e => e.FechaEnvio).HasColumnType("date");

                entity.Property(e => e.FechaInicio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcion).HasColumnType("date");

                entity.Property(e => e.FechaTermino).HasColumnType("date");

                entity.Property(e => e.FechaUltimoEnvioAlumno).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivoFrontal)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivoFrontalImpresion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivoReverso)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivoReversoImpresion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Nota).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaArchivo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoDetallePartner>(entity =>
            {
                entity.ToTable("T_CertificadoDetallePartner", "ope");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ContentType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoEnvio>(entity =>
            {
                entity.ToTable("T_CertificadoEnvio", "ope");

                entity.Property(e => e.CodigoSeguimiento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoSeguimientoPartner)
                    .HasColumnName("CodigoSeguimiento_Partner")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("date");

                entity.Property(e => e.FechaEnvioPartner)
                    .HasColumnName("FechaEnvio_Partner")
                    .HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcion).HasColumnType("date");

                entity.Property(e => e.FechaRecepcionPartner)
                    .HasColumnName("FechaRecepcion_Partner")
                    .HasColumnType("date");

                entity.Property(e => e.IdCertificadoFormaEntregaPartner).HasColumnName("IdCertificadoFormaEntrega_Partner");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartner)
                    .HasColumnName("Observaciones_Partner")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoEnvioLog>(entity =>
            {
                entity.ToTable("T_CertificadoEnvioLog", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoFormaEntrega>(entity =>
            {
                entity.ToTable("T_CertificadoFormaEntrega", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoGeneradoAutomatico>(entity =>
            {
                entity.ToTable("T_CertificadoGeneradoAutomatico", "pla");

                entity.Property(e => e.ContentType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEmision).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoGeneradoAutomaticoContenido>(entity =>
            {
                entity.ToTable("T_CertificadoGeneradoAutomaticoContenido", "pla");

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPartner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoQr)
                    .HasColumnName("CodigoQR")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CronogramaAsistencia).IsUnicode(false);

                entity.Property(e => e.CronogramaNota).IsUnicode(false);

                entity.Property(e => e.EstructuraCurricular).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEmisionCertificado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinCapacitacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaInicioCapacitacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreAlumno)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCentroCosto)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoPartnerComplemento>(entity =>
            {
                entity.ToTable("T_CertificadoPartnerComplemento", "ope");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FrontalCentral)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FrontalInferiorIzquierda)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.MencionEnCertificado)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PosteriorCentral)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.PosteriorInferiorIzquierda)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoReversionEmision>(entity =>
            {
                entity.ToTable("T_CertificadoReversionEmision", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoSolicitud>(entity =>
            {
                entity.ToTable("T_CertificadoSolicitud", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreBeneficioDocumento)
                    .HasMaxLength(555)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoTipo>(entity =>
            {
                entity.ToTable("T_CertificadoTipo", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCertificadoTipoPrograma>(entity =>
            {
                entity.ToTable("T_CertificadoTipoPrograma", "ope");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreProgramaCertificado)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TChatDetalleIntegra>(entity =>
            {
                entity.ToTable("T_ChatDetalleIntegra", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdRemitente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Mensaje)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.NombreRemitente)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TChatDetalleIntegraArchivo>(entity =>
            {
                entity.ToTable("T_ChatDetalleIntegraArchivo", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MimeType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaArchivo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TChatIntegraHistorialAsesor>(entity =>
            {
                entity.ToTable("T_ChatIntegraHistorialAsesor", "com");

                entity.Property(e => e.FechaAsignacion).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TChatZopim>(entity =>
            {
                entity.ToTable("T_ChatZopim", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Filtro).IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Script)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCiudad>(entity =>
            {
                entity.ToTable("T_Ciudad", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCiudadCodigoAeropuerto>(entity =>
            {
                entity.ToTable("T_CiudadCodigoAeropuerto", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TClasificacionPersona>(entity =>
            {
                entity.ToTable("T_ClasificacionPersona", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonaNavigation)
                    .WithMany(p => p.TClasificacionPersona)
                    .HasForeignKey(d => d.IdPersona)
                    .HasConstraintName("FK_T_ClasificacionPersona_T_Persona");

                entity.HasOne(d => d.IdTipoPersonaNavigation)
                    .WithMany(p => p.TClasificacionPersona)
                    .HasForeignKey(d => d.IdTipoPersona)
                    .HasConstraintName("FK_T_ClasificacionPersona_T_TipoPersona");
            });

            modelBuilder.Entity<TClasificacionPreguntaEvaluacion>(entity =>
            {
                entity.ToTable("T_ClasificacionPreguntaEvaluacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TClasificacionUbicacionDocente>(entity =>
            {
                entity.ToTable("T_ClasificacionUbicacionDocente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCloudflareFirmaVideo>(entity =>
            {
                entity.ToTable("T_CloudflareFirmaVideo", "pla");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.JsonEnvio).IsRequired();

                entity.Property(e => e.JsonRespuesta).IsRequired();

                entity.Property(e => e.Modified).HasColumnType("datetime");

                entity.Property(e => e.RequireSignedUrls).HasColumnName("RequireSignedURLs");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Thumbnail)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Uid)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VideoId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCloudflareFirmaVideoDominioAsignado>(entity =>
            {
                entity.ToTable("T_CloudflareFirmaVideoDominioAsignado", "pla");

                entity.Property(e => e.Dominio)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCloudflareLlaveGenerada>(entity =>
            {
                entity.ToTable("T_CloudflareLlaveGenerada", "pla");

                entity.Property(e => e.Created)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.JsonRespuesta).IsRequired();

                entity.Property(e => e.KeyId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.KeyJwk)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KeyPem)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCloudflareTokenVideo>(entity =>
            {
                entity.ToTable("T_CloudflareTokenVideo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaExp)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaNbf)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.JsonEnvio)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.KeyId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.KeyPem)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TokenGenerado)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VideoId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCloudflareUsuarioLlave>(entity =>
            {
                entity.ToTable("T_CloudflareUsuarioLlave", "pla");

                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuthEmail)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.AuthKey)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCodigoCiiuIndustria>(entity =>
            {
                entity.ToTable("T_CodigoCiiuIndustria", "pla");

                entity.Property(e => e.Ciiu)
                    .IsRequired()
                    .HasColumnName("CIIU")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TComercialTipoPersonal>(entity =>
            {
                entity.ToTable("T_ComercialTipoPersonal", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TComisionEstadoPago>(entity =>
            {
                entity.ToTable("T_ComisionEstadoPago", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TComisionMontoPago>(entity =>
            {
                entity.ToTable("T_ComisionMontoPago", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MontoComision).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdComercialTipoPersonalNavigation)
                    .WithMany(p => p.TComisionMontoPago)
                    .HasForeignKey(d => d.IdComercialTipoPersonal)
                    .HasConstraintName("FK_T_ComisionMontoPago_T_ComercialTipoPersonal");

                entity.HasOne(d => d.IdComisionEstadoPagoNavigation)
                    .WithMany(p => p.TComisionMontoPago)
                    .HasForeignKey(d => d.IdComisionEstadoPago)
                    .HasConstraintName("FK_T_ComisionMontoPago_T_ComisionEstadoPago");

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TComisionMontoPago)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FK_T_ComisionMontoPago_T_MatriculaCabecera");

                entity.HasOne(d => d.IdMonedaNavigation)
                    .WithMany(p => p.TComisionMontoPago)
                    .HasForeignKey(d => d.IdMoneda)
                    .HasConstraintName("FK_T_ComisionMontoPago_T_Moneda");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TComisionMontoPago)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_ComisionMontoPago_T_Personal");
            });

            modelBuilder.Entity<TComisionPersonal>(entity =>
            {
                entity.ToTable("T_ComisionPersonal", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdComisionTipoNavigation)
                    .WithMany(p => p.TComisionPersonal)
                    .HasForeignKey(d => d.IdComisionTipo)
                    .HasConstraintName("FK_T_ComisionPersonal_T_ComisionTipo");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TComisionPersonal)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_ComisionPersonal_T_Personal");
            });

            modelBuilder.Entity<TComisionTipo>(entity =>
            {
                entity.ToTable("T_ComisionTipo", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(7, 4)");
            });

            modelBuilder.Entity<TCompetenciaTecnica>(entity =>
            {
                entity.ToTable("T_CompetenciaTecnica", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTipoCompetenciaTecnicaNavigation)
                    .WithMany(p => p.TCompetenciaTecnica)
                    .HasForeignKey(d => d.IdTipoCompetenciaTecnica)
                    .HasConstraintName("FK_T_CompetenciaTecnica_T_TipoCompetenciaTecnica");
            });

            modelBuilder.Entity<TCompetidor>(entity =>
            {
                entity.ToTable("T_Competidor", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCompetidorCapacitacion>(entity =>
            {
                entity.ToTable("T_CompetidorCapacitacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCompetidorCertificacion>(entity =>
            {
                entity.ToTable("T_CompetidorCertificacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCompetidorMembresia>(entity =>
            {
                entity.ToTable("T_CompetidorMembresia", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCompetidorProgramaRelacionado>(entity =>
            {
                entity.ToTable("T_CompetidorProgramaRelacionado", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCompetidorTipoModalidad>(entity =>
            {
                entity.ToTable("T_CompetidorTipoModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCompetidorVentajaDesventaja>(entity =>
            {
                entity.ToTable("T_CompetidorVentajaDesventaja", "pla");

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TComprobantePago>(entity =>
            {
                entity.ToTable("T_ComprobantePago", "fin");

                entity.Property(e => e.AjusteMontoBruto).HasColumnType("decimal(2, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEmision).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramacion).HasColumnType("date");

                entity.Property(e => e.FechaVencimientoReprogramacion).HasColumnType("date");

                entity.Property(e => e.MontoBruto).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.MontoIgv).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.MontoInafecto).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.MontoNeto).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.NumeroComprobante)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.OtraTazaContribucion).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.PorcentajeIgv).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SerieComprobante)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TComprobantePagoEstado>(entity =>
            {
                entity.ToTable("T_ComprobantePagoEstado", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TComprobantePagoOportunidad>(entity =>
            {
                entity.ToTable("T_ComprobantePagoOportunidad", "fin");

                entity.Property(e => e.Apellidos)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Celular)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comentario).IsUnicode(false);

                entity.Property(e => e.Correo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Dni)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreCiudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePais)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreRazonSocial)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nombres)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NroDocumento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoComprobante)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TComprobantePagoOportunidad)
                    .HasForeignKey(d => d.IdOportunidad)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ComprobantePagoOportunidad_T_Oportunidad");
            });

            modelBuilder.Entity<TComprobantePagoPorFur>(entity =>
            {
                entity.ToTable("T_ComprobantePagoPorFur", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Monto).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdComprobantePagoNavigation)
                    .WithMany(p => p.TComprobantePagoPorFur)
                    .HasForeignKey(d => d.IdComprobantePago)
                    .HasConstraintName("FK_T_ComprobantePagoPorFur_T_ComprobantePago");

                entity.HasOne(d => d.IdFurNavigation)
                    .WithMany(p => p.TComprobantePagoPorFur)
                    .HasForeignKey(d => d.IdFur)
                    .HasConstraintName("FK_T_ComprobantePagoPorFur_T_Fur");
            });

            modelBuilder.Entity<TCompromisoAlumno>(entity =>
            {
                entity.ToTable("T_CompromisoAlumno", "fin");

                entity.Property(e => e.FechaCompromiso).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaGeneracionCompromiso).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Monto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCondicionOcurrenciaLlamada>(entity =>
            {
                entity.ToTable("T_CondicionOcurrenciaLLamada", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCondicionPago>(entity =>
            {
                entity.ToTable("T_CondicionPago", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCondicionTipoPago>(entity =>
            {
                entity.ToTable("T_CondicionTipoPago", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConectorOcurrenciaLlamada>(entity =>
            {
                entity.ToTable("T_ConectorOcurrenciaLlamada", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracion>(entity =>
            {
                entity.ToTable("T_Configuracion", "conf");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionAnexoOpenVox>(entity =>
            {
                entity.ToTable("T_ConfiguracionAnexoOpenVox", "com");

                entity.HasIndex(e => new { e.Estado, e.IdPais, e.NumeroSim, e.Prefijo, e.Puerto, e.Servidor, e.Tipo, e.Anexo })
                    .HasName("INC_T_ConfiguracionAnexoOpenVox_PorAnexo");

                entity.Property(e => e.Anexo)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NumeroSim)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Prefijo)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.Puerto)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Servidor)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionAsignacionCoordinadorOportunidadOperaciones>(entity =>
            {
                entity.ToTable("T_ConfiguracionAsignacionCoordinadorOportunidadOperaciones", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionAsignacionCoordinadorOportunidadOperacionesDetalle>(entity =>
            {
                entity.ToTable("T_ConfiguracionAsignacionCoordinadorOportunidadOperacionesDetalle", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionAsignacionEvaluacion>(entity =>
            {
                entity.ToTable("T_ConfiguracionAsignacionEvaluacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionAsignacionExamen>(entity =>
            {
                entity.ToTable("T_ConfiguracionAsignacionExamen", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionBeneficioProgramaGeneral>(entity =>
            {
                entity.ToTable("T_ConfiguracionBeneficioProgramaGeneral", "pla");

                entity.Property(e => e.DetallesAdicionales).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.ProcesoSolicitud).IsUnicode(false);

                entity.Property(e => e.Requisitos).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TConfiguracionBeneficioProgramaGeneral)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ConfiguracionBeneficioProgramaGeneral_T_PGeneral");
            });

            modelBuilder.Entity<TConfiguracionBeneficioProgramaGeneralDatoAdicional>(entity =>
            {
                entity.ToTable("T_ConfiguracionBeneficioProgramaGeneralDatoAdicional", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdConfiguracionBeneficioPgeneral).HasColumnName("IdConfiguracionBeneficioPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdBeneficioDatoAdicionalNavigation)
                    .WithMany(p => p.TConfiguracionBeneficioProgramaGeneralDatoAdicional)
                    .HasForeignKey(d => d.IdBeneficioDatoAdicional)
                    .HasConstraintName("FK_T_ConfiguracionBeneficioProgramaGeneralDatoAdicional_T_BeneficioDatoAdicional");

                entity.HasOne(d => d.IdConfiguracionBeneficioPgeneralNavigation)
                    .WithMany(p => p.TConfiguracionBeneficioProgramaGeneralDatoAdicional)
                    .HasForeignKey(d => d.IdConfiguracionBeneficioPgeneral)
                    .HasConstraintName("FK_T_ConfiguracionBeneficioProgramaGeneralDatoAdicional_T_ConfiguracionBeneficioProgramaGeneral");
            });

            modelBuilder.Entity<TConfiguracionBeneficioProgramaGeneralEstadoMatricula>(entity =>
            {
                entity.ToTable("T_ConfiguracionBeneficioProgramaGeneralEstadoMatricula", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdConfiguracionBeneficioPgneral).HasColumnName("IdConfiguracionBeneficioPGneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionBeneficioProgramaGeneralPais>(entity =>
            {
                entity.ToTable("T_ConfiguracionBeneficioProgramaGeneralPais", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdConfiguracionBeneficioPgneral).HasColumnName("IdConfiguracionBeneficioPGneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionBeneficioProgramaGeneralSubEstado>(entity =>
            {
                entity.ToTable("T_ConfiguracionBeneficioProgramaGeneralSubEstado", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdConfiguracionBeneficioPgneral).HasColumnName("IdConfiguracionBeneficioPGneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionBeneficioProgramaGeneralVersion>(entity =>
            {
                entity.ToTable("T_ConfiguracionBeneficioProgramaGeneralVersion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdConfiguracionBeneficioPgneral).HasColumnName("IdConfiguracionBeneficioPGneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConfiguracionBeneficioPgneralNavigation)
                    .WithMany(p => p.TConfiguracionBeneficioProgramaGeneralVersion)
                    .HasForeignKey(d => d.IdConfiguracionBeneficioPgneral)
                    .HasConstraintName("FKT_ConfiguracionBeneficioProgramaGeneralVersion_T_ConfiguracionBeneficioProgramaGeneral");

                entity.HasOne(d => d.IdVersionProgramaNavigation)
                    .WithMany(p => p.TConfiguracionBeneficioProgramaGeneralVersion)
                    .HasForeignKey(d => d.IdVersionPrograma)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ConfiguracionBeneficioProgramaGeneralVersion_T_VersionPrograma");
            });

            modelBuilder.Entity<TConfiguracionBic>(entity =>
            {
                entity.ToTable("T_ConfiguracionBIC", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionBicdetalle>(entity =>
            {
                entity.ToTable("T_ConfiguracionBICDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdConfiguracionBic).HasColumnName("IdConfiguracionBIC");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionCerrarBnc>(entity =>
            {
                entity.ToTable("T_ConfiguracionCerrarBnc", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionChat>(entity =>
            {
                entity.ToTable("T_ConfiguracionChat", "mkt");

                entity.Property(e => e.ColorFondoAsesor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoEmpezarChat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoHeader)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoInteresado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoAsesor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoEmpezarChat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoHeader)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoInteresado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IconoAsesor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IconoChat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IconoInteresado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreConfiguracion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoChatFuente)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoFormularioFuente)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoHeader)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoHeaderFuente)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoHeaderNotificacion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoInicial)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoOffline)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TextoSatisfaccionOffline)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionCreacion>(entity =>
            {
                entity.ToTable("T_ConfiguracionCreacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPespecificoNavigation)
                    .WithMany(p => p.TConfiguracionCreacion)
                    .HasForeignKey(d => d.IdPespecifico)
                    .HasConstraintName("FK_T_ConfiguracionCreacion_T_PEspecifico");
            });

            modelBuilder.Entity<TConfiguracionDatoRemarketing>(entity =>
            {
                entity.ToTable("T_ConfiguracionDatoRemarketing", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("date");

                entity.Property(e => e.FechaInicio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionDatoRemarketingCategoriaOrigen>(entity =>
            {
                entity.ToTable("T_ConfiguracionDatoRemarketingCategoriaOrigen", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionDatoRemarketingProbabilidadRegistro>(entity =>
            {
                entity.ToTable("T_ConfiguracionDatoRemarketingProbabilidadRegistro", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionDatoRemarketingTipoCategoriaOrigen>(entity =>
            {
                entity.ToTable("T_ConfiguracionDatoRemarketingTipoCategoriaOrigen", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionDatoRemarketingTipoDato>(entity =>
            {
                entity.ToTable("T_ConfiguracionDatoRemarketingTipoDato", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionDiscador>(entity =>
            {
                entity.ToTable("T_ConfiguracionDiscador", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionEnvioAutomatico>(entity =>
            {
                entity.ToTable("T_ConfiguracionEnvioAutomatico", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEstadoDestino).HasColumnName("IdEstado_Destino");

                entity.Property(e => e.IdEstadoInicial).HasColumnName("IdEstado_Inicial");

                entity.Property(e => e.IdSubEstadoDestino).HasColumnName("IdSubEstado_Destino");

                entity.Property(e => e.IdSubEstadoInicial).HasColumnName("IdSubEstado_Inicial");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionEnvioAutomaticoDetalle>(entity =>
            {
                entity.ToTable("T_ConfiguracionEnvioAutomaticoDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionEnvioMailing>(entity =>
            {
                entity.ToTable("T_ConfiguracionEnvioMailing", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionEnvioMailingDetalle>(entity =>
            {
                entity.ToTable("T_ConfiguracionEnvioMailingDetalle", "mkt");

                entity.Property(e => e.Asunto)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CuerpoHtml)
                    .IsRequired()
                    .HasColumnName("CuerpoHTML")
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MensajeError)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConfiguracionEnvioMailingNavigation)
                    .WithMany(p => p.TConfiguracionEnvioMailingDetalle)
                    .HasForeignKey(d => d.IdConfiguracionEnvioMailing)
                    .HasConstraintName("FK_T_ConfiguracionEnvioMailingDetalle_T_ConfiguracionEnvioMailingDetalle");
            });

            modelBuilder.Entity<TConfiguracionFija>(entity =>
            {
                entity.ToTable("T_ConfiguracionFija", "conf");

                entity.HasIndex(e => e.Codigo)
                    .HasName("UC_T_ConfiguracionFija_PorCodigo")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreColumna)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTabla)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoDato)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionHorarioMarcacion>(entity =>
            {
                entity.ToTable("T_ConfiguracionHorarioMarcacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.HoraFin).HasColumnType("time(3)");

                entity.Property(e => e.HoraInicio).HasColumnType("time(3)");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionHorarioMarcacionGrupo>(entity =>
            {
                entity.ToTable("T_ConfiguracionHorarioMarcacionGrupo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConfiguracionHorarioMarcacionNavigation)
                    .WithMany(p => p.TConfiguracionHorarioMarcacionGrupo)
                    .HasForeignKey(d => d.IdConfiguracionHorarioMarcacion)
                    .HasConstraintName("FK_T_ConfiguracionHorarioMarcacionGrupo_T_ConfiguracionHorarioMarcacion");

                entity.HasOne(d => d.IdHorarioGrupoPersonalNavigation)
                    .WithMany(p => p.TConfiguracionHorarioMarcacionGrupo)
                    .HasForeignKey(d => d.IdHorarioGrupoPersonal)
                    .HasConstraintName("FK_T_ConfiguracionHorarioMarcacionGrupo_T_HorarioGrupoPersonal");
            });

            modelBuilder.Entity<TConfiguracionInvitacion>(entity =>
            {
                entity.ToTable("T_ConfiguracionInvitacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConfiguracionCreacionNavigation)
                    .WithMany(p => p.TConfiguracionInvitacion)
                    .HasForeignKey(d => d.IdConfiguracionCreacion)
                    .HasConstraintName("FK_T_ConfiguracionInvitacion_T_ConfiguracionCreacion");

                entity.HasOne(d => d.IdPlantillaNavigation)
                    .WithMany(p => p.TConfiguracionInvitacion)
                    .HasForeignKey(d => d.IdPlantilla)
                    .HasConstraintName("FK_T_ConfiguracionInvitacion_T_Plantilla_PW");
            });

            modelBuilder.Entity<TConfiguracionLlamadaOcurrencia>(entity =>
            {
                entity.ToTable("T_ConfiguracionLlamadaOcurrencia", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCondicionOcurrenciaLlamada).HasColumnName("IdCondicionOcurrenciaLLamada");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionLlamadaOcurrenciaAlterno>(entity =>
            {
                entity.ToTable("T_ConfiguracionLlamadaOcurrenciaAlterno", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCondicionOcurrenciaLlamada).HasColumnName("IdCondicionOcurrenciaLLamada");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionMarcadorMensaje>(entity =>
            {
                entity.ToTable("T_ConfiguracionMarcadorMensaje", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionPlanilla>(entity =>
            {
                entity.ToTable("T_ConfiguracionPlanilla", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionPlanillaFechas>(entity =>
            {
                entity.ToTable("T_ConfiguracionPlanillaFechas", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProceso).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoReal).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionRutinaBncObsoleto>(entity =>
            {
                entity.ToTable("T_ConfiguracionRutinaBncObsoleto", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdOcurrenciaDestino).HasColumnName("IdOcurrencia_Destino");

                entity.Property(e => e.IdPersonalCorreoNoExistente).HasColumnName("IdPersonal_CorreoNoExistente");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionRutinaBncObsoletoCategoriaOrigen>(entity =>
            {
                entity.ToTable("T_ConfiguracionRutinaBncObsoletoCategoriaOrigen", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionRutinaBncObsoletoTipoDato>(entity =>
            {
                entity.ToTable("T_ConfiguracionRutinaBncObsoletoTipoDato", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionTipoMarcacion>(entity =>
            {
                entity.ToTable("T_ConfiguracionTipoMarcacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.HoraFin).HasColumnType("time(3)");

                entity.Property(e => e.HoraInicio).HasColumnType("time(3)");

                entity.Property(e => e.NombreBoton)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfiguracionWebinar>(entity =>
            {
                entity.ToTable("T_ConfiguracionWebinar", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConfigurarEvaluacionTrabajo>(entity =>
            {
                entity.ToTable("T_ConfigurarEvaluacionTrabajo", "pla");

                entity.Property(e => e.ArchivoCarpeta)
                    .HasMaxLength(750)
                    .IsUnicode(false);

                entity.Property(e => e.ArchivoNombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(750);

                entity.Property(e => e.DescripcionPregunta).HasMaxLength(750);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDocumentoPwNavigation)
                    .WithMany(p => p.TConfigurarEvaluacionTrabajo)
                    .HasForeignKey(d => d.IdDocumentoPw)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ConfigurarEvaluacionTrabajo_T_Documento_PW");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TConfigurarEvaluacionTrabajo)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ConfigurarEvaluacionTrabajo_T_PGeneral");

                entity.HasOne(d => d.IdTipoEvaluacionTrabajoNavigation)
                    .WithMany(p => p.TConfigurarEvaluacionTrabajo)
                    .HasForeignKey(d => d.IdTipoEvaluacionTrabajo)
                    .HasConstraintName("FK_T_ConfigurarEvaluacionTrabajo_T_TipoEvaluacionTrabajo");
            });

            modelBuilder.Entity<TConfigurarExamenPrograma>(entity =>
            {
                entity.ToTable("T_ConfigurarExamenPrograma", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TConfigurarExamenPrograma)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ConfigurarExamenPrograma_T_PGeneral");

                entity.HasOne(d => d.IdPreguntaCategoriaNavigation)
                    .WithMany(p => p.TConfigurarExamenPrograma)
                    .HasForeignKey(d => d.IdPreguntaCategoria)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ConfigurarExamenPrograma_T_PreguntaCategoria");

                entity.HasOne(d => d.IdSeccionPwNavigation)
                    .WithMany(p => p.TConfigurarExamenPrograma)
                    .HasForeignKey(d => d.IdSeccionPw)
                    .HasConstraintName("FK_T_ConfigurarExamenPrograma_T_Seccion_PW");
            });

            modelBuilder.Entity<TConfigurarExamenProgramaPregunta>(entity =>
            {
                entity.ToTable("T_ConfigurarExamenProgramaPregunta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConfigurarExamenProgramaNavigation)
                    .WithMany(p => p.TConfigurarExamenProgramaPregunta)
                    .HasForeignKey(d => d.IdConfigurarExamenPrograma)
                    .HasConstraintName("FK_T_ConfigurarExamenProgramaPregunta_T_ConfigurarExamenPrograma");

                entity.HasOne(d => d.IdPreguntaNavigation)
                    .WithMany(p => p.TConfigurarExamenProgramaPregunta)
                    .HasForeignKey(d => d.IdPregunta)
                    .HasConstraintName("FK_T_ConfigurarExamenProgramaPregunta_T_Pregunta");
            });

            modelBuilder.Entity<TConfigurarExamenesEncuestasEstructura>(entity =>
            {
                entity.ToTable("T_ConfigurarExamenesEncuestasEstructura", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdExamenNavigation)
                    .WithMany(p => p.TConfigurarExamenesEncuestasEstructura)
                    .HasForeignKey(d => d.IdExamen)
                    .HasConstraintName("FK_T_ConfigurarExamenesEncuestasEstructura_T_Examen");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TConfigurarExamenesEncuestasEstructura)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ConfigurarExamenesEncuestasEstructura_T_PGeneral");

                entity.HasOne(d => d.IdSeccionPwNavigation)
                    .WithMany(p => p.TConfigurarExamenesEncuestasEstructura)
                    .HasForeignKey(d => d.IdSeccionPw)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ConfigurarExamenesEncuestasEstructura_T_Seccion_PW");
            });

            modelBuilder.Entity<TConfigurarVideoPrograma>(entity =>
            {
                entity.ToTable("T_ConfigurarVideoPrograma", "pla");

                entity.HasIndex(e => new { e.NumeroFila, e.IdPgeneral, e.Estado })
                    .HasName("INC_T_ConfigurarVideoPrograma_PorIdPGeneral_PorEstado");

                entity.HasIndex(e => new { e.FechaCreacion, e.IdDocumentoSeccionPw, e.IdPgeneral, e.NumeroFila, e.TotalMinutos })
                    .HasName("INC_T_ConfigurarVideoPrograma_PorTotalMinutos");

                entity.Property(e => e.Archivo)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.ImagenDiapositivaAlto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImagenDiapositivaAncho)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImagenDiapositivaNombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ImagenVideoAlto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImagenVideoAncho)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImagenVideoNombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NroDiapositivas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Token).HasMaxLength(4000);

                entity.Property(e => e.TotalMinutos)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VideoId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.VideoIdBrightcove).HasMaxLength(150);

                entity.HasOne(d => d.IdDocumentoSeccionPwNavigation)
                    .WithMany(p => p.TConfigurarVideoPrograma)
                    .HasForeignKey(d => d.IdDocumentoSeccionPw)
                    .HasConstraintName("FK_T_ConfigurarVideoPrograma_T_DocumentoSeccion_PW");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TConfigurarVideoPrograma)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ConfigurarVideoPrograma_T_PGeneral");
            });

            modelBuilder.Entity<TConfigurarWebinar>(entity =>
            {
                entity.ToTable("T_ConfigurarWebinar", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdOperadorComparacionAvance).HasColumnName("IdOperadorComparacion_Avance");

                entity.Property(e => e.IdOperadorComparacionPromedio).HasColumnName("IdOperadorComparacion_Promedio");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPespecificoPadre).HasColumnName("IdPEspecifico_Padre");

                entity.Property(e => e.Modalidad)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAvanceOpc).HasColumnName("ValorAVanceOpc");

                entity.HasOne(d => d.IdPespecificoNavigation)
                    .WithMany(p => p.TConfigurarWebinar)
                    .HasForeignKey(d => d.IdPespecifico)
                    .HasConstraintName("FK_T_ConfigurarWebinar_T_PEspecifico");
            });

            modelBuilder.Entity<TConfirmacionWebinar>(entity =>
            {
                entity.ToTable("T_ConfirmacionWebinar", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecificoSesion).HasColumnName("IdPEspecificoSesion");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCongelamientoPespecificoEsquemaEvaluacionDetalleMatriculaAlumno>(entity =>
            {
                entity.ToTable("T_CongelamientoPEspecificoEsquemaEvaluacionDetalleMatriculaAlumno", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCongelamientoPespecificoEsquemaEvaluacionMatriculaAlumno).HasColumnName("IdCongelamientoPEspecificoEsquemaEvaluacionMatriculaAlumno");

                entity.Property(e => e.NombreEsquemaDetalle)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlArchivoInstrucciones)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConjuntoAnuncio>(entity =>
            {
                entity.ToTable("T_ConjuntoAnuncio", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_ConjuntoAnuncio_PorIdMigracion");

                entity.HasIndex(e => new { e.Nombre, e.IdConjuntoAnuncioFacebook })
                    .HasName("INC_T_ConjuntoAnuncio_PorIdConjuntoAnuncio_Facebook");

                entity.HasIndex(e => new { e.IdMigracion, e.Nombre, e.Id })
                    .HasName("INC_T_ConjuntoAnuncio_PorId");

                entity.Property(e => e.Adicional).IsUnicode(false);

                entity.Property(e => e.DiaEnvio)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.EnlaceFormulario).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionCampania).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdConjuntoAnuncioFacebook)
                    .HasColumnName("IdConjuntoAnuncio_Facebook")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(325)
                    .IsUnicode(false);

                entity.Property(e => e.NombreInicial)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroAnuncio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroSemana)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Origen).HasMaxLength(50);

                entity.Property(e => e.Propietario)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoAnuncioFuenteNavigation)
                    .WithMany(p => p.InverseIdConjuntoAnuncioFuenteNavigation)
                    .HasForeignKey(d => d.IdConjuntoAnuncioFuente)
                    .HasConstraintName("FK_T_ConjuntoAnuncio_T_ConjuntoAnuncioFuente");

                entity.HasOne(d => d.IdConjuntoAnuncioTipoObjetivoNavigation)
                    .WithMany(p => p.TConjuntoAnuncio)
                    .HasForeignKey(d => d.IdConjuntoAnuncioTipoObjetivo)
                    .HasConstraintName("FK_T_ConjuntoAnuncio_T_ConjuntoAnuncioTipoObjetivo");

                entity.HasOne(d => d.IdFormularioPlantillaNavigation)
                    .WithMany(p => p.TConjuntoAnuncio)
                    .HasForeignKey(d => d.IdFormularioPlantilla)
                    .HasConstraintName("FK_T_ConjuntoAnuncio_T_FormularioPlantilla");
            });

            modelBuilder.Entity<TConjuntoAnuncioAdword>(entity =>
            {
                entity.ToTable("T_ConjuntoAnuncioAdword", "mkt");

                entity.Property(e => e.ActivoActualizado).HasColumnName("activo_actualizado");

                entity.Property(e => e.CampaignId)
                    .HasColumnName("campaign_id")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCosto).IsUnicode(false);

                entity.Property(e => e.CreatedTime)
                    .HasColumnName("created_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffectiveStatus)
                    .HasColumnName("effective_status")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EsIntegra).HasColumnName("es_integra");

                entity.Property(e => e.EsOtros).HasColumnName("es_otros");

                entity.Property(e => e.EsPublicado).HasColumnName("es_publicado");

                entity.Property(e => e.EsRelacionado).HasColumnName("es_relacionado");

                entity.Property(e => e.EsValidado).HasColumnName("es_validado");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FkCampaniaIntegra).HasColumnName("FK_CampaniaIntegra");

                entity.Property(e => e.IdF)
                    .HasColumnName("id_f")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCampania).IsUnicode(false);

                entity.Property(e => e.OptimizationGoal)
                    .HasColumnName("optimization_goal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.StartTime)
                    .HasColumnName("start_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TieneInsights).HasColumnName("tiene_insights");

                entity.Property(e => e.TipoCampania).HasColumnName("tipo_campania");

                entity.Property(e => e.UpdatedTime)
                    .HasColumnName("updated_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConjuntoAnuncioFacebook>(entity =>
            {
                entity.ToTable("T_ConjuntoAnuncioFacebook", "mkt");

                entity.HasIndex(e => new { e.Estado, e.IdAnuncioFacebook, e.IdCampaniaFacebook })
                    .HasName("INC_T_ConjuntoAnuncioFacebook_PorIdCampaniaFacebook");

                entity.HasIndex(e => new { e.Estado, e.Name, e.IdAnuncioFacebook })
                    .HasName("INC_T_ConjuntoAnuncioFacebook_PorIdAnuncioFacebook");

                entity.HasIndex(e => new { e.IdCampaniaFacebook, e.Name, e.EffectiveStatus, e.Status, e.Estado, e.ConfiguredStatus })
                    .HasName("INC_T_ConjuntoAnuncioFacebook_PorEffectiveStatus_PorStatus_PorEstado_PorConfiguredStatus");

                entity.Property(e => e.BillinEevent)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignId)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCosto).IsUnicode(false);

                entity.Property(e => e.ConfiguredStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.Property(e => e.EffectiveStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdAnuncioFacebook)
                    .HasColumnName("IdAnuncio_Facebook")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(325)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCampania).IsUnicode(false);

                entity.Property(e => e.OptimizationGoal)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedTime).HasColumnType("datetime");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaFacebookNavigation)
                    .WithMany(p => p.TConjuntoAnuncioFacebook)
                    .HasForeignKey(d => d.IdCampaniaFacebook)
                    .HasConstraintName("FK_T_ConjuntoAnuncioFacebook_T_CampaniaFacebook");
            });

            modelBuilder.Entity<TConjuntoAnuncioFuente>(entity =>
            {
                entity.ToTable("T_ConjuntoAnuncioFuente", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConjuntoAnuncioTipoObjetivo>(entity =>
            {
                entity.ToTable("T_ConjuntoAnuncioTipoObjetivo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoAnuncioFuenteNavigation)
                    .WithMany(p => p.TConjuntoAnuncioTipoObjetivo)
                    .HasForeignKey(d => d.IdConjuntoAnuncioFuente)
                    .HasConstraintName("FK_T_ConjuntoAnuncioTipoObjetivo_T_ConjuntoAnuncioFuente");
            });

            modelBuilder.Entity<TConjuntoLista>(entity =>
            {
                entity.ToTable("T_ConjuntoLista", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConjuntoListaDetalle>(entity =>
            {
                entity.ToTable("T_ConjuntoListaDetalle", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoListaNavigation)
                    .WithMany(p => p.TConjuntoListaDetalle)
                    .HasForeignKey(d => d.IdConjuntoLista)
                    .HasConstraintName("FK_T_ConjuntoListaDetalle_T_ConjuntoLista");
            });

            modelBuilder.Entity<TConjuntoListaDetalleValor>(entity =>
            {
                entity.ToTable("T_ConjuntoListaDetalleValor", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCategoriaObjetoFiltroNavigation)
                    .WithMany(p => p.TConjuntoListaDetalleValor)
                    .HasForeignKey(d => d.IdCategoriaObjetoFiltro)
                    .HasConstraintName("FK_T_ConjuntoListaDetalleValor_T_CategoriaObjetoFiltro");

                entity.HasOne(d => d.IdConjuntoListaDetalleNavigation)
                    .WithMany(p => p.TConjuntoListaDetalleValor)
                    .HasForeignKey(d => d.IdConjuntoListaDetalle)
                    .HasConstraintName("FK_T_ConjuntoListaDetalleValor_T_ConjuntoListaDetalle");
            });

            modelBuilder.Entity<TConjuntoListaResultado>(entity =>
            {
                entity.ToTable("T_ConjuntoListaResultado", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoListaDetalleNavigation)
                    .WithMany(p => p.TConjuntoListaResultado)
                    .HasForeignKey(d => d.IdConjuntoListaDetalle)
                    .HasConstraintName("FK_T_ConjuntoListaResultado_T_ConjuntoListaDetalle");
            });

            modelBuilder.Entity<TContactoConfiguracion>(entity =>
            {
                entity.ToTable("T_ContactoConfiguracion", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdTipoDatoRelacionado).HasColumnName("IdTipoDato_Relacionado");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TContadorBic>(entity =>
            {
                entity.ToTable("T_ContadorBic", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TContadorBicHistorico>(entity =>
            {
                entity.ToTable("T_ContadorBicHistorico", "com");

                entity.Property(e => e.FechaActualizado).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalAsignado).HasColumnName("IdPersonal_Asignado");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TContenidoCertificadoIrca>(entity =>
            {
                entity.ToTable("T_ContenidoCertificadoIrca", "ope");

                entity.Property(e => e.CodigoCurso)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCentroCostoIrca).HasColumnName("IdCentroCosto_Irca");

                entity.Property(e => e.NombreCurso)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ResultadoCurso)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TContenidoDatoAdicional>(entity =>
            {
                entity.ToTable("T_ContenidoDatoAdicional", "com");

                entity.Property(e => e.CodigoMatricula)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdBeneficioDatoAdicionalNavigation)
                    .WithMany(p => p.TContenidoDatoAdicional)
                    .HasForeignKey(d => d.IdBeneficioDatoAdicional)
                    .HasConstraintName("FK_T_ContenidoDatoAdicional_T_BeneficioDatoAdicional");

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TContenidoDatoAdicional)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FK_T_ContenidoDatoAdicional_T_MatriculaCabecera");

                entity.HasOne(d => d.IdMatriculaCabeceraBeneficiosNavigation)
                    .WithMany(p => p.TContenidoDatoAdicional)
                    .HasForeignKey(d => d.IdMatriculaCabeceraBeneficios)
                    .HasConstraintName("FK_T_ContenidoDatoAdicional_T_MatriculaCabeceraBeneficios");
            });

            modelBuilder.Entity<TContratoEstado>(entity =>
            {
                entity.ToTable("T_ContratoEstado", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TControlDescargaLlamadaAsterisk>(entity =>
            {
                entity.ToTable("T_ControlDescargaLlamadaAsterisk", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MensajeError).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TControlDoc>(entity =>
            {
                entity.ToTable("T_ControlDoc", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMigracion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TControlDocAlumno>(entity =>
            {
                entity.ToTable("T_ControlDocAlumno", "fin");

                entity.HasIndex(e => new { e.IdCriterioCalificacion, e.IdMatriculaObservacion, e.IdMatriculaCabecera })
                    .HasName("_dta_index_T_ControlDocAlumno_19_1351675863__K2_3_18");

                entity.HasIndex(e => new { e.IdCriterioCalificacion, e.Observaciones, e.IdMatriculaCabecera })
                    .HasName("_dta_index_T_ControlDocAlumno_19_1351675863__K2_3_6");

                entity.Property(e => e.ComisionableEditable)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEntregaDocumento).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMigracion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MontoComisionable).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesComisionable)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PagadoComisionable).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.QuienEntrego)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TControlPantalla>(entity =>
            {
                entity.ToTable("T_ControlPantalla", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoPantalla1).HasColumnName("Tipo_Pantalla1");

                entity.Property(e => e.TipoPantalla3).HasColumnName("Tipo_Pantalla3");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TControlPantallaAsesores>(entity =>
            {
                entity.ToTable("T_ControlPantalla_Asesores", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TControlPantallaCategoriaOrigen>(entity =>
            {
                entity.ToTable("T_ControlPantalla_CategoriaOrigen", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TControlPantallaCentroCosto>(entity =>
            {
                entity.ToTable("T_ControlPantalla_CentroCosto", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TControlPantallaFaseOportunidad>(entity =>
            {
                entity.ToTable("T_ControlPantalla_FaseOportunidad", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TControlPantallaTipoDato>(entity =>
            {
                entity.ToTable("T_ControlPantalla_TipoDato", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TConvalidacionNota>(entity =>
            {
                entity.ToTable("T_ConvalidacionNota", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecificoAnterior).HasColumnName("IdPEspecificoAnterior");

                entity.Property(e => e.IdPespecificoNuevo).HasColumnName("IdPEspecificoNuevo");

                entity.Property(e => e.NombreEvaluacion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nota).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TConvalidacionNota)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FK_T_ConvalidacionNota_T_MatriculaCabecera");

                entity.HasOne(d => d.IdSolicitudOperacionesNavigation)
                    .WithMany(p => p.TConvalidacionNota)
                    .HasForeignKey(d => d.IdSolicitudOperaciones)
                    .HasConstraintName("FK_T_ConvalidacionNota_T_SolicitudOperaciones");
            });

            modelBuilder.Entity<TConvocatoriaPersonal>(entity =>
            {
                entity.ToTable("T_ConvocatoriaPersonal", "gp");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuerpoConvocatoria)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlAviso)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaNavigation)
                    .WithMany(p => p.TConvocatoriaPersonal)
                    .HasForeignKey(d => d.IdArea)
                    .HasConstraintName("FK_T_ConvocatoriaPersonal_T_Area");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TConvocatoriaPersonal)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_ConvocatoriaPersonal_T_Personal");

                entity.HasOne(d => d.IdProcesoSeleccionNavigation)
                    .WithMany(p => p.TConvocatoriaPersonal)
                    .HasForeignKey(d => d.IdProcesoSeleccion)
                    .HasConstraintName("FK_T_ConvocatoriaPersonal_T_ProcesoSeleccion");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.TConvocatoriaPersonal)
                    .HasForeignKey(d => d.IdProveedor)
                    .HasConstraintName("FK_T_ConvocatoriaPersonal_T_Proveedor");

                entity.HasOne(d => d.IdSedeTrabajoNavigation)
                    .WithMany(p => p.TConvocatoriaPersonal)
                    .HasForeignKey(d => d.IdSedeTrabajo)
                    .HasConstraintName("FK_T_ConvocatoriaPersonal_T_SedeTrabajo");
            });

            modelBuilder.Entity<TCoordinadora>(entity =>
            {
                entity.ToTable("T_Coordinadora", "ope");

                entity.Property(e => e.AliasCorreo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Firma)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HtmlHorario)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HtmlNumero)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Iniciales)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Modalidad)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCorreoGmail>(entity =>
            {
                entity.ToTable("T_CorreoGmail", "mkt");

                entity.Property(e => e.Asunto)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CuerpoHtml)
                    .IsRequired()
                    .HasColumnName("CuerpoHTML")
                    .IsUnicode(false);

                entity.Property(e => e.Destinatarios)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.EmailConCopia).IsUnicode(false);

                entity.Property(e => e.EmailConCopiaOculta).IsUnicode(false);

                entity.Property(e => e.EmailRemitente)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreRemitente)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TCorreoGmail)
                    .HasForeignKey(d => d.IdPersonal)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CorreoGmail_T_Personal");
            });

            modelBuilder.Entity<TCorreoGmailArchivoAdjunto>(entity =>
            {
                entity.ToTable("T_CorreoGmailArchivoAdjunto", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlArchivoRepositorio).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCorreoGmailNavigation)
                    .WithMany(p => p.TCorreoGmailArchivoAdjunto)
                    .HasForeignKey(d => d.IdCorreoGmail)
                    .HasConstraintName("FK_T_CorreoGmailArchivoAdjunto_T_CorreoGmail");
            });

            modelBuilder.Entity<TCorreoPlantillaPorOcurrenciaActividad>(entity =>
            {
                entity.ToTable("T_CorreoPlantillaPorOcurrenciaActividad", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCourier>(entity =>
            {
                entity.ToTable("T_Courier", "pla");

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCourierDetalle>(entity =>
            {
                entity.ToTable("T_CourierDetalle", "pla");

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCreativoPublicidad>(entity =>
            {
                entity.ToTable("T_CreativoPublicidad", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCriterioCalificacion>(entity =>
            {
                entity.ToTable("T_CriterioCalificacion", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("date");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Sigla)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCriterioDoc>(entity =>
            {
                entity.ToTable("T_CriterioDoc", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("date");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCriterioEvaluacion>(entity =>
            {
                entity.ToTable("T_CriterioEvaluacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdFormaCalculoEvaluacionParametro).HasColumnName("IdFormaCalculoEvaluacion_Parametro");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCriterioEvaluacionCategoriaNavigation)
                    .WithMany(p => p.TCriterioEvaluacion)
                    .HasForeignKey(d => d.IdCriterioEvaluacionCategoria)
                    .HasConstraintName("FK_T_CriterioEvaluacion_T_CriterioEvaluacionCategoria");

                entity.HasOne(d => d.IdFormaCalificacionEvaluacionNavigation)
                    .WithMany(p => p.TCriterioEvaluacion)
                    .HasForeignKey(d => d.IdFormaCalificacionEvaluacion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CriterioEvaluacion_T_FormaCalificacionEvaluacion");
            });

            modelBuilder.Entity<TCriterioEvaluacionCategoria>(entity =>
            {
                entity.ToTable("T_CriterioEvaluacionCategoria", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCriterioEvaluacionModalidadCurso>(entity =>
            {
                entity.ToTable("T_CriterioEvaluacionModalidadCurso", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCriterioEvaluacionNavigation)
                    .WithMany(p => p.TCriterioEvaluacionModalidadCurso)
                    .HasForeignKey(d => d.IdCriterioEvaluacion)
                    .HasConstraintName("FK_T_CriterioEvaluacionModalidadCurso_T_CriterioEvaluacion");

                entity.HasOne(d => d.IdModalidadCursoNavigation)
                    .WithMany(p => p.TCriterioEvaluacionModalidadCurso)
                    .HasForeignKey(d => d.IdModalidadCurso)
                    .HasConstraintName("FK_T_CriterioEvaluacionModalidadCurso_T_ModalidadCurso");
            });

            modelBuilder.Entity<TCriterioEvaluacionProceso>(entity =>
            {
                entity.ToTable("T_CriterioEvaluacionProceso", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCriterioEvaluacionTipo>(entity =>
            {
                entity.ToTable("T_CriterioEvaluacionTipo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCriterioEvaluacionTipoPersona>(entity =>
            {
                entity.ToTable("T_CriterioEvaluacionTipoPersona", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCriterioEvaluacionNavigation)
                    .WithMany(p => p.TCriterioEvaluacionTipoPersona)
                    .HasForeignKey(d => d.IdCriterioEvaluacion)
                    .HasConstraintName("FK_T_CriterioEvaluacionTipoPersona_T_CriterioEvaluacion");

                entity.HasOne(d => d.IdTipoPersonaNavigation)
                    .WithMany(p => p.TCriterioEvaluacionTipoPersona)
                    .HasForeignKey(d => d.IdTipoPersona)
                    .HasConstraintName("FK_T_CriterioEvaluacionTipoPersona_T_TipoPersona");
            });

            modelBuilder.Entity<TCriterioEvaluacionTipoPrograma>(entity =>
            {
                entity.ToTable("T_CriterioEvaluacionTipoPrograma", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCriterioEvaluacionNavigation)
                    .WithMany(p => p.TCriterioEvaluacionTipoPrograma)
                    .HasForeignKey(d => d.IdCriterioEvaluacion)
                    .HasConstraintName("FK_T_CriterioEvaluacionTipoPrograma_T_CriterioEvaluacion");

                entity.HasOne(d => d.IdTipoProgramaNavigation)
                    .WithMany(p => p.TCriterioEvaluacionTipoPrograma)
                    .HasForeignKey(d => d.IdTipoPrograma)
                    .HasConstraintName("FK_T_CriterioEvaluacionTipoPrograma_T_TipoPrograma");
            });

            modelBuilder.Entity<TCronogramaAlumnoProvisional>(entity =>
            {
                entity.ToTable("T_CronogramaAlumnoProvisional", "fin");

                entity.Property(e => e.AprobadoPor)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAprobado).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaCabeceraCambio>(entity =>
            {
                entity.ToTable("T_CronogramaCabeceraCambio", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaDetalleCambio>(entity =>
            {
                entity.ToTable("T_CronogramaDetalleCambio", "fin");

                entity.Property(e => e.Cuota).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mora).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaOriginalesCongeladoPorDia>(entity =>
            {
                entity.ToTable("T_CronogramaOriginalesCongeladoPorDia", "fin");

                entity.Property(e => e.Alumno).IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.CoordinadoraAcademica)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.CoordinadoraCobranza)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoMatricula)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCongelamiento).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodoPorFechaVencimiento)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .HasMaxLength(512)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPago>(entity =>
            {
                entity.ToTable("T_CronogramaPago", "fin");

                entity.Property(e => e.AcuerdoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CadaNdias).HasColumnName("CadaNDias");

                entity.Property(e => e.CuotaInicial).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaIniPago).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMigracion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ndias).HasColumnName("NDias");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Periodo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WebMoneda)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalle>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalle", "fin");

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCuota)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPagar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalleFinal>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalleFinal", "fin");

                entity.HasIndex(e => e.IdMatriculaCabecera)
                    .HasName("INC_T_CronogramaPagoDetalleFinal_PorIdMatriculaCabecera");

                entity.HasIndex(e => new { e.Cuota, e.IdMatriculaCabecera, e.Version, e.Cancelado, e.Estado })
                    .HasName("INDEX_");

                entity.HasIndex(e => new { e.FechaVencimiento, e.IdMatriculaCabecera, e.Version, e.Cancelado, e.Estado, e.Cuota })
                    .HasName("INC_T_CronogramaPagoDetalleFinal_PorCanceladoPorEstadoPorCuota");

                entity.HasIndex(e => new { e.Cuota, e.IdMatriculaCabecera, e.Moneda, e.Version, e.Cancelado, e.Estado, e.FechaPago })
                    .HasName("INC_T_CronogramaPagoDetalleFinal_PorCancelado_PorEstado_PorFechaPago");

                entity.HasIndex(e => new { e.Cancelado, e.Cuota, e.IdMatriculaCabecera, e.Moneda, e.TotalPagar, e.Version, e.NroCuota, e.NroSubCuota })
                    .HasName("INC_T_CronogramaPagoDetalleFinal_PorNroCuota_PorNroSubCuota");

                entity.HasIndex(e => new { e.Cancelado, e.Cuota, e.FechaPago, e.FechaProcesoPagoReal, e.IdMatriculaCabecera, e.Moneda, e.NroCuota, e.NroSubCuota, e.Version, e.Estado, e.FechaVencimiento })
                    .HasName("INC_T_CronogramaPagoDetalleFinal_PorEstadoPorFechaVencimiento");

                entity.HasIndex(e => new { e.Cancelado, e.Cuota, e.FechaVencimiento, e.Moneda, e.MonedaPago, e.Mora, e.NroCuota, e.NroSubCuota, e.TotalPagar, e.IdMatriculaCabecera, e.Version, e.Estado })
                    .HasName("INC_T_CronogramaPagoDetalleFinal_PorIdMatriculaCabecera_PorVersion_PorEstado");

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.CuotaDolares).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCompromiso1).HasColumnType("datetime");

                entity.Property(e => e.FechaCompromiso2).HasColumnType("datetime");

                entity.Property(e => e.FechaCompromiso3).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEfectivoDisponible).HasColumnType("datetime");

                entity.Property(e => e.FechaGeneracionCompromiso1).HasColumnType("datetime");

                entity.Property(e => e.FechaGeneracionCompromiso2).HasColumnType("datetime");

                entity.Property(e => e.FechaGeneracionCompromiso3).HasColumnType("datetime");

                entity.Property(e => e.FechaIngresoEnCuenta).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaPagoBanco).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPagoReal).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalCoordinadorCobranza).HasColumnName("IdPersonal_CoordinadorCobranza");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaMoraTarifario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontoPagado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.MoraTarifario).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NroDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCuota)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPagar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCoordinadorAcademico)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalleFinalCierre>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalleFinalCierre", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MontoPagado).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoProyectado).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PeriodoNombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalleFinalPorDia>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalleFinalPorDia", "fin");

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EstadoMatricula)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCierre).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEfectivoDisponible).HasColumnType("datetime");

                entity.Property(e => e.FechaIngresoEnCuenta).HasColumnType("datetime");

                entity.Property(e => e.FechaMatricula).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPagoReal).HasColumnType("datetime");

                entity.Property(e => e.FechaRealCierre).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontoPagado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPagar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCoordinadorAcademico)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalleFinalPorPeriodo>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalleFinalPorPeriodo", "fin");

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EstadoMatricula)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEfectivoDisponible).HasColumnType("datetime");

                entity.Property(e => e.FechaIngresoEnCuenta).HasColumnType("datetime");

                entity.Property(e => e.FechaMatricula).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPagoReal).HasColumnType("datetime");

                entity.Property(e => e.FechaRealCierre).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontoPagado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPagar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCoordinadorAcademico)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalleInHouse>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalleInHouse", "fin");

                entity.Property(e => e.ActaConformidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Curso)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoPago)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Factura)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEmision).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Monto).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.NroContrato)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NroOcOs)
                    .HasColumnName("NroOC_OS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalleMod>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalleMod", "fin");

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaPagoBanco).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontoPagado).HasColumnType("decimal(20, 10)");

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NroDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(20, 10)");

                entity.Property(e => e.TipoCuota)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPagar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalleModLog>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalleModLog", "fin");

                entity.Property(e => e.ConsiderarCambio)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EstadoPrimerLog)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaPagoBanco).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.MensajeSistema)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontoPagado).HasColumnType("decimal(20, 10)");

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NroDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(20, 10)");

                entity.Property(e => e.TipoCuota)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPagar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalleModLogFinal>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalleModLogFinal", "fin");

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EstadoPrimerLog)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaPagoBanco).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.MensajeSistema)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontoPagado).HasColumnType("decimal(20, 10)");

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NroDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(20, 10)");

                entity.Property(e => e.TipoCuota)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPagar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoDetalleOriginal>(entity =>
            {
                entity.ToTable("T_CronogramaPagoDetalleOriginal", "fin");

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCuota)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipocCambio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPagar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaPagoTarifario>(entity =>
            {
                entity.ToTable("T_CronogramaPagoTarifario", "fin");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Monto).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WebMoneda)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaSubTipoModificacion>(entity =>
            {
                entity.ToTable("T_CronogramaSubTipoModificacion", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaTipoModificacion>(entity =>
            {
                entity.ToTable("T_CronogramaTipoModificacion", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCronogramaVersionFinalPorDia>(entity =>
            {
                entity.ToTable("T_CronogramaVersionFinalPorDia", "fin");

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCierre).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCrucigramaProgramaCapacitacion>(entity =>
            {
                entity.ToTable("T_CrucigramaProgramaCapacitacion", "pla");

                entity.Property(e => e.CodigoCrucigrama)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorMarcador).HasColumnType("decimal(14, 4)");
            });

            modelBuilder.Entity<TCrucigramaProgramaCapacitacionDetalle>(entity =>
            {
                entity.ToTable("T_CrucigramaProgramaCapacitacionDetalle", "pla");

                entity.Property(e => e.Definicion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Palabra)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCuentaContablePadre>(entity =>
            {
                entity.ToTable("T_CuentaContablePadre", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCuentaCorriente>(entity =>
            {
                entity.ToTable("T_CuentaCorriente", "fin");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NumeroCuenta)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Sucursal)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCuerpoConvocatoria>(entity =>
            {
                entity.ToTable("T_CuerpoConvocatoria", "gp");

                entity.Property(e => e.Cuerpo)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProcesoSeleccionNavigation)
                    .WithMany(p => p.TCuerpoConvocatoria)
                    .HasForeignKey(d => d.IdProcesoSeleccion)
                    .HasConstraintName("FK_T_CuerpoConvocatoria_T_ProcesoSeleccion");
            });

            modelBuilder.Entity<TCursoInformatica>(entity =>
            {
                entity.ToTable("T_CursoInformatica", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCursoMoodle>(entity =>
            {
                entity.ToTable("T_CursoMoodle", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreCategoria)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCategoriaPadre)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCursoMoodle)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCursoPespecifico>(entity =>
            {
                entity.ToTable("T_CursoPEspecifico", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPespecificoNavigation)
                    .WithMany(p => p.TCursoPespecifico)
                    .HasForeignKey(d => d.IdPespecifico)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_CursoPEspecifico_T_PEspecifico");
            });

            modelBuilder.Entity<TDataCreditoBusqueda>(entity =>
            {
                entity.ToTable("T_DataCreditoBusqueda", "com");

                entity.Property(e => e.CodigoSeguridad)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaConsulta).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NroDocumento)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDataCreditoCodigoClaseCuenta>(entity =>
            {
                entity.ToTable("T_DataCreditoCodigoClaseCuenta", "com");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDataCreditoCodigoClasificacionCuenta>(entity =>
            {
                entity.ToTable("T_DataCreditoCodigoClasificacionCuenta", "com");

                entity.Property(e => e.Calificacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDataCreditoCodigoEstadoCuenta>(entity =>
            {
                entity.ToTable("T_DataCreditoCodigoEstadoCuenta", "com");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoDc)
                    .IsRequired()
                    .HasColumnName("EstadoDC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDataCreditoCodigoSector>(entity =>
            {
                entity.ToTable("T_DataCreditoCodigoSector", "com");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDataCreditoCodigoSituacionTitular>(entity =>
            {
                entity.ToTable("T_DataCreditoCodigoSituacionTitular", "com");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDataCreditoCodigoTipoMoneda>(entity =>
            {
                entity.ToTable("T_DataCreditoCodigoTipoMoneda", "com");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDataCreditoConsulta>(entity =>
            {
                entity.ToTable("T_DataCreditoConsulta", "com");

                entity.Property(e => e.Cantidad)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NitSuscriptor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Oficina)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Razon)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoConsulta)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoConsulta_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataCuentaAhorro>(entity =>
            {
                entity.ToTable("T_DataCreditoDataCuentaAhorro", "com");

                entity.Property(e => e.Calificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaClase)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoDaneCiudad)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoCodigo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoFecha).HasColumnType("date");

                entity.Property(e => e.FechaApertura).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Llave)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Numero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Oficina)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Sector)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SituacionTitular)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCalificacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ValorFecha).HasColumnType("date");

                entity.Property(e => e.ValorMoneda)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataCuentaAhorro)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataCuentaAhorro_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataCuentaCartera>(entity =>
            {
                entity.ToTable("T_DataCreditoDataCuentaCartera", "com");

                entity.Property(e => e.Calificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CalificacionHd).HasColumnName("CalificacionHD");

                entity.Property(e => e.CaracteristicaCalidadDeudor)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaEjecucionContrato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaGarantia)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaMesesPermanencia)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaTipoContrato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaTipoCuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaTipoObligacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoDaneCiudad)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoSuscriptor)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comportamiento)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoCuentaCodigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoCuentaFecha).HasColumnType("date");

                entity.Property(e => e.EstadoOrigenCodigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoOrigenFecha).HasColumnType("date");

                entity.Property(e => e.EstadoPagoCodigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoPagoFecha).HasColumnType("date");

                entity.Property(e => e.FechaApertura).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("date");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Llave)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Numero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Oficina)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProbabilidadIncumplimiento).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Sector)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SituacionTitular)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCalificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCuota).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorCuotasCanceladas)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCuotasMora).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorDisponible).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorFecha).HasColumnType("date");

                entity.Property(e => e.ValorFechaLimitePago).HasColumnType("date");

                entity.Property(e => e.ValorFechaPagoCuota).HasColumnType("date");

                entity.Property(e => e.ValorMoneda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValorPeriodicidad)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValorSaldoActual).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorSaldoMora).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorTotalCuotas)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValorValorInicial).HasColumnType("decimal(16, 2)");

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataCuentaCartera)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataCuentaCartera_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataEndeudamientoGlobal>(entity =>
            {
                entity.ToTable("T_DataCreditoDataEndeudamientoGlobal", "com");

                entity.Property(e => e.Calificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadNit)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadSector)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaReporte).HasColumnType("date");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GarantiaTipo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GarantiaValor)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Independiente)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Llave)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroCreditos)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SaldoPendiente)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCredito)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataEndeudamientoGlobal)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataEndeudamientoGlobal_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrComposicionPortafolio>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrComposicionPortafolio", "com");

                entity.Property(e => e.CalidadDeudor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoCodigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Porcentaje).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrComposicionPortafolio)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrComposicionPortafolio_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrEvolucionDeudaAnalisisPromedio>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrEvolucionDeudaAnalisisPromedio", "com");

                entity.Property(e => e.AperturaCuentas).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CierreCuentas).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cuota).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CupoTotal).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MoraMaxima).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Porcentaje)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Score).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TotalAbiertas)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TotalCerradas)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrEvolucionDeudaAnalisisPromedio)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrEvolucionDeudaAnalisisPromedio_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrEvolucionDeudaTrimestre>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrEvolucionDeudaTrimestre", "com");

                entity.Property(e => e.AperturaCuentas)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Calificacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CierreCuentas)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuota).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cupototal).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MoraMaxima)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeUso)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Score).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrEvolucionDeudaTrimestre)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrEvolucionDeudaTrimestre_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrHistoricoSaldoTipoCuenta>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrHistoricoSaldoTipoCuenta", "com");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrHistoricoSaldoTipoCuenta)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrHistoricoSaldoTipoCuenta_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrHistoricoSaldoTotal>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrHistoricoSaldoTotal", "com");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrHistoricoSaldoTotal)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrHistoricoSaldoTotal_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrResumenComportamiento>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrResumenComportamiento", "com");

                entity.Property(e => e.Comportamiento)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrResumenComportamiento)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrResumenComportamiento_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrResumenEndeudamiento>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrResumenEndeudamiento", "com");

                entity.Property(e => e.CarteraTipo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CarteraValor).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SectorCodigoSector)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SectorGarantiaAdmisible)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SectorGarantiaOtro)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SectorSector)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TrimestreFecha).HasColumnType("date");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrResumenEndeudamiento)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrResumenEndeudamiento_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrResumenPrincipal>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrResumenPrincipal", "com");

                entity.Property(e => e.ConsultadasUlt6meses)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreditosActualesNegativos)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreditosCerrados)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreditosVigentes)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CuentasAbiertasAhoccb)
                    .HasColumnName("CuentasAbiertasAHOCCB")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CuentasCerradasAhoccb)
                    .HasColumnName("CuentasCerradasAHOCCB")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DesacuerdosAlaFecha)
                    .HasColumnName("DesacuerdosALaFecha")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.HistNegUlt12Meses)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReclamosVigentes)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrResumenPrincipal)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrResumenPrincipal_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrResumenSaldo>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrResumenSaldo", "com");

                entity.Property(e => e.CuotaMensual).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SaldoCreditoMasAlto).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SaldoM30).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SaldoM60).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SaldoM90).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SaldoTotal).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SaldoTotalEnMora).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrResumenSaldo)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrResumenSaldo_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrResumenSaldoMes>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrResumenSaldoMes", "com");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SaldoTotal).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SaldoTotalMora).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrResumenSaldoMes)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrResumenSaldoMes_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrResumenSaldoSector>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrResumenSaldoSector", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Participacion)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Sector)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrResumenSaldoSector)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrResumenSaldoSector_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfAgrTotal>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfAgrTotal", "com");

                entity.Property(e => e.CalidadDeudor)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTipo)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Cuota)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cupo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Participacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoMora)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMapeo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfAgrTotal)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfAgrTotal_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfMicroAnalisisVector>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfMicroAnalisisVector", "com");

                entity.Property(e => e.CuentaEntidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaEstado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaNumeroCuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaTipoCuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreSector)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SaldoDeudaTotalMora)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfMicroAnalisisVector)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfMicroAnalisisVector_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfMicroEndeudamientoActual>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfMicroEndeudamientoActual", "com");

                entity.Property(e => e.Calificacion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CuotaMes).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.EstadoActual)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SaldoActual).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SaldoMora).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SectorCodigoSector)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TipoUsuario)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TotalDeudaCarteras).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorInicial).HasColumnType("decimal(16, 2)");

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfMicroEndeudamientoActual)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfMicroEndeudamientoActual_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfMicroEvolucionDeuda>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfMicroEvolucionDeuda", "com");

                entity.Property(e => e.CodigoMenorCalificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoSector)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cuota).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CupoInicial).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreSector)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Num)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeDeuda).HasColumnType("decimal(16, 1)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SaldoMora).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TextoMenorCalificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Trimestre)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfMicroEvolucionDeuda)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfMicroEvolucionDeuda_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfMicroImagenTendenciaEndeudamiento>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfMicroImagenTendenciaEndeudamiento", "com");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Serie)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(8, 1)");

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfMicroImagenTendenciaEndeudamiento)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfMicroImagenTendenciaEndeudamiento_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfMicroPerfilGeneral>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfMicroPerfilGeneral", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SectorCooperativo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SectorFinanciero)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SectorReal)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SectorTelcos)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalComoCodeudorYotros)
                    .HasColumnName("TotalComoCodeudorYOtros")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalComoPrincipal)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfMicroPerfilGeneral)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfMicroPerfilGeneral_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataInfMicroVectorSaldoMora>(entity =>
            {
                entity.ToTable("T_DataCreditoDataInfMicroVectorSaldoMora", "com");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MorasMaxSectorFinanciero)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MorasMaxSectorReal)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MorasMaxSectorTelcos)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MorasMaximas)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SaldoDeudaTotal).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SaldoDeudaTotalMora).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataInfMicroVectorSaldoMora)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataInfMicroVectorSaldoMora_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataNaturalNacional>(entity =>
            {
                entity.ToTable("T_DataCreditoDataNaturalNacional", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Genero)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificacionCiudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificacionDepartamento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificacionEstado)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificacionFechaExpedicion).HasColumnType("date");

                entity.Property(e => e.IdentificacionNumero)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompleto)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Nombres)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NroDocumento)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PrimerApellido)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SegundoApellido)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataNaturalNacional)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataNaturalNacional_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataProductoValor>(entity =>
            {
                entity.ToTable("T_DataCreditoDataProductoValor", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Producto)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon10)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon4)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon5)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon6)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon7)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon8)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Razon9)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor10)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor10smlv)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor1smlv)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valor2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor2smlv)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor3smlv)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor4)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor4smlv)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor5)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor5smlv)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor6)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor6smlv)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor7)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor7smlv)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor8)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor8smlv)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor9)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Valor9smlv)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataProductoValor)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataProductoValor_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataScore>(entity =>
            {
                entity.ToTable("T_DataCreditoDataScore", "com");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Poblacion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Puntaje)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataScore)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataScore_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoDataTarjetaCredito>(entity =>
            {
                entity.ToTable("T_DataCreditoDataTarjetaCredito", "com");

                entity.Property(e => e.Calificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CalificacionHd).HasColumnName("CalificacionHD");

                entity.Property(e => e.CaracteristicaClase)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaCodigoAmparada)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaFranquicia)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaGarantia)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteristicaMarca)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoDaneCiudad)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comportamiento)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoCuentaCodigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoCuentaFecha).HasColumnType("date");

                entity.Property(e => e.EstadoOrigenCodigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoOrigenFecha).HasColumnType("date");

                entity.Property(e => e.EstadoPagoCodigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoPagoFecha).HasColumnType("date");

                entity.Property(e => e.EstadoPlasticoCodigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoPlasticoFecha).HasColumnType("date");

                entity.Property(e => e.FechaApertura).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("date");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Llave)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Numero)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Oficina)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProbabilidadIncumplimiento).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Sector)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SituacionTitular)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCalificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCuota).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorCuotasMora).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorCupoTotal).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorDisponible).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorFecha).HasColumnType("date");

                entity.Property(e => e.ValorFechaLimitePago).HasColumnType("date");

                entity.Property(e => e.ValorFechaPagoCuota).HasColumnType("date");

                entity.Property(e => e.ValorMoneda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValorSaldoActual).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ValorSaldoMora).HasColumnType("decimal(16, 2)");

                entity.HasOne(d => d.IdDataCreditoBusquedaNavigation)
                    .WithMany(p => p.TDataCreditoDataTarjetaCredito)
                    .HasForeignKey(d => d.IdDataCreditoBusqueda)
                    .HasConstraintName("FK_T_DataCreditoDataTarjetaCredito_T_DataCreditoBusqueda");
            });

            modelBuilder.Entity<TDataCreditoLog>(entity =>
            {
                entity.ToTable("T_DataCreditoLog", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PrimerApellido)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RespuestaXml)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDatoAdicionalPagina>(entity =>
            {
                entity.ToTable("T_DatoAdicionalPagina", "mkt");

                entity.Property(e => e.ColorDescripcion).HasMaxLength(50);

                entity.Property(e => e.ColorTitulo).HasMaxLength(50);

                entity.Property(e => e.Descripcion).IsRequired();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreImagen).HasMaxLength(250);

                entity.Property(e => e.NombreTitulo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFormularioLandingPageNavigation)
                    .WithMany(p => p.TDatoAdicionalPagina)
                    .HasForeignKey(d => d.IdFormularioLandingPage)
                    .HasConstraintName("FK_T_DatoAdicionalPagina_T_FormularioLandingPage");
            });

            modelBuilder.Entity<TDatoContratoComisionBono>(entity =>
            {
                entity.ToTable("T_DatoContratoComisionBono", "gp");

                entity.Property(e => e.Concepto)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Monto).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoRemuneracionVariable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDatoContratoPersonal>(entity =>
            {
                entity.ToTable("T_DatoContratoPersonal", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaFinPeriodoPrueba).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEntidadFinancieraCts).HasColumnName("IdEntidadFinanciera_Cts");

                entity.Property(e => e.IdEntidadFinancieraPago).HasColumnName("IdEntidadFinanciera_Pago");

                entity.Property(e => e.IdPersonalJefe).HasColumnName("IdPersonal_Jefe");

                entity.Property(e => e.NumeroCuentaCts)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RemuneracionFija).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlDocumentoContrato)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCargoNavigation)
                    .WithMany(p => p.TDatoContratoPersonal)
                    .HasForeignKey(d => d.IdCargo)
                    .HasConstraintName("FK_T_DatoContratoPersonal_T_Cargo");

                entity.HasOne(d => d.IdContratoEstadoNavigation)
                    .WithMany(p => p.TDatoContratoPersonal)
                    .HasForeignKey(d => d.IdContratoEstado)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_DatoContratoPersonal_T_ContratoEstado");

                entity.HasOne(d => d.IdPuestoTrabajoNavigation)
                    .WithMany(p => p.TDatoContratoPersonal)
                    .HasForeignKey(d => d.IdPuestoTrabajo)
                    .HasConstraintName("FK_T_DatoContratoPersonal_T_PuestoTrabajo");

                entity.HasOne(d => d.IdSedeTrabajoNavigation)
                    .WithMany(p => p.TDatoContratoPersonal)
                    .HasForeignKey(d => d.IdSedeTrabajo)
                    .HasConstraintName("FK_T_DatoContratoPersonal_T_SedeTrabajo");

                entity.HasOne(d => d.IdTipoContratoNavigation)
                    .WithMany(p => p.TDatoContratoPersonal)
                    .HasForeignKey(d => d.IdTipoContrato)
                    .HasConstraintName("FK_T_DatoContratoPersonal_T_TipoContrato");

                entity.HasOne(d => d.IdTipoPagoRemuneracionNavigation)
                    .WithMany(p => p.TDatoContratoPersonal)
                    .HasForeignKey(d => d.IdTipoPagoRemuneracion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_DatoContratoPersonal_T_TipoPagoRemuneracion");

                entity.HasOne(d => d.IdTipoPerfilNavigation)
                    .WithMany(p => p.TDatoContratoPersonal)
                    .HasForeignKey(d => d.IdTipoPerfil)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_DatoContratoPersonal_T_TipoPerfil");
            });

            modelBuilder.Entity<TDatoFamiliarPersonal>(entity =>
            {
                entity.ToTable("T_DatoFamiliarPersonal", "gp");

                entity.Property(e => e.Apellidos)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("datetime");

                entity.Property(e => e.Nombres)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroReferencia1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroReferencia2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDatoLandingPage>(entity =>
            {
                entity.ToTable("T_DatoLandingPage", "mkt");

                entity.Property(e => e.Cita1Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cita1Texto).IsUnicode(false);

                entity.Property(e => e.Cita3Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cita3Texto).IsUnicode(false);

                entity.Property(e => e.Cita4Color)
                    .HasColumnName("Cita4_Color")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cita4Texto).IsUnicode(false);

                entity.Property(e => e.ColorBordeInferiorBotonBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoBotonBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoBotonInvitacion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoBotonBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoBotonInvitacion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoDescripcionPgeneral)
                    .HasColumnName("ColorTextoDescripcionPGeneral")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoInvitacionBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoPgeneral)
                    .HasColumnName("ColorTextoPGeneral")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ContenidoSeccionTelefono)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CorreoReceptor)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorreoRemitente)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FlpCboMprograma).HasColumnName("FlpCboMPrograma");

                entity.Property(e => e.FlpCita1TextoDespues).IsUnicode(false);

                entity.Property(e => e.FlpCodigo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FlpColorDescripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlpColorFondoBoton)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlpColorFondoHeader)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlpColorPlaceHolder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlpColorPopup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlpColorTextoBoton)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlpColorTitulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlpMensaje)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FlpPgeneral)
                    .HasColumnName("FlpPGeneral")
                    .IsUnicode(false);

                entity.Property(e => e.FlpUrlImagen)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FondoBotonLadoInvitacion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioBotonFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioBotonPosicion).HasMaxLength(20);

                entity.Property(e => e.FormularioBotonTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioTextoFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioTextoTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioTituloFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioTituloTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FrtpCodigo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FrtpMensaje).IsUnicode(false);

                entity.Property(e => e.FrtpNombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FrtpUrlDestino)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.FstCampanha)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FstCampo)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FstProveedor)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FstTextoBoton)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IdCentroCostoPe).HasColumnName("IdCentroCosto_Pe");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.LpCodigo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePgeneral)
                    .HasColumnName("NombrePGeneral")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PeCentroCosto)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResumenProgramaGeneral)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Texto)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TextoBotonBrochure)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TextoBotonInvitacionArea)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoBotonInvitacionPagina)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoInvitacionBrochure)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TextoTextoFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TextoTextoTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TextoTituloFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TextoTituloTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TituloPopup)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TituloTextoFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TituloTextoTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TituloTituloFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TituloTituloTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UrlBotonInvitacionArea)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlBotonInvitacionPagina)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlBrochurePrograma)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlImagenLadoInvitacion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlLogotipo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDatoOportunidadAreaVenta>(entity =>
            {
                entity.ToTable("T_DatoOportunidadAreaVenta", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCategoriaOrigenNavigation)
                    .WithMany(p => p.TDatoOportunidadAreaVenta)
                    .HasForeignKey(d => d.IdCategoriaOrigen)
                    .HasConstraintName("FK_T_DatoOportunidadAreaVenta_T_CategoriaOrigen");

                entity.HasOne(d => d.IdFaseOportunidadNavigation)
                    .WithMany(p => p.TDatoOportunidadAreaVenta)
                    .HasForeignKey(d => d.IdFaseOportunidad)
                    .HasConstraintName("FK_T_DatoOportunidadAreaVenta_T_FaseOportunidad");

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TDatoOportunidadAreaVenta)
                    .HasForeignKey(d => d.IdOportunidad)
                    .HasConstraintName("FK_T_DatoOportunidadAreaVenta_T_Oportunidad");

                entity.HasOne(d => d.IdSesionGuardadoNavigation)
                    .WithMany(p => p.TDatoOportunidadAreaVenta)
                    .HasForeignKey(d => d.IdSesionGuardado)
                    .HasConstraintName("FK_T_DatoOportunidadAreaVenta_T_SesionGuardado");

                entity.HasOne(d => d.IdTipoDatoNavigation)
                    .WithMany(p => p.TDatoOportunidadAreaVenta)
                    .HasForeignKey(d => d.IdTipoDato)
                    .HasConstraintName("FK_T_DatoOportunidadAreaVenta_T_TipoDato");
            });

            modelBuilder.Entity<TDescuentoPromocion>(entity =>
            {
                entity.ToTable("T_DescuentoPromocion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDetalleOportunidadCompetidor>(entity =>
            {
                entity.ToTable("T_DetalleOportunidadCompetidor", "com");

                entity.HasIndex(e => new { e.IdOportunidadCompetidor, e.Estado })
                    .HasName("INC_T_DetalleOportunidadCompetidor_PorIdCompetidorPorEstado");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadCompetidorNavigation)
                    .WithMany(p => p.TDetalleOportunidadCompetidor)
                    .HasForeignKey(d => d.IdOportunidadCompetidor)
                    .HasConstraintName("FK_T_DetalleOportunidadCompetidor_T_OportunidadCompetidor");
            });

            modelBuilder.Entity<TDetraccion>(entity =>
            {
                entity.ToTable("T_Detraccion", "fin");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDiaSemana>(entity =>
            {
                entity.ToTable("T_DiaSemana", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDiccionarioPalabraOfensiva>(entity =>
            {
                entity.ToTable("T_DiccionarioPalabraOfensiva", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PalabraFiltrada)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentacionComercialPw>(entity =>
            {
                entity.ToTable("T_DocumentacionComercial_PW", "pla");

                entity.Property(e => e.Contenido).IsRequired();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Modalidad)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentacionPersonal>(entity =>
            {
                entity.ToTable("T_DocumentacionPersonal", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlDocumento)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TDocumentacionPersonal)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_DocumentacionPersonal_T_Personal");

                entity.HasOne(d => d.IdTipoDocumentacionPersonalNavigation)
                    .WithMany(p => p.TDocumentacionPersonal)
                    .HasForeignKey(d => d.IdTipoDocumentacionPersonal)
                    .HasConstraintName("FK_T_DocumentacionPersonal_T_TipoDocumentacionPersonal");
            });

            modelBuilder.Entity<TDocumento>(entity =>
            {
                entity.ToTable("T_Documento", "conf");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoConfiguracionRecepcion>(entity =>
            {
                entity.ToTable("T_DocumentoConfiguracionRecepcion", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoEnviadoWebPw>(entity =>
            {
                entity.ToTable("T_DocumentoEnviadoWeb_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoIdentidad>(entity =>
            {
                entity.ToTable("T_DocumentoIdentidad", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoLegal>(entity =>
            {
                entity.ToTable("T_DocumentoLegal", "fin");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Roles)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoLegalAreaTrabajo>(entity =>
            {
                entity.ToTable("T_DocumentoLegalAreaTrabajo", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoLegalPais>(entity =>
            {
                entity.ToTable("T_DocumentoLegalPais", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoMarketing>(entity =>
            {
                entity.ToTable("T_DocumentoMarketing", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Ipcliente)
                    .IsRequired()
                    .HasColumnName("IPCliente")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoOportunidad>(entity =>
            {
                entity.ToTable("T_DocumentoOportunidad", "com");

                entity.Property(e => e.Comentario).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruta)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoPago>(entity =>
            {
                entity.ToTable("T_DocumentoPago", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoPw>(entity =>
            {
                entity.ToTable("T_Documento_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPlantillaPw).HasColumnName("IdPlantillaPW");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPlantillaPwNavigation)
                    .WithMany(p => p.TDocumentoPw)
                    .HasForeignKey(d => d.IdPlantillaPw)
                    .HasConstraintName("FK_T_Documento_PW_T_Plantilla_PW");
            });

            modelBuilder.Entity<TDocumentoRecepcionado>(entity =>
            {
                entity.ToTable("T_DocumentoRecepcionado", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.MimeTypeArchivo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruta)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDocumentoSeccionPw>(entity =>
            {
                entity.ToTable("T_DocumentoSeccion_PW", "pla");

                entity.HasIndex(e => new { e.IdDocumentoPw, e.Titulo })
                    .HasName("_dta_index_T_DocumentoSeccion_PW_19_965578478__K7_K2_3");

                entity.Property(e => e.Cabecera)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdDocumentoPw).HasColumnName("IdDocumentoPW");

                entity.Property(e => e.IdPlantillaPw).HasColumnName("IdPlantillaPW");

                entity.Property(e => e.IdSeccionPw).HasColumnName("IdSeccionPW");

                entity.Property(e => e.IdSeccionTipoDetallePw).HasColumnName("IdSeccionTipoDetalle_PW");

                entity.Property(e => e.PiePagina)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDocumentoPwNavigation)
                    .WithMany(p => p.TDocumentoSeccionPw)
                    .HasForeignKey(d => d.IdDocumentoPw)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_DocumentoSeccion_PW_T_Documento_PW");

                entity.HasOne(d => d.IdPlantillaPwNavigation)
                    .WithMany(p => p.TDocumentoSeccionPw)
                    .HasForeignKey(d => d.IdPlantillaPw)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_DocumentoSeccion_PW_T_Plantilla_PW");

                entity.HasOne(d => d.IdSeccionPwNavigation)
                    .WithMany(p => p.TDocumentoSeccionPw)
                    .HasForeignKey(d => d.IdSeccionPw)
                    .HasConstraintName("FK_T_DocumentoSeccion_PW_T_Seccion_PW");
            });

            modelBuilder.Entity<TDominio>(entity =>
            {
                entity.ToTable("T_Dominio", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IpPrivado)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IpPublico)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDuracionAvanceAcademicoMoodle>(entity =>
            {
                entity.ToTable("T_DuracionAvanceAcademico_Moodle", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEjecucionEstadoWhatsApp>(entity =>
            {
                entity.ToTable("T_EjecucionEstadoWhatsApp", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("date");

                entity.Property(e => e.FechaInicio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEjecucionEstadoWhatsAppLog>(entity =>
            {
                entity.ToTable("T_EjecucionEstadoWhatsAppLog", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEjecucion).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TElemento>(entity =>
            {
                entity.ToTable("T_Elemento", "mkt");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdElementoSubCategoriaNavigation)
                    .WithMany(p => p.TElemento)
                    .HasForeignKey(d => d.IdElementoSubCategoria)
                    .HasConstraintName("FK_T_Elemento_T_ElementoSubCategoria");
            });

            modelBuilder.Entity<TElementoCategoria>(entity =>
            {
                entity.ToTable("T_ElementoCategoria", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TElementoSubCategoria>(entity =>
            {
                entity.ToTable("T_ElementoSubCategoria", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdElementoCategoriaNavigation)
                    .WithMany(p => p.TElementoSubCategoria)
                    .HasForeignKey(d => d.IdElementoCategoria)
                    .HasConstraintName("FK_T_ElementoSubCategoria_T_ElementoCategoria");
            });

            modelBuilder.Entity<TEmbudo>(entity =>
            {
                entity.ToTable("T_Embudo", "mkt");

                entity.HasIndex(e => e.FechaRegistro)
                    .HasName("INC_T_Embudo_V2_PorFechaRegistro");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistro).HasColumnType("date");

                entity.Property(e => e.PrecioProgramaGeneral).HasColumnType("money");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEmbudoFiltro>(entity =>
            {
                entity.ToTable("T_EmbudoFiltro", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nivel)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SubNivel)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.SubNivelFases)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.SubNivelGrupos)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEmbudoNivel>(entity =>
            {
                entity.ToTable("T_EmbudoNivel", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEmbudoPre>(entity =>
            {
                entity.ToTable("T_EmbudoPre", "mkt");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdProbabilidadRegistroPw).HasColumnName("IdProbabilidadRegistroPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEmbudoSubNivel>(entity =>
            {
                entity.ToTable("T_EmbudoSubNivel", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEmpresa>(entity =>
            {
                entity.ToTable("T_Empresa", "pla");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdTipoEmpresa)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.PaginaWeb)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruc)
                    .HasColumnName("RUC")
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEmpresaAutorizada>(entity =>
            {
                entity.ToTable("T_EmpresaAutorizada", "fin");

                entity.Property(e => e.Central)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreComercial)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEmpresaFinanza>(entity =>
            {
                entity.ToTable("T_EmpresaFinanza", "fin");

                entity.Property(e => e.Contacto)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreEmpresa)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruc)
                    .HasColumnName("RUC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEnlaceMailChimp>(entity =>
            {
                entity.ToTable("T_EnlaceMailChimp", "mkt");

                entity.Property(e => e.CampaniaMailChimpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaUltimoClick).HasColumnType("datetime");

                entity.Property(e => e.PorcentajeClicks).HasColumnType("decimal(18, 17)");

                entity.Property(e => e.PorcentajeClicksUnicos).HasColumnType("decimal(18, 17)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Url)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UrlMailChimpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEntidadFinanciera>(entity =>
            {
                entity.ToTable("T_EntidadFinanciera", "fin");

                entity.Property(e => e.CuentaCte).HasMaxLength(50);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEntidadSeguroSalud>(entity =>
            {
                entity.ToTable("T_EntidadSeguroSalud", "gp");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEntidadSistemaPensionario>(entity =>
            {
                entity.ToTable("T_EntidadSistemaPensionario", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEnvioCorreoBicOperaciones>(entity =>
            {
                entity.ToTable("T_EnvioCorreoBicOperaciones", "ope");

                entity.Property(e => e.Asunto)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Destiantario)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Remitente)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEnvioCorreoIncidencia>(entity =>
            {
                entity.ToTable("T_EnvioCorreoIncidencia", "conf");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Segmento)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEnvioCorreoMandril>(entity =>
            {
                entity.ToTable("T_EnvioCorreoMandril", "com");

                entity.Property(e => e.Asunto)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCentroCostoOportunidad).HasColumnName("IdCentroCosto_Oportunidad");

                entity.Property(e => e.MandrilId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEnvioCorreoMasivo>(entity =>
            {
                entity.ToTable("T_EnvioCorreoMasivo", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdActividadDetalleInicial).HasColumnName("IdActividadDetalle_Inicial");

                entity.Property(e => e.IdCentroCostoOportunidad).HasColumnName("IdCentroCosto_Oportunidad");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TError>(entity =>
            {
                entity.ToTable("T_Error", "conf");

                entity.HasIndex(e => new { e.IdErrorTipo, e.Codigo })
                    .HasName("UC_T_Error_PorCodigoPorTipoError")
                    .IsUnique();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionPersonalizada)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreObjeto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdErrorTipoNavigation)
                    .WithMany(p => p.TError)
                    .HasForeignKey(d => d.IdErrorTipo)
                    .HasConstraintName("FK_T_Error_T_ErrorTipo");
            });

            modelBuilder.Entity<TErrorTipo>(entity =>
            {
                entity.ToTable("T_ErrorTipo", "conf");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEscalaCalificacion>(entity =>
            {
                entity.ToTable("T_EscalaCalificacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEscalaCalificacionDetalle>(entity =>
            {
                entity.ToTable("T_EscalaCalificacionDetalle", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(5, 2)");

                entity.HasOne(d => d.IdEscalaCalificacionNavigation)
                    .WithMany(p => p.TEscalaCalificacionDetalle)
                    .HasForeignKey(d => d.IdEscalaCalificacion)
                    .HasConstraintName("FK_T_EscalaCalificacionDetalle_T_EscalaCalificacion");
            });

            modelBuilder.Entity<TEsquemaEvaluacion>(entity =>
            {
                entity.ToTable("T_EsquemaEvaluacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFormaCalculoEvaluacionNavigation)
                    .WithMany(p => p.TEsquemaEvaluacion)
                    .HasForeignKey(d => d.IdFormaCalculoEvaluacion)
                    .HasConstraintName("FK_T_EsquemaEvaluacion_T_FormaCalculoEvaluacion");
            });

            modelBuilder.Entity<TEsquemaEvaluacionDetalle>(entity =>
            {
                entity.ToTable("T_EsquemaEvaluacionDetalle", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCriterioEvaluacionNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionDetalle)
                    .HasForeignKey(d => d.IdCriterioEvaluacion)
                    .HasConstraintName("FK_T_EsquemaEvaluacionDetalle_T_CriterioEvaluacion");

                entity.HasOne(d => d.IdEsquemaEvaluacionNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionDetalle)
                    .HasForeignKey(d => d.IdEsquemaEvaluacion)
                    .HasConstraintName("FK_T_EsquemaEvaluacionDetalle_T_EsquemaEvaluacion");
            });

            modelBuilder.Entity<TEsquemaEvaluacionPgeneral>(entity =>
            {
                entity.ToTable("T_EsquemaEvaluacionPGeneral", "pla");

                entity.Property(e => e.EsquemaPredeterminado)
                    .HasColumnName("Esquema_Predeterminado")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("date");

                entity.Property(e => e.FechaInicio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEsquemaEvaluacionNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionPgeneral)
                    .HasForeignKey(d => d.IdEsquemaEvaluacion)
                    .HasConstraintName("FK_T_EsquemaEvaluacionPGeneral_T_EsquemaEvaluacion");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionPgeneral)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_EsquemaEvaluacionPGeneral_T_PGeneral");
            });

            modelBuilder.Entity<TEsquemaEvaluacionPgeneralDetalle>(entity =>
            {
                entity.ToTable("T_EsquemaEvaluacionPGeneralDetalle", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEsquemaEvaluacionPgeneral).HasColumnName("IdEsquemaEvaluacionPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlArchivoInstrucciones)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCriterioEvaluacionNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionPgeneralDetalle)
                    .HasForeignKey(d => d.IdCriterioEvaluacion)
                    .HasConstraintName("FK_T_EsquemaEvaluacionPGeneralDetalle_T_CriterioEvaluacion");

                entity.HasOne(d => d.IdEsquemaEvaluacionPgeneralNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionPgeneralDetalle)
                    .HasForeignKey(d => d.IdEsquemaEvaluacionPgeneral)
                    .HasConstraintName("FK_T_EsquemaEvaluacionPGeneralDetalle_T_EsquemaEvaluacionPGeneral");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionPgeneralDetalle)
                    .HasForeignKey(d => d.IdProveedor)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_EsquemaEvaluacionPGeneralDetalle_T_Proveedor");
            });

            modelBuilder.Entity<TEsquemaEvaluacionPgeneralModalidad>(entity =>
            {
                entity.ToTable("T_EsquemaEvaluacionPGeneralModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEsquemaEvaluacionPgeneral).HasColumnName("IdEsquemaEvaluacionPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEsquemaEvaluacionPgeneralNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionPgeneralModalidad)
                    .HasForeignKey(d => d.IdEsquemaEvaluacionPgeneral)
                    .HasConstraintName("FK_T_EsquemaEvaluacionPGeneralModalidad_T_EsquemaEvaluacionPGeneral");

                entity.HasOne(d => d.IdModalidadCursoNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionPgeneralModalidad)
                    .HasForeignKey(d => d.IdModalidadCurso)
                    .HasConstraintName("FK_T_EsquemaEvaluacionPGeneralModalidad_T_ModalidadCurso");
            });

            modelBuilder.Entity<TEsquemaEvaluacionPgeneralProveedor>(entity =>
            {
                entity.ToTable("T_EsquemaEvaluacionPGeneralProveedor", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEsquemaEvaluacionPgeneral).HasColumnName("IdEsquemaEvaluacionPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEsquemaEvaluacionPgeneralNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionPgeneralProveedor)
                    .HasForeignKey(d => d.IdEsquemaEvaluacionPgeneral)
                    .HasConstraintName("FK_T_EsquemaEvaluacionPGeneralProveedor_T_EsquemaEvaluacionPGeneral");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.TEsquemaEvaluacionPgeneralProveedor)
                    .HasForeignKey(d => d.IdProveedor)
                    .HasConstraintName("FK_T_EsquemaEvaluacionPGeneralProveedor_T_Proveedor");
            });

            modelBuilder.Entity<TEstadoActividadDetalle>(entity =>
            {
                entity.ToTable("T_EstadoActividadDetalle", "com");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoCertificadoFisico>(entity =>
            {
                entity.ToTable("T_EstadoCertificadoFisico", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoChat>(entity =>
            {
                entity.ToTable("T_EstadoChat", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoCivil>(entity =>
            {
                entity.ToTable("T_EstadoCivil", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoContactoMailing>(entity =>
            {
                entity.ToTable("T_EstadoContactoMailing", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoContactoWhatsApp>(entity =>
            {
                entity.ToTable("T_EstadoContactoWhatsApp", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoEnvio>(entity =>
            {
                entity.ToTable("T_EstadoEnvio", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoEnvioCorreo>(entity =>
            {
                entity.ToTable("T_EstadoEnvioCorreo", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoEtapaProcesoSeleccion>(entity =>
            {
                entity.ToTable("T_EstadoEtapaProcesoSeleccion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoMatricula>(entity =>
            {
                entity.ToTable("T_EstadoMatricula", "fin");

                entity.Property(e => e.EstadoMatricula)
                    .IsRequired()
                    .HasColumnName("Estado_matricula")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoMatriculaEstandar>(entity =>
            {
                entity.ToTable("T_EstadoMatriculaEstandar", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoOcurrencia>(entity =>
            {
                entity.ToTable("T_EstadoOcurrencia", "com");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoOportunidad>(entity =>
            {
                entity.ToTable("T_EstadoOportunidad", "com");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoPagoMatricula>(entity =>
            {
                entity.ToTable("T_EstadoPagoMatricula", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoPespecifico>(entity =>
            {
                entity.ToTable("T_EstadoPEspecifico", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoProcesoSeleccion>(entity =>
            {
                entity.ToTable("T_EstadoProcesoSeleccion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoRegistroMaterial>(entity =>
            {
                entity.ToTable("T_EstadoRegistroMaterial", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoSeguimientoPreProcesoListaWhatsApp>(entity =>
            {
                entity.ToTable("T_EstadoSeguimientoPreProcesoListaWhatsApp", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstadoSolicitudBeneficio>(entity =>
            {
                entity.ToTable("T_EstadoSolicitudBeneficio", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstructuraEspecifica>(entity =>
            {
                entity.ToTable("T_EstructuraEspecifica", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistro).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneralHijo).HasColumnName("IdPGeneralHijo");

                entity.Property(e => e.IdPgeneralPadre).HasColumnName("IdPGeneralPadre");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstructuraEspecificaCapitulo>(entity =>
            {
                entity.ToTable("T_EstructuraEspecificaCapitulo", "ope");

                entity.Property(e => e.Capitulo)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstructuraEspecificaEncuesta>(entity =>
            {
                entity.ToTable("T_EstructuraEspecificaEncuesta", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreEncuesta)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstructuraEspecificaSesion>(entity =>
            {
                entity.ToTable("T_EstructuraEspecificaSesion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Sesion)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstructuraEspecificaSubSesion>(entity =>
            {
                entity.ToTable("T_EstructuraEspecificaSubSesion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SubSesion)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEstructuraEspecificaTarea>(entity =>
            {
                entity.ToTable("T_EstructuraEspecificaTarea", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreTarea)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tarea)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEtapaProcesoSeleccionCalificado>(entity =>
            {
                entity.ToTable("T_EtapaProcesoSeleccionCalificado", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NotaCalculada).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEstadoEtapaProcesoSeleccionNavigation)
                    .WithMany(p => p.TEtapaProcesoSeleccionCalificado)
                    .HasForeignKey(d => d.IdEstadoEtapaProcesoSeleccion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_EtapaProcesoSeleccionCalificado_T_EstadoEtapaProcesoSeleccion");

                entity.HasOne(d => d.IdPostulanteNavigation)
                    .WithMany(p => p.TEtapaProcesoSeleccionCalificado)
                    .HasForeignKey(d => d.IdPostulante)
                    .HasConstraintName("FK_T_EtapaProcesoSeleccionCalificado_T_Postulante");
            });

            modelBuilder.Entity<TEtiqueta>(entity =>
            {
                entity.ToTable("T_Etiqueta", "pla");

                entity.Property(e => e.CampoDb)
                    .HasColumnName("CampoDB")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEtiquetaBotonReemplazo>(entity =>
            {
                entity.ToTable("T_EtiquetaBotonReemplazo", "mkt");

                entity.Property(e => e.Estilos).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Texto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEtiquetaNavigation)
                    .WithMany(p => p.TEtiquetaBotonReemplazo)
                    .HasForeignKey(d => d.IdEtiqueta)
                    .HasConstraintName("FK_T_EtiquetaBotonReemplazo_T_Etiqueta");
            });

            modelBuilder.Entity<TEvaluacion>(entity =>
            {
                entity.ToTable("T_Evaluacion", "ope");

                entity.Property(e => e.FechaAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioAprobacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEvaluacionCategoria>(entity =>
            {
                entity.ToTable("T_EvaluacionCategoria", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEvaluacionComportamiento>(entity =>
            {
                entity.ToTable("T_EvaluacionComportamiento", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEvaluacionFeedbackAprobado).HasColumnName("IdEvaluacionFeedback_Aprobado");

                entity.Property(e => e.IdEvaluacionFeedbackCancelado).HasColumnName("IdEvaluacionFeedback_Cancelado");

                entity.Property(e => e.IdEvaluacionFeedbackDesaprobado).HasColumnName("IdEvaluacionFeedback_Desaprobado");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEvaluacionConfiguracionFormato>(entity =>
            {
                entity.ToTable("T_EvaluacionConfiguracionFormato", "gp");

                entity.Property(e => e.ColorFondoEnunciado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoRespuesta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoTitulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoEnunciado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoRespuesta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoTitulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoLetraEnunciado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoLetraRespuesta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoLetraTitulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEvaluacionEscalaCalificacion>(entity =>
            {
                entity.ToTable("T_EvaluacionEscalaCalificacion", "ope");

                entity.Property(e => e.CodigoCiudad)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.EscalaCalificacion).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.EscalaTexto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NotaAprobatoria).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NotaAprobatoriaTexto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEvaluacionFeedback>(entity =>
            {
                entity.ToTable("T_EvaluacionFeedback", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEvaluacionPersona>(entity =>
            {
                entity.ToTable("T_EvaluacionPersona", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPespecificoSesion).HasColumnName("IdPEspecificoSesion");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TiempoLimite).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Titulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEvaluacionResultado>(entity =>
            {
                entity.ToTable("T_EvaluacionResultado", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PuntajeAprobacion).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PuntajeExamen).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEvaluacionTipo>(entity =>
            {
                entity.ToTable("T_EvaluacionTipo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEventoCalendarioProyecto>(entity =>
            {
                entity.ToTable("T_EventoCalendarioProyecto", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEvento).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.HoraFin).HasColumnType("time(3)");

                entity.Property(e => e.HoraInicio).HasColumnType("time(3)");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEventoCalendarioProyectoPersonal>(entity =>
            {
                entity.ToTable("T_EventoCalendarioProyectoPersonal", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEventoCalendarioProyectoNavigation)
                    .WithMany(p => p.TEventoCalendarioProyectoPersonal)
                    .HasForeignKey(d => d.IdEventoCalendarioProyecto)
                    .HasConstraintName("FK_T_EventoCalendarioProyectoPersonal_T_EventoCalendarioProyecto");

                entity.HasOne(d => d.IdPersonalRecursoNavigation)
                    .WithMany(p => p.TEventoCalendarioProyectoPersonal)
                    .HasForeignKey(d => d.IdPersonalRecurso)
                    .HasConstraintName("FK_T_EventoCalendarioProyectoPersonal_T_PersonalRecurso");
            });

            modelBuilder.Entity<TExamen>(entity =>
            {
                entity.ToTable("T_Examen", "gp");

                entity.Property(e => e.Factor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Instrucciones).IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Titulo)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExamenAsignado>(entity =>
            {
                entity.ToTable("T_ExamenAsignado", "gp");

                entity.HasIndex(e => new { e.Id, e.IdExamen, e.IdPostulante, e.IdProcesoSeleccion, e.EstadoExamen, e.Estado, e.FechaModificacion })
                    .HasName("INC_T_ExamenAsignado_EstadoExamen_Estado_FechaModificacion");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExamenAsignadoEvaluador>(entity =>
            {
                entity.ToTable("T_ExamenAsignadoEvaluador", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdExamenNavigation)
                    .WithMany(p => p.TExamenAsignadoEvaluador)
                    .HasForeignKey(d => d.IdExamen)
                    .HasConstraintName("FK_T_ExamenAsignadoEvaluador_T_Examen");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TExamenAsignadoEvaluador)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_ExamenAsignadoEvaluador_T_Personal");

                entity.HasOne(d => d.IdPostulanteNavigation)
                    .WithMany(p => p.TExamenAsignadoEvaluador)
                    .HasForeignKey(d => d.IdPostulante)
                    .HasConstraintName("FK_T_ExamenAsignadoEvaluador_T_Postulante");

                entity.HasOne(d => d.IdProcesoSeleccionNavigation)
                    .WithMany(p => p.TExamenAsignadoEvaluador)
                    .HasForeignKey(d => d.IdProcesoSeleccion)
                    .HasConstraintName("FK_T_ExamenAsignadoEvaluador_T_ProcesoSeleccion");
            });

            modelBuilder.Entity<TExamenComportamiento>(entity =>
            {
                entity.ToTable("T_ExamenComportamiento", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEvaluacionFeedbackAprobado).HasColumnName("IdEvaluacionFeedback_Aprobado");

                entity.Property(e => e.IdEvaluacionFeedbackCancelado).HasColumnName("IdEvaluacionFeedback_Cancelado");

                entity.Property(e => e.IdEvaluacionFeedbackDesaprobado).HasColumnName("IdEvaluacionFeedback_Desaprobado");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExamenConfiguracionFormato>(entity =>
            {
                entity.ToTable("T_ExamenConfiguracionFormato", "gp");

                entity.Property(e => e.ColorFondoEnunciado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoRespuesta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoTitulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoEnunciado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoRespuesta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoTitulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoLetraEnunciado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoLetraRespuesta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoLetraTitulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExamenConfigurarResultado>(entity =>
            {
                entity.ToTable("T_ExamenConfigurarResultado", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PuntajeAprobacion).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PuntajeExamen).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExamenFeedback>(entity =>
            {
                entity.ToTable("T_ExamenFeedback", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExamenRealizadoRespuesta>(entity =>
            {
                entity.ToTable("T_ExamenRealizadoRespuesta", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoRespuesta).HasMaxLength(250);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExamenRealizadoRespuestaAulaVirtual>(entity =>
            {
                entity.ToTable("T_ExamenRealizadoRespuestaAulaVirtual", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPespecificoPadre).HasColumnName("IdPEspecificoPadre");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdUsuarioWeb)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoRespuesta).HasMaxLength(250);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExamenRealizadoRespuestaEvaluador>(entity =>
            {
                entity.ToTable("T_ExamenRealizadoRespuestaEvaluador", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoRespuesta).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdExamenAsignadoEvaluadorNavigation)
                    .WithMany(p => p.TExamenRealizadoRespuestaEvaluador)
                    .HasForeignKey(d => d.IdExamenAsignadoEvaluador)
                    .HasConstraintName("FK_T_ExamenRealizadoRespuestaEvaluador_T_ExamenAsignadoEvaluador");

                entity.HasOne(d => d.IdPreguntaNavigation)
                    .WithMany(p => p.TExamenRealizadoRespuestaEvaluador)
                    .HasForeignKey(d => d.IdPregunta)
                    .HasConstraintName("FK_T_ExamenRealizadoRespuestaEvaluador_T_Pregunta");

                entity.HasOne(d => d.IdRespuestaPreguntaNavigation)
                    .WithMany(p => p.TExamenRealizadoRespuestaEvaluador)
                    .HasForeignKey(d => d.IdRespuestaPregunta)
                    .HasConstraintName("FK_T_ExamenRealizadoRespuestaEvaluador_T_RespuestaPregunta");
            });

            modelBuilder.Entity<TExamenTest>(entity =>
            {
                entity.ToTable("T_ExamenTest", "gp");

                entity.Property(e => e.Factor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAbreviado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExcepcionFrecuenciaPw>(entity =>
            {
                entity.ToTable("T_ExcepcionFrecuencia_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExperiencia>(entity =>
            {
                entity.ToTable("T_Experiencia", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExpositor>(entity =>
            {
                entity.ToTable("T_Expositor", "pla");

                entity.Property(e => e.ApellidoMaterno).HasMaxLength(300);

                entity.Property(e => e.ApellidoPaterno).HasMaxLength(300);

                entity.Property(e => e.AsistenteCelular)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AsistenteNombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.AsistenteTelefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Domicilio)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Email1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Email2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Email3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExperienciaProfesional).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("datetime");

                entity.Property(e => e.FormacionAcademica).IsUnicode(false);

                entity.Property(e => e.FotoDocente)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.HojaVidaResumidaPerfil).IsUnicode(false);

                entity.Property(e => e.HojaVidaResumidaSpeech).IsUnicode(false);

                entity.Property(e => e.IdCiudadDomicilio).HasColumnName("IdCiudad_Domicilio");

                entity.Property(e => e.IdCiudadLugarTrabajo).HasColumnName("IdCiudad_LugarTrabajo");

                entity.Property(e => e.IdCiudadProcedencia).HasColumnName("IdCiudad_Procedencia");

                entity.Property(e => e.IdPaisDomicilio).HasColumnName("IdPais_Domicilio");

                entity.Property(e => e.IdPaisLugarTrabajo).HasColumnName("IdPais_LugarTrabajo");

                entity.Property(e => e.IdPaisProcedencia).HasColumnName("IdPais_Procedencia");

                entity.Property(e => e.IdPersonalAsignado).HasColumnName("IdPersonal_Asignado");

                entity.Property(e => e.LugarTrabajo)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NroDocumento).HasMaxLength(50);

                entity.Property(e => e.OtraInformacion).IsUnicode(false);

                entity.Property(e => e.PremiosDistinciones).IsUnicode(false);

                entity.Property(e => e.PrimerNombre).HasMaxLength(300);

                entity.Property(e => e.Publicaciones).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SegundoNombre).HasMaxLength(300);

                entity.Property(e => e.TelfCelular1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TelfCelular2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TelfCelular3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UrlFotoDocente).HasMaxLength(500);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExpositorLog>(entity =>
            {
                entity.ToTable("T_ExpositorLog", "pla");

                entity.Property(e => e.CampoActualizado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAnterior)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNuevo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TExpositorPorArea>(entity =>
            {
                entity.ToTable("T_ExpositorPorArea", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookAnuncio>(entity =>
            {
                entity.ToTable("T_FacebookAnuncio", "mkt");

                entity.Property(e => e.FacebookId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookAnuncioCreativo>(entity =>
            {
                entity.ToTable("T_FacebookAnuncioCreativo", "mkt");

                entity.Property(e => e.FacebookId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoObjetivo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookAplicacion>(entity =>
            {
                entity.ToTable("T_FacebookAplicacion", "mkt");

                entity.Property(e => e.FacebookId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookAplicacionPagina>(entity =>
            {
                entity.ToTable("T_FacebookAplicacionPagina", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookAudiencia>(entity =>
            {
                entity.ToTable("T_FacebookAudiencia", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdAudiencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RecursoArchivoCliente)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Subtipo)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookAudienciaAlumno>(entity =>
            {
                entity.ToTable("T_FacebookAudienciaAlumno", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookAudienciaCuentaPublicitaria>(entity =>
            {
                entity.ToTable("T_FacebookAudienciaCuentaPublicitaria", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Origen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Subtipo)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookCampanha>(entity =>
            {
                entity.ToTable("T_FacebookCampanha", "mkt");

                entity.Property(e => e.EstadoFacebook)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Objetivo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookConjuntoAnuncioEstadisticaDiaria>(entity =>
            {
                entity.ToTable("T_FacebookConjuntoAnuncioEstadisticaDiaria", "mkt");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookCuentaPublicitaria>(entity =>
            {
                entity.ToTable("T_FacebookCuentaPublicitaria", "mkt");

                entity.Property(e => e.FacebookIdCuentaPublicitaria)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdNegocio)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookFormularioLeadgen>(entity =>
            {
                entity.ToTable("T_FacebookFormularioLeadgen", "mkt");

                entity.HasIndex(e => e.IdLeadgenFacebook)
                    .HasName("UC_T_FacebookFormularioLeadgen_PorIdLeadgenFacebook")
                    .IsUnique();

                entity.HasIndex(e => new { e.NombreCampaniaFacebook, e.Email, e.FechaModificacion })
                    .HasName("INC_T_FacebookFormularioLeadgen_PorEmailPorFechaModificacion");

                entity.Property(e => e.AreaFormacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AreaTrabajo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cargo)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Excepcion).IsUnicode(false);

                entity.Property(e => e.FacebookAnuncioId)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookAnuncioNombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionFacebook).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCampanhaFacebook)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.IdLeadgenFacebook)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Industria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InicioCapacitacion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCampaniaFacebook)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompleto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookFormularioWebhookLeadgen>(entity =>
            {
                entity.ToTable("T_FacebookFormularioWebhookLeadgen", "mkt");

                entity.Property(e => e.FacebookFechaLead).HasColumnType("datetime");

                entity.Property(e => e.FacebookFechaUnix)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdCampania)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdFormulario)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdGrupo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdLeadgen)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdPagina)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookFormularioWebhookLeadgenError>(entity =>
            {
                entity.ToTable("T_FacebookFormularioWebhookLeadgenError", "mkt");

                entity.Property(e => e.Error)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.ErrorReal)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FacebookFechaUnix)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdCampania)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdFormulario)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdGrupo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdLead)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookIdPagina)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookPagina>(entity =>
            {
                entity.ToTable("T_FacebookPagina", "mkt");

                entity.Property(e => e.FacebookId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookPost>(entity =>
            {
                entity.ToTable("T_FacebookPost", "com");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCosto2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConjuntoAnuncioIdFacebook)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAnuncioFacebook)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdPostFacebook)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Link)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.PermalinkUrl)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlPicture).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookPostLogTask>(entity =>
            {
                entity.ToTable("T_FacebookPostLogTask", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.ResponseJson).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookReaccionPublicacion>(entity =>
            {
                entity.ToTable("T_FacebookReaccionPublicacion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookTipoReaccion>(entity =>
            {
                entity.ToTable("T_FacebookTipoReaccion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookUsuario>(entity =>
            {
                entity.ToTable("T_FacebookUsuario", "mkt");

                entity.Property(e => e.Apellidos)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FacebookId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombres)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFacebookUsuarioOportunidad>(entity =>
            {
                entity.ToTable("T_FacebookUsuarioOportunidad", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Psid)
                    .IsRequired()
                    .HasColumnName("PSID")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFaseByPlantilla>(entity =>
            {
                entity.ToTable("T_FaseByPlantilla", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreFase).HasMaxLength(10);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPlantillaNavigation)
                    .WithMany(p => p.TFaseByPlantilla)
                    .HasForeignKey(d => d.IdPlantilla)
                    .HasConstraintName("FK_T_FaseByPlantilla_T_Plantilla");
            });

            modelBuilder.Entity<TFaseOportunidad>(entity =>
            {
                entity.ToTable("T_FaseOportunidad", "pla");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('SYSTEM')");

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('SYSTEM')");
            });

            modelBuilder.Entity<TFaseTiempoLlamada>(entity =>
            {
                entity.ToTable("T_FaseTiempoLlamada", "mkt");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFeedbackConfigurar>(entity =>
            {
                entity.ToTable("T_FeedbackConfigurar", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFeedbackTipoNavigation)
                    .WithMany(p => p.TFeedbackConfigurar)
                    .HasForeignKey(d => d.IdFeedbackTipo)
                    .HasConstraintName("FK_T_FeedbackConfigurar_T_FeedbackConfigurar");
            });

            modelBuilder.Entity<TFeedbackConfigurarDetalle>(entity =>
            {
                entity.ToTable("T_FeedbackConfigurarDetalle", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreVideo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFeedbackConfigurarNavigation)
                    .WithMany(p => p.TFeedbackConfigurarDetalle)
                    .HasForeignKey(d => d.IdFeedbackConfigurar)
                    .HasConstraintName("FK_T_FeedbackConfigurarDetalle_T_FeedbackConfigurar");

                entity.HasOne(d => d.IdSexoNavigation)
                    .WithMany(p => p.TFeedbackConfigurarDetalle)
                    .HasForeignKey(d => d.IdSexo)
                    .HasConstraintName("FK_T_FeedbackConfigurarDetalle_T_Sexo");
            });

            modelBuilder.Entity<TFeedbackConfigurarGrupoPregunta>(entity =>
            {
                entity.ToTable("T_FeedbackConfigurarGrupoPregunta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFeedbackConfigurarNavigation)
                    .WithMany(p => p.TFeedbackConfigurarGrupoPregunta)
                    .HasForeignKey(d => d.IdFeedbackConfigurar)
                    .HasConstraintName("FK_T_FeedbackConfigurarGrupoPregunta_T_FeedbackConfigurar");
            });

            modelBuilder.Entity<TFeedbackGrupoPreguntaProgramaEspecifico>(entity =>
            {
                entity.ToTable("T_FeedbackGrupoPreguntaProgramaEspecifico", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFeedbackConfigurarGrupoPreguntaNavigation)
                    .WithMany(p => p.TFeedbackGrupoPreguntaProgramaEspecifico)
                    .HasForeignKey(d => d.IdFeedbackConfigurarGrupoPregunta)
                    .HasConstraintName("FK_T_FeedbackGrupoPreguntaProgramaEspecifico_T_FeedbackConfigurarGrupoPregunta");

                entity.HasOne(d => d.IdPespecificoNavigation)
                    .WithMany(p => p.TFeedbackGrupoPreguntaProgramaEspecifico)
                    .HasForeignKey(d => d.IdPespecifico)
                    .HasConstraintName("FK_T_FeedbackGrupoPreguntaProgramaEspecifico_T_PEspecifico");
            });

            modelBuilder.Entity<TFeedbackGrupoPreguntaProgramaGeneral>(entity =>
            {
                entity.ToTable("T_FeedbackGrupoPreguntaProgramaGeneral", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFeedbackConfigurarGrupoPreguntaNavigation)
                    .WithMany(p => p.TFeedbackGrupoPreguntaProgramaGeneral)
                    .HasForeignKey(d => d.IdFeedbackConfigurarGrupoPregunta)
                    .HasConstraintName("FK_T_FeedbackGrupoPreguntaProgramaGeneral_T_FeedbackConfigurarGrupoPregunta");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TFeedbackGrupoPreguntaProgramaGeneral)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_FeedbackGrupoPreguntaProgramaGeneral_T_PGeneral");
            });

            modelBuilder.Entity<TFeedbackTipo>(entity =>
            {
                entity.ToTable("T_FeedbackTipo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFeriado>(entity =>
            {
                entity.ToTable("T_Feriado", "pla");

                entity.Property(e => e.Dia).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Motivo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFeriadoEspecial>(entity =>
            {
                entity.ToTable("T_FeriadoEspecial", "pla");

                entity.Property(e => e.Dia).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Motivo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFeriadoFrecuencia>(entity =>
            {
                entity.ToTable("T_FeriadoFrecuencia", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFeriadoTipo>(entity =>
            {
                entity.ToTable("T_FeriadoTipo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFiltroSegmento>(entity =>
            {
                entity.ToTable("T_FiltroSegmento", "mkt");

                entity.Property(e => e.ConsiderarInteraccionChatPw).HasColumnName("ConsiderarInteraccionChatPW");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EsRn2).HasColumnName("EsRN2");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinChatIntegra).HasColumnType("date");

                entity.Property(e => e.FechaFinCorreo).HasColumnType("date");

                entity.Property(e => e.FechaFinCreacionUltimaOportunidad).HasColumnType("date");

                entity.Property(e => e.FechaFinExcluirPorCorreoEnviadoMismoProgramaGeneralPrincipal).HasColumnType("date");

                entity.Property(e => e.FechaFinFormulario).HasColumnType("date");

                entity.Property(e => e.FechaFinInteraccionSitioWeb).HasColumnType("date");

                entity.Property(e => e.FechaFinLlamada).HasColumnType("date");

                entity.Property(e => e.FechaFinMatriculaAlumno).HasColumnType("date");

                entity.Property(e => e.FechaFinModificacionUltimaActividadDetalle).HasColumnType("date");

                entity.Property(e => e.FechaFinProgramacionUltimaActividadDetalleRn2).HasColumnType("date");

                entity.Property(e => e.FechaInicioChatIntegra).HasColumnType("date");

                entity.Property(e => e.FechaInicioCorreo).HasColumnType("date");

                entity.Property(e => e.FechaInicioCreacionUltimaOportunidad).HasColumnType("date");

                entity.Property(e => e.FechaInicioExcluirPorCorreoEnviadoMismoProgramaGeneralPrincipal).HasColumnType("date");

                entity.Property(e => e.FechaInicioFormulario).HasColumnType("date");

                entity.Property(e => e.FechaInicioInteraccionSitioWeb).HasColumnType("date");

                entity.Property(e => e.FechaInicioLlamada).HasColumnType("date");

                entity.Property(e => e.FechaInicioMatriculaAlumno).HasColumnType("date");

                entity.Property(e => e.FechaInicioModificacionUltimaActividadDetalle).HasColumnType("date");

                entity.Property(e => e.FechaInicioProgramacionUltimaActividadDetalleRn2).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdOperadorComparacionDuracionLlamada).HasColumnName("IdOperadorComparacion_DuracionLlamada");

                entity.Property(e => e.IdOperadorComparacionDuracionPromedioLlamadaPorOportunidad).HasColumnName("IdOperadorComparacion_DuracionPromedioLlamadaPorOportunidad");

                entity.Property(e => e.IdOperadorComparacionDuracionTotalLlamadaPorOportunidad).HasColumnName("IdOperadorComparacion_DuracionTotalLlamadaPorOportunidad");

                entity.Property(e => e.IdOperadorComparacionMontoDisponibleTotalEnTcs).HasColumnName("IdOperadorComparacion_MontoDisponibleTotalEnTcs");

                entity.Property(e => e.IdOperadorComparacionMontoMaximoOtorgadoEnUnaTc).HasColumnName("IdOperadorComparacion_MontoMaximoOtorgadoEnUnaTc");

                entity.Property(e => e.IdOperadorComparacionMontoMaximoOtorgadoLineaCreditoVigente).HasColumnName("IdOperadorComparacion_MontoMaximoOtorgadoLineaCreditoVigente");

                entity.Property(e => e.IdOperadorComparacionMontoMinimoOtorgadoEnUnaTc).HasColumnName("IdOperadorComparacion_MontoMinimoOtorgadoEnUnaTc");

                entity.Property(e => e.IdOperadorComparacionMontoMinimoOtorgadoLineaCreditoVigente).HasColumnName("IdOperadorComparacion_MontoMinimoOtorgadoLineaCreditoVigente");

                entity.Property(e => e.IdOperadorComparacionMontoTotalLineaCreditoVigente).HasColumnName("IdOperadorComparacion_MontoTotalLineaCreditoVigente");

                entity.Property(e => e.IdOperadorComparacionMontoTotalLineaCreditoVigenteVencida).HasColumnName("IdOperadorComparacion_MontoTotalLineaCreditoVigenteVencida");

                entity.Property(e => e.IdOperadorComparacionMontoTotalOtorgadoEnTcs).HasColumnName("IdOperadorComparacion_MontoTotalOtorgadoEnTcs");

                entity.Property(e => e.IdOperadorComparacionNroClickEnlaceDirectorioTagAreaSubArea).HasColumnName("IdOperadorComparacion_NroClickEnlaceDirectorioTagAreaSubArea");

                entity.Property(e => e.IdOperadorComparacionNroClickEnlacePaginaMisCursos).HasColumnName("IdOperadorComparacion_NroClickEnlacePaginaMisCursos");

                entity.Property(e => e.IdOperadorComparacionNroClickEnlacePaginaPrograma).HasColumnName("IdOperadorComparacion_NroClickEnlacePaginaPrograma");

                entity.Property(e => e.IdOperadorComparacionNroClickEnlaceTodoSitioWeb).HasColumnName("IdOperadorComparacion_NroClickEnlaceTodoSitioWeb");

                entity.Property(e => e.IdOperadorComparacionNroClicksEnlace).HasColumnName("IdOperadorComparacion_NroClicksEnlace");

                entity.Property(e => e.IdOperadorComparacionNroClicksEnlaceMailChimp).HasColumnName("IdOperadorComparacion_NroClicksEnlaceMailChimp");

                entity.Property(e => e.IdOperadorComparacionNroClicksEnlacePaginaCursoDiplomado).HasColumnName("IdOperadorComparacion_NroClicksEnlacePaginaCursoDiplomado");

                entity.Property(e => e.IdOperadorComparacionNroCorreosAbiertos).HasColumnName("IdOperadorComparacion_NroCorreosAbiertos");

                entity.Property(e => e.IdOperadorComparacionNroCorreosAbiertosMailChimp).HasColumnName("IdOperadorComparacion_NroCorreosAbiertosMailChimp");

                entity.Property(e => e.IdOperadorComparacionNroCorreosNoAbiertos).HasColumnName("IdOperadorComparacion_NroCorreosNoAbiertos");

                entity.Property(e => e.IdOperadorComparacionNroCorreosNoAbiertosMailChimp).HasColumnName("IdOperadorComparacion_NroCorreosNoAbiertosMailChimp");

                entity.Property(e => e.IdOperadorComparacionNroLlamada).HasColumnName("IdOperadorComparacion_NroLlamada");

                entity.Property(e => e.IdOperadorComparacionNroOportunidades).HasColumnName("IdOperadorComparacion_NroOportunidades");

                entity.Property(e => e.IdOperadorComparacionNroPalabrasClienteChatOffline).HasColumnName("IdOperadorComparacion_NroPalabrasClienteChatOffline");

                entity.Property(e => e.IdOperadorComparacionNroPalabrasClienteChatOnline).HasColumnName("IdOperadorComparacion_NroPalabrasClienteChatOnline");

                entity.Property(e => e.IdOperadorComparacionNroSolicitudInformacion).HasColumnName("IdOperadorComparacion_NroSolicitudInformacion");

                entity.Property(e => e.IdOperadorComparacionNroSolicitudInformacionArea).HasColumnName("IdOperadorComparacion_NroSolicitudInformacionArea");

                entity.Property(e => e.IdOperadorComparacionNroSolicitudInformacionPg).HasColumnName("IdOperadorComparacion_NroSolicitudInformacionPG");

                entity.Property(e => e.IdOperadorComparacionNroSolicitudInformacionSubArea).HasColumnName("IdOperadorComparacion_NroSolicitudInformacionSubArea");

                entity.Property(e => e.IdOperadorComparacionNroTcOtorgada).HasColumnName("IdOperadorComparacion_NroTcOtorgada");

                entity.Property(e => e.IdOperadorComparacionNroTotalLineaCreditoVigente).HasColumnName("IdOperadorComparacion_NroTotalLineaCreditoVigente");

                entity.Property(e => e.IdOperadorComparacionNroTotalLineaCreditoVigenteVencida).HasColumnName("IdOperadorComparacion_NroTotalLineaCreditoVigenteVencida");

                entity.Property(e => e.IdOperadorComparacionNroVisitaPaginaCursoDiplomado).HasColumnName("IdOperadorComparacion_NroVisitaPaginaCursoDiplomado");

                entity.Property(e => e.IdOperadorComparacionNroVisitasDirectorioTagAreaSubArea).HasColumnName("IdOperadorComparacion_NroVisitasDirectorioTagAreaSubArea");

                entity.Property(e => e.IdOperadorComparacionNroVisitasPaginaMisCursos).HasColumnName("IdOperadorComparacion_NroVisitasPaginaMisCursos");

                entity.Property(e => e.IdOperadorComparacionTasaEjecucionLlamada).HasColumnName("IdOperadorComparacion_TasaEjecucionLlamada");

                entity.Property(e => e.IdOperadorComparacionTiempoMaximoRespuestaChatOnline).HasColumnName("IdOperadorComparacion_TiempoMaximoRespuestaChatOnline");

                entity.Property(e => e.IdOperadorComparacionTiempoPromedioRespuestaChatOnline).HasColumnName("IdOperadorComparacion_TiempoPromedioRespuestaChatOnline");

                entity.Property(e => e.IdOperadorComparacionTiempoVisualizacionMaximaEnUnaPaginaWebPaginaBscampus).HasColumnName("IdOperadorComparacion_TiempoVisualizacionMaximaEnUnaPaginaWebPaginaBSCampus");

                entity.Property(e => e.IdOperadorComparacionTiempoVisualizacionMaximaEnUnaPaginaWebPaginaProgramas).HasColumnName("IdOperadorComparacion_TiempoVisualizacionMaximaEnUnaPaginaWebPaginaProgramas");

                entity.Property(e => e.IdOperadorComparacionTiempoVisualizacionTotalDirectorioTagAreaSubArea).HasColumnName("IdOperadorComparacion_TiempoVisualizacionTotalDirectorioTagAreaSubArea");

                entity.Property(e => e.IdOperadorComparacionTiempoVisualizacionTotalPaginaBscampus).HasColumnName("IdOperadorComparacion_TiempoVisualizacionTotalPaginaBSCampus");

                entity.Property(e => e.IdOperadorComparacionTiempoVisualizacionTotalPaginaCursoDiplomado).HasColumnName("IdOperadorComparacion_TiempoVisualizacionTotalPaginaCursoDiplomado");

                entity.Property(e => e.IdOperadorComparacionTiempoVisualizacionTotalPaginaMisCursos).HasColumnName("IdOperadorComparacion_TiempoVisualizacionTotalPaginaMisCursos");

                entity.Property(e => e.IdOperadorComparacionTiempoVisualizacionTotalPaginaPrograma).HasColumnName("IdOperadorComparacion_TiempoVisualizacionTotalPaginaPrograma");

                entity.Property(e => e.IdOperadorComparacionTiempoVisualizacionTotalSitioWeb).HasColumnName("IdOperadorComparacion_TiempoVisualizacionTotalSitioWeb");

                entity.Property(e => e.IdTiempoFrecuenciaCumpleaniosContactoDentroDe).HasColumnName("IdTiempoFrecuencia_CumpleaniosContactoDentroDe");

                entity.Property(e => e.IdTiempoFrecuenciaMatriculaAlumno).HasColumnName("IdTiempoFrecuencia_MatriculaAlumno");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NroSolicitudInformacionPg).HasColumnName("NroSolicitudInformacionPG");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TiempoVisualizacionMaximaEnUnaPaginaWebPaginaBscampus).HasColumnName("TiempoVisualizacionMaximaEnUnaPaginaWebPaginaBSCampus");

                entity.Property(e => e.TiempoVisualizacionTotalPaginaBscampus).HasColumnName("TiempoVisualizacionTotalPaginaBSCampus");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFiltroSegmentoCalculado>(entity =>
            {
                entity.ToTable("T_FiltroSegmentoCalculado", "mkt");

                entity.HasIndex(e => new { e.IdAlumno, e.TieneVentaCruzada, e.IdFiltroSegmento })
                    .HasName("IDX_FiltroIdAlumno");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFiltroSegmentoDetalle>(entity =>
            {
                entity.ToTable("T_FiltroSegmentoDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFiltroSegmentoNavigation)
                    .WithMany(p => p.TFiltroSegmentoDetalle)
                    .HasForeignKey(d => d.IdFiltroSegmento)
                    .HasConstraintName("FK_T_FiltroSegmentoDetalle_T_FiltroSegmento");
            });

            modelBuilder.Entity<TFiltroSegmentoTipoContacto>(entity =>
            {
                entity.ToTable("T_FiltroSegmentoTipoContacto", "conf");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFiltroSegmentoTipoNivel>(entity =>
            {
                entity.ToTable("T_FiltroSegmentoTipoNivel", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFiltroSegmentoValorTipo>(entity =>
            {
                entity.ToTable("T_FiltroSegmentoValorTipo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFiltroSegmentoNavigation)
                    .WithMany(p => p.TFiltroSegmentoValorTipo)
                    .HasForeignKey(d => d.IdFiltroSegmento)
                    .HasConstraintName("FK_T_FiltroSegmentoValorTipo_T_FiltroSegmento");
            });

            modelBuilder.Entity<TFlujo>(entity =>
            {
                entity.ToTable("T_Flujo", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFlujoActividad>(entity =>
            {
                entity.ToTable("T_FlujoActividad", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFlujoFase>(entity =>
            {
                entity.ToTable("T_FlujoFase", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFlujoOcurrencia>(entity =>
            {
                entity.ToTable("T_FlujoOcurrencia", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdFaseDestino).HasColumnName("IdFase_Destino");

                entity.Property(e => e.IdFlujoActividadSiguiente).HasColumnName("IdFlujoActividad_Siguiente");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFlujoPorPespecifico>(entity =>
            {
                entity.ToTable("T_FlujoPorPEspecifico", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEjecucion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSeguimiento).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormaCalculoEvaluacion>(entity =>
            {
                entity.ToTable("T_FormaCalculoEvaluacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormaCalificacionEvaluacion>(entity =>
            {
                entity.ToTable("T_FormaCalificacionEvaluacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormaPago>(entity =>
            {
                entity.ToTable("T_FormaPago", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormulaPuntaje>(entity =>
            {
                entity.ToTable("T_FormulaPuntaje", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormulaTipoDescuento>(entity =>
            {
                entity.ToTable("T_FormulaTipoDescuento", "pla");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormularioIncompletoPreprocesado>(entity =>
            {
                entity.ToTable("T_FormularioIncompletoPreprocesado", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_FormularioIncompletoPreprocesado_PorIdMigracion");

                entity.Property(e => e.Apellidos)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Correo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistroCampania).HasColumnType("datetime");

                entity.Property(e => e.Fijo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Movil)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Nombres)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Origen)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlOrigen).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormularioIncompletoProcesado>(entity =>
            {
                entity.ToTable("T_FormularioIncompletoProcesado", "mkt");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_FormularioIncompletoProcesado_PorIdMigracion");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Celular)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramada).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistroCampania).HasColumnType("datetime");

                entity.Property(e => e.Nombre1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OrigenCampania)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UrlOrigen).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormularioLandingAb>(entity =>
            {
                entity.ToTable("T_FormularioLandingAB", "mkt");

                entity.Property(e => e.Descripcion).IsRequired();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdTesteoAb).HasColumnName("IdTesteoAB");

                entity.Property(e => e.NombrePrograma)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoFormulario).IsRequired();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTesteoAbNavigation)
                    .WithMany(p => p.TFormularioLandingAb)
                    .HasForeignKey(d => d.IdTesteoAb)
                    .HasConstraintName("FK_T_FormularioLandingAB_T_TesteoAB");
            });

            modelBuilder.Entity<TFormularioLandingPage>(entity =>
            {
                entity.ToTable("T_FormularioLandingPage", "mkt");

                entity.Property(e => e.Cita1Color)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cita1Despues).IsUnicode(false);

                entity.Property(e => e.Cita1Texto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Cita3Color)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cita3Texto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Cita4Color)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cita4Texto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ColorDescripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoBoton)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoHeader)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorPlaceHolder)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorPopup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoBoton)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTitulo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdGmailClienteReceptor).HasColumnName("IdGmailCliente_Receptor");

                entity.Property(e => e.IdGmailClienteRemitente).HasColumnName("IdGmailCliente_Remitente");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TesteoAb).HasColumnName("TesteoAB");

                entity.Property(e => e.TextoPopup)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TituloPopup)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UrlImagenPrincipal)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormularioPlantilla>(entity =>
            {
                entity.ToTable("T_FormularioPlantilla", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFormularioLandingPageNavigation)
                    .WithMany(p => p.TFormularioPlantilla)
                    .HasForeignKey(d => d.IdFormularioLandingPage)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_FormularioPlantilla_T_FormularioLandingPage");

                entity.HasOne(d => d.IdFormularioSolicitudNavigation)
                    .WithMany(p => p.TFormularioPlantilla)
                    .HasForeignKey(d => d.IdFormularioSolicitud)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_FormularioPlantilla_T_FormularioSolicitud");
            });

            modelBuilder.Entity<TFormularioRespuesta>(entity =>
            {
                entity.ToTable("T_FormularioRespuesta", "mkt");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ColorBordeInferiorBotonBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoBotonBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoBotonInvitacion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoBotonBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoBotonInvitacion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoDescripcionPgeneral)
                    .HasColumnName("ColorTextoDescripcionPGeneral")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoInvitacionBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoPgeneral)
                    .HasColumnName("ColorTextoPGeneral")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ContenidoSeccionTelefonos)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FondoBotonLadoInvitacion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProgramaGeneral)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.ResumenProgramaGeneral).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoBotonBrochure)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TextoBotonInvitacionArea)
                    .HasColumnName("TextoBotonInvitacionAREA")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoBotonInvitacionPagina)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoInvitacionBrochure)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlBotonInvitacionArea)
                    .HasColumnName("UrlBotonInvitacionAREA")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlBotonInvitacionPagina)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlImagenLadoInvitacion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Urlbrochure)
                    .HasColumnName("URLBrochure")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Urllogotipo)
                    .HasColumnName("URLLogotipo")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormularioRespuestaPlantilla>(entity =>
            {
                entity.ToTable("T_FormularioRespuestaPlantilla", "mkt");

                entity.Property(e => e.ColorBordeInferiorBotonBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoBotonBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoBotonInvitacion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoBotonBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoBotonInvitacion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoDescripcionPgeneral)
                    .HasColumnName("ColorTextoDescripcionPGeneral")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoInvitacionBrochure)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoPgeneral)
                    .HasColumnName("ColorTextoPGeneral")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ContenidoSeccionTelefonos)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FondoBotonLadoInvitacion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePlantilla)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoBotonBrochure)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TextoBotonInvitacionArea)
                    .HasColumnName("TextoBotonInvitacionAREA")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoBotonInvitacionPagina)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextoInvitacionBrochure)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UrlimagenLadoInvitacion)
                    .HasColumnName("URLImagenLadoInvitacion")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormularioSolicitud>(entity =>
            {
                entity.ToTable("T_FormularioSolicitud", "mkt");

                entity.Property(e => e.Campanha)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoSegmento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlbotonInvitacionPagina)
                    .HasColumnName("URLBotonInvitacionPagina")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFormularioSolicitudTextoBoton>(entity =>
            {
                entity.ToTable("T_FormularioSolicitudTextoBoton", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoBoton)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFrecuencia>(entity =>
            {
                entity.ToTable("T_Frecuencia", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFrecuenciaPuestoTrabajo>(entity =>
            {
                entity.ToTable("T_FrecuenciaPuestoTrabajo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFur>(entity =>
            {
                entity.ToTable("T_Fur", "fin");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Descripcion).HasMaxLength(500);

                entity.Property(e => e.FechaAprobacionProcesoCulminado).HasColumnType("datetime");

                entity.Property(e => e.FechaCobroBanco).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaLimite).HasColumnType("datetime");

                entity.Property(e => e.FechaLimiteReprogramacion).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.IdFurFaseAprobacion1).HasColumnName("IdFurFaseAprobacion_1");

                entity.Property(e => e.IdMonedaPagoReal).HasColumnName("IdMoneda_PagoReal");

                entity.Property(e => e.IdMonedaPagoRealizado).HasColumnName("IdMoneda_PagoRealizado");

                entity.Property(e => e.IdMonedaProveedor).HasColumnName("IdMoneda_Proveedor");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Monto).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.MontoProyectado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NumeroCuenta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroFur)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroRecibo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PagoDolares).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PagoMonedaOrigen).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PrecioTotalDolares).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PrecioTotalMonedaOrigen).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PrecioUnitarioDolares).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PrecioUnitarioMonedaOrigen).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ResponsableCobro).HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioAutoriza)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSolicitud)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEmpresaNavigation)
                    .WithMany(p => p.TFur)
                    .HasForeignKey(d => d.IdEmpresa)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_Fur_T_Empresa");
            });

            modelBuilder.Entity<TFurConfiguracionAutomatica>(entity =>
            {
                entity.ToTable("T_FurConfiguracionAutomatica", "fin");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinConfiguracion).HasColumnType("date");

                entity.Property(e => e.FechaGeneracionFur).HasColumnType("date");

                entity.Property(e => e.FechaInicioConfiguracion).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFurFaseAprobacion>(entity =>
            {
                entity.ToTable("T_FurFaseAprobacion", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFurLog>(entity =>
            {
                entity.ToTable("T_FurLog", "fin");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Descripcion).HasMaxLength(500);

                entity.Property(e => e.FechaAprobacionProcesoCulminado).HasColumnType("datetime");

                entity.Property(e => e.FechaCobroBanco).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaLimite).HasColumnType("datetime");

                entity.Property(e => e.FechaLimiteReprogramacion).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.IdFurFaseAprobacion1).HasColumnName("IdFurFaseAprobacion_1");

                entity.Property(e => e.IdMonedaPagoReal).HasColumnName("IdMoneda_PagoReal");

                entity.Property(e => e.IdMonedaPagoRealizado).HasColumnName("IdMoneda_PagoRealizado");

                entity.Property(e => e.IdMonedaProveedor).HasColumnName("IdMoneda_Proveedor");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Monto).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.MontoProyectado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NumeroCuenta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroFur)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroRecibo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PagoDolares).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PagoMonedaOrigen).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PrecioTotalDolares).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PrecioTotalMonedaOrigen).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PrecioUnitarioDolares).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PrecioUnitarioMonedaOrigen).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ResponsableCobro).HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioAutoriza)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSolicitud)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFurPago>(entity =>
            {
                entity.ToTable("T_FurPago", "fin");

                entity.Property(e => e.FechaCobroBanco).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NumeroRecibo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioTotalMonedaDolares).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PrecioTotalMonedaOrigen).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                    .WithMany(p => p.TFurPago)
                    .HasForeignKey(d => d.IdCuentaCorriente)
                    .HasConstraintName("FK_T_FurPago_T_CuentaCorriente");
            });

            modelBuilder.Entity<TFurSubFaseAprobacion>(entity =>
            {
                entity.ToTable("T_FurSubFaseAprobacion", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFurTipoPedido>(entity =>
            {
                entity.ToTable("T_FurTipoPedido", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TFurTipoSolicitud>(entity =>
            {
                entity.ToTable("T_FurTipoSolicitud", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGastoFinancieroCronograma>(entity =>
            {
                entity.ToTable("T_GastoFinancieroCronograma", "fin");

                entity.Property(e => e.CapitalTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.InteresTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGastoFinancieroCronogramaDetalle>(entity =>
            {
                entity.ToTable("T_GastoFinancieroCronogramaDetalle", "fin");

                entity.Property(e => e.CapitalCuota).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimientoCuota).HasColumnType("date");

                entity.Property(e => e.InteresCuota).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdGastoFinancieroCronogramaNavigation)
                    .WithMany(p => p.TGastoFinancieroCronogramaDetalle)
                    .HasForeignKey(d => d.IdGastoFinancieroCronograma)
                    .HasConstraintName("FK_T_GastoFinancieroCronogramaDetalle_T_GastoFinancieroCronograma");
            });

            modelBuilder.Entity<TGenero>(entity =>
            {
                entity.ToTable("T_Genero", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGmailCliente>(entity =>
            {
                entity.ToTable("T_GmailCliente", "mkt");

                entity.Property(e => e.AliasEmailAsesor)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ClientSecret)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAsesor)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdClient)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAsesor)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordCorreo)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGmailCorreo>(entity =>
            {
                entity.ToTable("T_GmailCorreo", "mkt");

                entity.HasIndex(e => new { e.Asunto, e.Destinatarios, e.Fecha, e.Seen, e.IdEtiqueta, e.IdPersonal, e.Remitente, e.Id })
                    .HasName("INC_T_GmailCorreo_PorSP_ObtenerCorreosEnviadosPorPersonal");

                entity.Property(e => e.Asunto)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Bcc)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Cc).IsUnicode(false);

                entity.Property(e => e.Destinatarios).HasColumnType("varchar(max)");

                entity.Property(e => e.EmailBody).IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Filas).HasColumnName("filas");

                entity.Property(e => e.IdCorreoGmailFormat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdGmailCliente).HasColumnName("IdGMailCliente");

                entity.Property(e => e.Remitente)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ResumenMensaje)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGmailCorreoArchivoAdjunto>(entity =>
            {
                entity.ToTable("T_GmailCorreoArchivoAdjunto", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlArchivoRepositorio).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdGmailCorreoNavigation)
                    .WithMany(p => p.TGmailCorreoArchivoAdjunto)
                    .HasForeignKey(d => d.IdGmailCorreo)
                    .HasConstraintName("FK_T_GmailCorreoArchivoAdjunto_T_GmailCorreo");
            });

            modelBuilder.Entity<TGmailFolder>(entity =>
            {
                entity.ToTable("T_GmailFolder", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGmailLabel>(entity =>
            {
                entity.ToTable("T_GmailLabel", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreLabel)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGoogleAnalyticsMetrica>(entity =>
            {
                entity.ToTable("T_GoogleAnalyticsMetrica", "mkt");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGoogleAnalyticsReporteDetalle>(entity =>
            {
                entity.ToTable("T_GoogleAnalyticsReporteDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGoogleAnalyticsReportePagina>(entity =>
            {
                entity.ToTable("T_GoogleAnalyticsReportePagina", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGoogleAnalyticsSegmento>(entity =>
            {
                entity.ToTable("T_GoogleAnalyticsSegmento", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreIngles)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGradoEstudio>(entity =>
            {
                entity.ToTable("T_GradoEstudio", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGrupoComparacionProcesoSeleccion>(entity =>
            {
                entity.ToTable("T_GrupoComparacionProcesoSeleccion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPuestoTrabajoNavigation)
                    .WithMany(p => p.TGrupoComparacionProcesoSeleccion)
                    .HasForeignKey(d => d.IdPuestoTrabajo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_GrupoComparacionProcesoSeleccion_T_PuestoTrabajo");

                entity.HasOne(d => d.IdSedeTrabajoNavigation)
                    .WithMany(p => p.TGrupoComparacionProcesoSeleccion)
                    .HasForeignKey(d => d.IdSedeTrabajo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_GrupoComparacionProcesoSeleccion_T_SedeTrabajo");
            });

            modelBuilder.Entity<TGrupoComponenteEvaluacion>(entity =>
            {
                entity.ToTable("T_GrupoComponenteEvaluacion", "gp");

                entity.Property(e => e.Factor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAbreviado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGrupoFiltroProgramaCritico>(entity =>
            {
                entity.ToTable("T_GrupoFiltroProgramaCritico", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGrupoFiltroProgramaCriticoCentroCosto>(entity =>
            {
                entity.ToTable("T_GrupoFiltroProgramaCriticoCentroCosto", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCentroCostoNavigation)
                    .WithMany(p => p.TGrupoFiltroProgramaCriticoCentroCosto)
                    .HasForeignKey(d => d.IdCentroCosto)
                    .HasConstraintName("FK_T_GrupoFiltroProgramaCriticoCentroCosto_T_CentroCosto");

                entity.HasOne(d => d.IdGrupoFiltroProgramaCriticoNavigation)
                    .WithMany(p => p.TGrupoFiltroProgramaCriticoCentroCosto)
                    .HasForeignKey(d => d.IdGrupoFiltroProgramaCritico)
                    .HasConstraintName("FK_T_GrupoFiltroProgramaCriticoCentroCosto_T_GrupoFiltroProgramaCritico");
            });

            modelBuilder.Entity<TGrupoFiltroProgramaCriticoPgeneral>(entity =>
            {
                entity.ToTable("T_GrupoFiltroProgramaCriticoPGeneral", "mkt");

                entity.HasIndex(e => new { e.IdGrupoFiltroProgramaCritico, e.IdPgeneral })
                    .HasName("INC_GrupoFiltroProgramaCriticoPGeneral_PorIdPGeneral");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TGrupoFiltroProgramaCriticoPorAsesor>(entity =>
            {
                entity.ToTable("T_GrupoFiltroProgramaCriticoPorAsesor", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdGrupoFiltroProgramaCriticoNavigation)
                    .WithMany(p => p.TGrupoFiltroProgramaCriticoPorAsesor)
                    .HasForeignKey(d => d.IdGrupoFiltroProgramaCritico)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_GrupoFiltroProgramaCriticoPorAsesor_T_GrupoFiltroProgramaCritico");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TGrupoFiltroProgramaCriticoPorAsesor)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_GrupoFiltroProgramaCriticoPorAsesor_T_Personal");
            });

            modelBuilder.Entity<THabilidadSimulador>(entity =>
            {
                entity.ToTable("T_HabilidadSimulador", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<THistoricoDetalleOportunidadRn2>(entity =>
            {
                entity.ToTable("T_HistoricoDetalleOportunidadRN2", "com");

                entity.Property(e => e.EstadoValidacionRn2)
                    .IsRequired()
                    .HasColumnName("EstadoValidacionRN2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaLog).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramacionActual).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramacionNueva).HasColumnType("datetime");

                entity.Property(e => e.IdHistoricoOportunidadRn2).HasColumnName("IdHistoricoOportunidadRN2");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAlumnoNavigation)
                    .WithMany(p => p.THistoricoDetalleOportunidadRn2)
                    .HasForeignKey(d => d.IdAlumno)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_HistoricoDetalleOportunidadRN2_T_Alumno");

                entity.HasOne(d => d.IdHistoricoOportunidadRn2Navigation)
                    .WithMany(p => p.THistoricoDetalleOportunidadRn2)
                    .HasForeignKey(d => d.IdHistoricoOportunidadRn2)
                    .HasConstraintName("FK_T_HistoricoDetalleOportunidadRN2_T_HistoricoOportunidadRN2");
            });

            modelBuilder.Entity<THistoricoOportunidadRn2>(entity =>
            {
                entity.ToTable("T_HistoricoOportunidadRN2", "com");

                entity.Property(e => e.EstadoValidacionRn2)
                    .IsRequired()
                    .HasColumnName("EstadoValidacionRN2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionActual).HasColumnType("datetime");

                entity.Property(e => e.FechaLog).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramacionActual).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramacionNueva).HasColumnType("datetime");

                entity.Property(e => e.IdOportunidadRn2).HasColumnName("IdOportunidadRN2");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAlumnoNavigation)
                    .WithMany(p => p.THistoricoOportunidadRn2)
                    .HasForeignKey(d => d.IdAlumno)
                    .HasConstraintName("FK_T_HistoricoOportunidadRN2_T_Alumno");
            });

            modelBuilder.Entity<THistoricoProductoProveedor>(entity =>
            {
                entity.ToTable("T_HistoricoProductoProveedor", "fin");

                entity.Property(e => e.CostoDolares).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.CostoMonedaOrigen).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<THojaOportunidadTipoPanel>(entity =>
            {
                entity.ToTable("T_HojaOportunidadTipoPanel", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<THora>(entity =>
            {
                entity.ToTable("T_Hora", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.HoraOld)
                    .IsRequired()
                    .HasColumnName("HoraOLD")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre).HasColumnType("time(0)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<THoraBloqueada>(entity =>
            {
                entity.ToTable("T_HoraBloqueada", "com");

                entity.HasIndex(e => new { e.Hora, e.IdPersonal, e.Fecha })
                    .HasName("INC_T_HoraBloqueada_PorIdPersonalPorFecha");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Hora).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<THorarioGrupo>(entity =>
            {
                entity.ToTable("T_HorarioGrupo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<THorarioGrupoPersonal>(entity =>
            {
                entity.ToTable("T_HorarioGrupoPersonal", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdHorarioGrupoNavigation)
                    .WithMany(p => p.THorarioGrupoPersonal)
                    .HasForeignKey(d => d.IdHorarioGrupo)
                    .HasConstraintName("FK_T_HorarioGrupoPersonal_T_HorarioGrupo");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.THorarioGrupoPersonal)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_HorarioGrupoPersonal_T_Personal");
            });

            modelBuilder.Entity<TIdioma>(entity =>
            {
                entity.ToTable("T_Idioma", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TIndicador>(entity =>
            {
                entity.ToTable("T_Indicador", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TIndicadorFrecuencia>(entity =>
            {
                entity.ToTable("T_IndicadorFrecuencia", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TIndicadorProblema>(entity =>
            {
                entity.ToTable("T_IndicadorProblema", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<TIndicadorProblemaTipoPanel>(entity =>
            {
                entity.ToTable("T_IndicadorProblemaTipoPanel", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TIndicadorReporteCambioFase>(entity =>
            {
                entity.ToTable("T_IndicadorReporteCambioFase", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TIndustria>(entity =>
            {
                entity.ToTable("T_Industria", "pla");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInformacionAlumnoChat>(entity =>
            {
                entity.ToTable("T_InformacionAlumnoChat", "ope");

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdInteraccionSesion).HasMaxLength(128);

                entity.Property(e => e.IdProgramaGeneralHijo).HasColumnName("IdProgramaGeneral_Hijo");

                entity.Property(e => e.IdProgramaGeneralPadre).HasColumnName("IdProgramaGeneral_Padre");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInformacionAlumnoChatLog>(entity =>
            {
                entity.ToTable("T_InformacionAlumnoChatLog", "ope");

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdInteraccionSesion).HasMaxLength(128);

                entity.Property(e => e.IdProgramaGeneralHijo).HasColumnName("IdProgramaGeneral_Hijo");

                entity.Property(e => e.IdProgramaGeneralPadre).HasColumnName("IdProgramaGeneral_Padre");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInstagramComentario>(entity =>
            {
                entity.ToTable("T_InstagramComentario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaInteraccion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdPersonalAsociado).HasColumnName("IdPersonal_Asociado");

                entity.Property(e => e.InstagramId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Texto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdInstagramPublicacionNavigation)
                    .WithMany(p => p.TInstagramComentario)
                    .HasForeignKey(d => d.IdInstagramPublicacion)
                    .HasConstraintName("FK_T_InstagramComentario_T_InstagramPublicacion");

                entity.HasOne(d => d.IdInstagramUsuarioNavigation)
                    .WithMany(p => p.TInstagramComentario)
                    .HasForeignKey(d => d.IdInstagramUsuario)
                    .HasConstraintName("FK_T_InstagramComentario_T_InstagramUsuario");

                entity.HasOne(d => d.IdPersonalAsociadoNavigation)
                    .WithMany(p => p.TInstagramComentario)
                    .HasForeignKey(d => d.IdPersonalAsociado)
                    .HasConstraintName("FK_T_InstagramComentario_T_Personal");
            });

            modelBuilder.Entity<TInstagramPublicacion>(entity =>
            {
                entity.ToTable("T_InstagramPublicacion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.InstagramId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Subtitulo)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TipoMedia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UrlMedia).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInstagramUsuario>(entity =>
            {
                entity.ToTable("T_InstagramUsuario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TIntegraAspNetUsers>(entity =>
            {
                entity.ToTable("T_Integra_AspNetUsers", "conf");

                entity.HasIndex(e => e.UserName)
                    .HasName("UserNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(128)
                    .ValueGeneratedNever();

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<TIntentoPreguntaEvaluacion>(entity =>
            {
                entity.ToTable("T_IntentoPreguntaEvaluacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MensajeFeedback).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccion>(entity =>
            {
                entity.ToTable("T_Interaccion", "com");

                entity.HasIndex(e => new { e.Id, e.IdActividadDetalle, e.IdTipoInteraccionGeneral })
                    .HasName("INC_T_Interaccion_PorIdActividadDetalle_PorIdTipoInteraccionGeneral");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionChat>(entity =>
            {
                entity.ToTable("T_InteraccionChat", "com");

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.CorreoAgente)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EsNoLeido)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdConjuntoAnuncio)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Navegador)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Plataforma)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TituloUrl)
                    .IsRequired()
                    .HasColumnName("TituloURL")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Urldesde)
                    .IsRequired()
                    .HasColumnName("URLDesde")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Urlhacia)
                    .IsRequired()
                    .HasColumnName("URLHacia")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valoracion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ZopimAgente).HasMaxLength(150);

                entity.Property(e => e.ZopimApellidoVisitante)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ZopimCorreoVisitante)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ZopimIdChatCompleto)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ZopimIdVisitante)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ZopimIdchat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ZopimNombreVisitante)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ZopimTelefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionChatIntegra>(entity =>
            {
                entity.ToTable("T_InteraccionChatIntegra", "com");

                entity.HasIndex(e => new { e.FechaInicio, e.IdEstadoChat, e.NroPalabrasVisitor, e.UsuarioTiempoRespuestaMaximo, e.UsuarioTiempoRespuestaPromedio, e.IdFaseOportunidadPortalWeb })
                    .HasName("INC_T_InteraccionChatIntegra_PorIdFaseOportunidadPortalWeb");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteTiempoEspera).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdFaseOportunidadPortalWeb).HasColumnName("IdFaseOportunidad_PortalWeb");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Ip)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Navegador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Plataforma)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TiempoRespuestaTotal).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UrlFrom)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UrlTo)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionChatMessenger>(entity =>
            {
                entity.ToTable("T_InteraccionChatMessenger", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PromedioRespuestaUsuario).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionChatWhatsApp>(entity =>
            {
                entity.ToTable("T_InteraccionChatWhatsApp", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Numero)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PromedioRespuestaUsuario).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionCorreo>(entity =>
            {
                entity.ToTable("T_InteraccionCorreo", "com");

                entity.HasIndex(e => e.IdAlumno)
                    .HasName("INC_T_InteraccionCorreo_PorIdAlumno");

                entity.Property(e => e.Accion).HasMaxLength(20);

                entity.Property(e => e.EstadoSuscripcion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.MailchimpIdCampana)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpIdMember)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RazonUnSuscripcion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo).HasMaxLength(20);

                entity.Property(e => e.TitutloUrl).HasMaxLength(500);

                entity.Property(e => e.Url).HasMaxLength(500);

                entity.Property(e => e.UrlClick).HasMaxLength(500);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionCorreoDetalleMailChimp>(entity =>
            {
                entity.ToTable("T_InteraccionCorreoDetalleMailChimp", "mkt");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdInteraccionCorreoMailChimpNavigation)
                    .WithMany(p => p.TInteraccionCorreoDetalleMailChimp)
                    .HasForeignKey(d => d.IdInteraccionCorreoMailChimp)
                    .HasConstraintName("FK_T_InteraccionCorreoDetalleMailChimp_T_InteraccionCorreoMailChimp");
            });

            modelBuilder.Entity<TInteraccionCorreoMailChimp>(entity =>
            {
                entity.ToTable("T_InteraccionCorreoMailChimp", "mkt");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailMailchimpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoSuscripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionEnlaceDetalleMailChimp>(entity =>
            {
                entity.ToTable("T_InteraccionEnlaceDetalleMailChimp", "mkt");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdInteraccionEnlaceMailChimpNavigation)
                    .WithMany(p => p.TInteraccionEnlaceDetalleMailChimp)
                    .HasForeignKey(d => d.IdInteraccionEnlaceMailChimp)
                    .HasConstraintName("FK_T_InteraccionEnlaceDetalleMailChimp_T_InteraccionEnlaceMailchimp");
            });

            modelBuilder.Entity<TInteraccionEnlaceMailchimp>(entity =>
            {
                entity.ToTable("T_InteraccionEnlaceMailchimp", "mkt");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailMailChimpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoSuscripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEnlaceMailChimpNavigation)
                    .WithMany(p => p.TInteraccionEnlaceMailchimp)
                    .HasForeignKey(d => d.IdEnlaceMailChimp)
                    .HasConstraintName("FK_T_InteraccionEnlaceMailchimp_T_EnlaceMailChimp");
            });

            modelBuilder.Entity<TInteraccionFormulario>(entity =>
            {
                entity.ToTable("T_InteraccionFormulario", "mkt");

                entity.Property(e => e.Correo).HasMaxLength(250);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdContactoPortalSegmentoPw).HasColumnName("IdContactoPortalSegmento_Pw");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Ip).HasMaxLength(50);

                entity.Property(e => e.IpV4).HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlOrigen).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionFormularioCampo>(entity =>
            {
                entity.ToTable("T_InteraccionFormularioCampo", "mkt");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreCampo).HasMaxLength(100);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCampo).HasMaxLength(100);
            });

            modelBuilder.Entity<TInteraccionLlamadaDetalle>(entity =>
            {
                entity.ToTable("T_InteraccionLlamadaDetalle", "com");

                entity.HasIndex(e => new { e.IdCentralLlamada, e.IdInteraccion })
                    .HasName("INC_T_InteraccionLlamadaDetalle_PorIdInteraccion");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NumeroTelefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionPagina>(entity =>
            {
                entity.ToTable("T_InteraccionPagina", "com");

                entity.HasIndex(e => e.IdAlumno)
                    .HasName("INC_T_InteraccionPagina_PorIdAlumno");

                entity.Property(e => e.Correo).HasMaxLength(150);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdAreaCapacitacionAnterior).HasColumnName("IdAreaCapacitacion_Anterior");

                entity.Property(e => e.IdAreaCapacitacionSiguiente).HasColumnName("IdAreaCapacitacion_Siguiente");

                entity.Property(e => e.IdCategoriaInteraccionAnterior).HasColumnName("IdCategoriaInteraccion_Anterior");

                entity.Property(e => e.IdCategoriaInteraccionSiguiente).HasColumnName("IdCategoriaInteraccion_Siguiente");

                entity.Property(e => e.IdConjuntoAnuncio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneralGenerico).HasColumnName("IdPGeneral_Generico");

                entity.Property(e => e.IdPgeneralGenericoAnterior).HasColumnName("IdPGeneral_GenericoAnterior");

                entity.Property(e => e.IdPgeneralGenericoSiguiente).HasColumnName("IdPGeneral_GenericoSiguiente");

                entity.Property(e => e.IdSubAreaCapcitacionAnterior).HasColumnName("IdSubAreaCapcitacion_Anterior");

                entity.Property(e => e.IdSubAreaCapcitacionSiguiente).HasColumnName("IdSubAreaCapcitacion_Siguiente");

                entity.Property(e => e.IdSubCategoriaInteraccionSiguiente).HasColumnName("IdSubCategoriaInteraccion_Siguiente");

                entity.Property(e => e.Ip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IpFechaFin).HasColumnType("datetime");

                entity.Property(e => e.IpFechaInicio).HasColumnType("datetime");

                entity.Property(e => e.IpIp).HasMaxLength(16);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlActual)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UrlAnterior)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UrlSiguiente)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionPortal>(entity =>
            {
                entity.ToTable("T_InteraccionPortal", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdContactoPortalSegmento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Navegador)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UserIp)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionPortalPagina>(entity =>
            {
                entity.ToTable("T_InteraccionPortalPagina", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Filtros)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tiempo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UrlActual)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UrlAnterior)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionPortalPaginaDetalle>(entity =>
            {
                entity.ToTable("T_InteraccionPortalPaginaDetalle", "mkt");

                entity.Property(e => e.Acciones).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Filtros).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tiempo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionPortalPaginaFormulario>(entity =>
            {
                entity.ToTable("T_InteraccionPortalPaginaFormulario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlActual)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UrlAnterior)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraccionPortalPaginaFormularioCampo>(entity =>
            {
                entity.ToTable("T_InteraccionPortalPaginaFormularioCampo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TagId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasMaxLength(500);
            });

            modelBuilder.Entity<TInteraccionScore>(entity =>
            {
                entity.ToTable("T_InteraccionScore", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteracionRecopilacion>(entity =>
            {
                entity.ToTable("T_InteracionRecopilacion", "mkt");

                entity.Property(e => e.Contacto)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Fechacontacto)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.FormaInteracion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoContacto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteresPotencialAlumno>(entity =>
            {
                entity.ToTable("T_InteresPotencialAlumno", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TIntervaloTiempo>(entity =>
            {
                entity.ToTable("T_IntervaloTiempo", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLicencia>(entity =>
            {
                entity.ToTable("T_Licencia", "ope");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("date");

                entity.Property(e => e.Producto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLicenciaComplemento>(entity =>
            {
                entity.ToTable("T_LicenciaComplemento", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("date");

                entity.Property(e => e.Licencia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Producto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TListaCursoAreaEtiqueta>(entity =>
            {
                entity.ToTable("T_ListaCursoAreaEtiqueta", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TListaCursoAreaEtiquetaDetalle>(entity =>
            {
                entity.ToTable("T_ListaCursoAreaEtiquetaDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TListaMailchimp>(entity =>
            {
                entity.ToTable("T_ListaMailchimp", "mkt");

                entity.Property(e => e.CodigoZip)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.CorreoRemitente)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Direccion1)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Direccion2)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.DireccionCiudad)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DireccionEstado)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaUltimoDesuscrito).HasColumnType("datetime");

                entity.Property(e => e.FechaUltimoEnvioCampania).HasColumnType("datetime");

                entity.Property(e => e.FechaUltimoSuscrito).HasColumnType("datetime");

                entity.Property(e => e.MailchimpAsunto)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpFechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.MailchimpId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpLenguaje)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpNombre)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompania)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NombreRemitente)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.PromedioApertura).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PromedioClic).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PromedioDesuscrito).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PromedioObjetivoSuscrito).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PromedioSuscrito).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TListaPlantilla>(entity =>
            {
                entity.ToTable("T_ListaPlantilla", "mkt");

                entity.Property(e => e.Disenho)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLlamadaActividad>(entity =>
            {
                entity.ToTable("T_LlamadaActividad", "com");

                entity.HasIndex(e => new { e.IdActividadDetalle, e.FechaInicioLlamada, e.FechaFinLlamada })
                    .HasName("INC_T_LlamadaActividad_PorFechaInicioLlamada_PorFechaFinLlamada");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinLlamada).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioLlamada).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdActividadDetalleNavigation)
                    .WithMany(p => p.TLlamadaActividad)
                    .HasForeignKey(d => d.IdActividadDetalle)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_LlamadaActividad_T_ActividadDetalle");
            });

            modelBuilder.Entity<TLlamadaInicioDia>(entity =>
            {
                entity.ToTable("T_LlamadaInicioDia", "com");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramada).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLlamadaTranscripcion>(entity =>
            {
                entity.ToTable("T_LlamadaTranscripcion", "ope");

                entity.HasIndex(e => new { e.Clasificacion, e.Transcripcion, e.IdLlamada })
                    .HasName("INC_T_LlamadaTranscripcion_PorIdLlamada");

                entity.Property(e => e.ArchivoOriginal)
                    .HasColumnName("Archivo_Original")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Clasificacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoClasificacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoTranscripcion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RefLlamada)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RespuestaOriginal).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Transcripcion).HasColumnType("varchar(max)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLlamadaWebphone>(entity =>
            {
                entity.ToTable("T_LLamadaWebphone", "com");

                entity.HasIndex(e => new { e.FechaFin, e.FechaInicio })
                    .HasName("INC_T_LLamadaWebphone_PorFechaFinPorFechaInicio");

                entity.Property(e => e.Anexo)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdLlamadasWebphoneEstado).HasColumnName("IdLLamadasWebphoneEstado");

                entity.Property(e => e.IdLlamadasWebphoneTipo).HasColumnName("IdLLamadasWebphoneTipo");

                entity.Property(e => e.NombreGrabacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TelefonoDestino)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WebPhoneId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdActividadDetalleNavigation)
                    .WithMany(p => p.TLlamadaWebphone)
                    .HasForeignKey(d => d.IdActividadDetalle)
                    .HasConstraintName("FK_T_LLamadaWebphone_T_ActividadDetalle");

                entity.HasOne(d => d.IdAlumnoNavigation)
                    .WithMany(p => p.TLlamadaWebphone)
                    .HasForeignKey(d => d.IdAlumno)
                    .HasConstraintName("FK_T_LLamadaWebphone_T_Alumno");

                entity.HasOne(d => d.IdLlamadasWebphoneEstadoNavigation)
                    .WithMany(p => p.TLlamadaWebphone)
                    .HasForeignKey(d => d.IdLlamadasWebphoneEstado)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_LLamadaWebphone_T_LLamadaWebphoneEstado");

                entity.HasOne(d => d.IdLlamadasWebphoneTipoNavigation)
                    .WithMany(p => p.TLlamadaWebphone)
                    .HasForeignKey(d => d.IdLlamadasWebphoneTipo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_LLamadaWebphone_T_LLamadaWebphoneTipo");

                entity.HasOne(d => d.IdPersonalAreaTrabajoNavigation)
                    .WithMany(p => p.TLlamadaWebphone)
                    .HasForeignKey(d => d.IdPersonalAreaTrabajo)
                    .HasConstraintName("FK_T_LLamadaWebphone_T_PersonalAreaTrabajo");
            });

            modelBuilder.Entity<TLlamadaWebphoneAsterisk>(entity =>
            {
                entity.ToTable("T_LlamadaWebphoneAsterisk", "com");

                entity.HasIndex(e => e.CdrId)
                    .HasName("UC_T_LlamadaWebphoneAsterisk_PorCdrId")
                    .IsUnique();

                entity.Property(e => e.Anexo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEliminacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSubida).HasColumnType("datetime");

                entity.Property(e => e.NombreGrabacion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TelefonoDestino)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLlamadaWebphoneCruceCentral>(entity =>
            {
                entity.ToTable("T_LlamadaWebphoneCruceCentral", "com");

                entity.HasIndex(e => e.EstadoLlamadaCentral)
                    .HasName("INC_LlamdaWebphoneCruceCentral_EstadoLlamadaCentral");

                entity.HasIndex(e => e.IdActividadDetalle)
                    .HasName("INC_LlamadaWebphoneCruceCentral_PorIdActividadDetalle");

                entity.HasIndex(e => e.IdLlamadaWebphone)
                    .HasName("INC_T_LlamadaWebphoneCruceCentral_PorIdLlamadaWebphone");

                entity.Property(e => e.AnexoCentral)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AnexoWebphone)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoLlamadaCentral)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinLlamadaCentral).HasColumnType("datetime");

                entity.Property(e => e.FechaFinLlamadaWebphone).HasColumnType("datetime");

                entity.Property(e => e.FechaIncioLlamadaCentral).HasColumnType("datetime");

                entity.Property(e => e.FechaIncioLlamadaWebphone).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdLlamadaCentral).HasColumnName("IdLlamada_Central");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SubEstadoLlamadaCentral)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TelefonoDestinoCentral)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TelefonoDestinoWebPhone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Troncal)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UrlAudio)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLlamadaWebphoneEstado>(entity =>
            {
                entity.ToTable("T_LLamadaWebphoneEstado", "com");

                entity.HasIndex(e => e.Nombre)
                    .HasName("UC_T_LLamadaWebphoneEstado_PorNombre")
                    .IsUnique();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLlamadaWebphoneReinicioAsesor>(entity =>
            {
                entity.ToTable("T_LLamadaWebphoneReinicioAsesor", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TLlamadaWebphoneReinicioAsesor)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_LLamadaWebphoneReinicioAsesor_T_Personal");
            });

            modelBuilder.Entity<TLlamadaWebphoneTipo>(entity =>
            {
                entity.ToTable("T_LLamadaWebphoneTipo", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLocacion>(entity =>
            {
                entity.ToTable("T_Locacion", "pla");

                entity.Property(e => e.Direccion).HasMaxLength(300);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLog>(entity =>
            {
                entity.ToTable("T_Log", "conf");

                entity.Property(e => e.Excepcion)
                    .HasMaxLength(2500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Maquina)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Parametros)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruta)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLogFiltroSegmentoEjecutado>(entity =>
            {
                entity.ToTable("T_LogFiltroSegmentoEjecutado", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLogRecuperacionAutomaticoModuloSistema>(entity =>
            {
                entity.ToTable("T_LogRecuperacionAutomaticoModuloSistema", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLogRecuperacionAutomaticoModuloSistemaResponsable>(entity =>
            {
                entity.ToTable("T_LogRecuperacionAutomaticoModuloSistemaResponsable", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLogSicronizacionCronograma>(entity =>
            {
                entity.ToTable("T_LogSicronizacionCronograma", "conf");

                entity.Property(e => e.FechaControl).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMigracion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.NombreMetodoEjecutado)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Parametros)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoPeticion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSolicitud)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLoggerOportunidad>(entity =>
            {
                entity.ToTable("T_LoggerOportunidad", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMailChimpListaControlSubida>(entity =>
            {
                entity.ToTable("T_MailChimpListaControlSubida", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinProceso).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioProceso).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MailchimpBatchId)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMailChimpListaId>(entity =>
            {
                entity.ToTable("T_MailChimpListaId", "mkt");

                entity.Property(e => e.AsuntoLista)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCampaniaMailchimp)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdListaMailchimp)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMailchimpCorreo>(entity =>
            {
                entity.ToTable("T_MailchimpCorreo", "mkt");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Correo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoSuscripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastChanged).HasColumnType("datetime");

                entity.Property(e => e.Latitud)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Leid).HasColumnName("LEID");

                entity.Property(e => e.ListaId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Longitud)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MailChimpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TimestampOpt)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ZonaHoraria)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMailchimpEstadisticaPorPrioridad>(entity =>
            {
                entity.ToTable("T_MailchimpEstadisticaPorPrioridad", "mkt");

                entity.Property(e => e.FechaConsulta).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMailingDetalleTop5>(entity =>
            {
                entity.ToTable("T_MailingDetalleTop5", "mkt");

                entity.Property(e => e.Asunto)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CaEstado).HasColumnName("ca_estado");

                entity.Property(e => e.Campania)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMailing)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMailingListaTop5>(entity =>
            {
                entity.ToTable("T_MailingListaTop5", "mkt");

                entity.Property(e => e.Areas)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Asunto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.AsuntoLista)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.CorreoAsesor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Etiquetas)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnviado).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCampaniaMailchimp)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdListaMailchimp)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAsesor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SubAreas)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMandril>(entity =>
            {
                entity.ToTable("T_Mandril", "com");

                entity.HasIndex(e => e.Evento)
                    .HasName("INC_T_Mandril_PorEvento");

                entity.HasIndex(e => new { e.IdAlumno, e.IdTipoInteraccion })
                    .HasName("INC_T_Mandril_PorIdAlumno_PorIdTipoInteraccion");

                entity.HasIndex(e => new { e.MessageEmail, e.MessageSender })
                    .HasName("INC_T_Mandril_PorMessageEmail_PorMessageSender");

                entity.HasIndex(e => new { e.MessageSender, e.MessageEmail, e.Id, e.MessageSubject, e.Evento, e.FechaCreacion })
                    .HasName("INC_T_Mandril_PorSP_ObtenerCorreosEnviadosPorPersonal");

                entity.Property(e => e.Evento)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEvent)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LocationCity)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LocationCountry)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LocationCountryShort)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LocationLatitude).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.LocationLongitude).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.LocationPostalCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LocationRegion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LocationTimezone)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MessageBounceDescription)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.MessageDiag)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.MessageEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MessageId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MessageSender)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MessageState)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MessageSubAccount)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MessageSubject)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.MessageTags)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MessageTemplate)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MessageTs).HasColumnType("datetime");

                entity.Property(e => e.MessageVersion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ts).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgent)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentOsCompany)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentOsCompanyUrl)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentOsFamily)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentOsIcon)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentOsName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentOsUrl)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentUaCompany)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentUaCompanyUrl)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentUaFamily)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentUaIcon)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentUaName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentUaUrl)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgentUaVersion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMandrilClick>(entity =>
            {
                entity.ToTable("T_MandrilClick", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ts).HasColumnType("datetime");

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgent)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMandrilEnvioCorreo>(entity =>
            {
                entity.ToTable("T_MandrilEnvioCorreo", "mkt");

                entity.Property(e => e.Asunto)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FkMandril)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMandrilLog>(entity =>
            {
                entity.ToTable("T_MandrilLog", "mkt");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Error)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMandrilOpen>(entity =>
            {
                entity.ToTable("T_MandrilOpen", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ts).HasColumnType("datetime");

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgent)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMandrilTipoAsignacion>(entity =>
            {
                entity.ToTable("T_MandrilTipoAsignacion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMandrilTipoEnvio>(entity =>
            {
                entity.ToTable("T_MandrilTipoEnvio", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialAccion>(entity =>
            {
                entity.ToTable("T_MaterialAccion", "ope");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialAdicionalAulaVirtual>(entity =>
            {
                entity.ToTable("T_MaterialAdicionalAulaVirtual", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreConfiguracion)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TMaterialAdicionalAulaVirtual)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_MaterialAdicionalAulaVirtual_T_PGeneral");
            });

            modelBuilder.Entity<TMaterialAdicionalAulaVirtualPespecifico>(entity =>
            {
                entity.ToTable("T_MaterialAdicionalAulaVirtualPEspecifico", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMaterialAdicionalAulaVirtualNavigation)
                    .WithMany(p => p.TMaterialAdicionalAulaVirtualPespecifico)
                    .HasForeignKey(d => d.IdMaterialAdicionalAulaVirtual)
                    .HasConstraintName("FK_T_MaterialAdicionalAulaVirtualPespecifico_T_MaterialAdicionalAulaVirtual");

                entity.HasOne(d => d.IdPespecificoNavigation)
                    .WithMany(p => p.TMaterialAdicionalAulaVirtualPespecifico)
                    .HasForeignKey(d => d.IdPespecifico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_MaterialAdicionalAulaVirtualPespecifico_T_PEspecifico");
            });

            modelBuilder.Entity<TMaterialAdicionalAulaVirtualRegistro>(entity =>
            {
                entity.ToTable("T_MaterialAdicionalAulaVirtualRegistro", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaArchivo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMaterialAdicionalAulaVirtualNavigation)
                    .WithMany(p => p.TMaterialAdicionalAulaVirtualRegistro)
                    .HasForeignKey(d => d.IdMaterialAdicionalAulaVirtual)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_MaterialAdicionalAulaVirtualRegistro_T_MaterialAdicionalAulaVirtual");
            });

            modelBuilder.Entity<TMaterialAsociacionAccion>(entity =>
            {
                entity.ToTable("T_MaterialAsociacionAccion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMaterialAccionNavigation)
                    .WithMany(p => p.TMaterialAsociacionAccion)
                    .HasForeignKey(d => d.IdMaterialAccion)
                    .HasConstraintName("FK_T_MaterialAsociacionAccion_T_MaterialAccion");

                entity.HasOne(d => d.IdMaterialTipoNavigation)
                    .WithMany(p => p.TMaterialAsociacionAccion)
                    .HasForeignKey(d => d.IdMaterialTipo)
                    .HasConstraintName("FK_T_MaterialAsociacionAccion_T_MaterialTipo");
            });

            modelBuilder.Entity<TMaterialAsociacionCriterioVerificacion>(entity =>
            {
                entity.ToTable("T_MaterialAsociacionCriterioVerificacion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMaterialCriterioVerificacionNavigation)
                    .WithMany(p => p.TMaterialAsociacionCriterioVerificacion)
                    .HasForeignKey(d => d.IdMaterialCriterioVerificacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_MaterialAsociacionCriterioVerificacion_T_MaterialCriterioVerificacion");

                entity.HasOne(d => d.IdMaterialTipoNavigation)
                    .WithMany(p => p.TMaterialAsociacionCriterioVerificacion)
                    .HasForeignKey(d => d.IdMaterialTipo)
                    .HasConstraintName("FK_T_MaterialAsociacionCriterioVerificacion_T_MaterialTipo");
            });

            modelBuilder.Entity<TMaterialAsociacionVersion>(entity =>
            {
                entity.ToTable("T_MaterialAsociacionVersion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMaterialTipoNavigation)
                    .WithMany(p => p.TMaterialAsociacionVersion)
                    .HasForeignKey(d => d.IdMaterialTipo)
                    .HasConstraintName("FK_T_MaterialAsociacionVersion_T_MaterialTipo");

                entity.HasOne(d => d.IdMaterialVersionNavigation)
                    .WithMany(p => p.TMaterialAsociacionVersion)
                    .HasForeignKey(d => d.IdMaterialVersion)
                    .HasConstraintName("FK_T_MaterialAsociacionVersion_T_MaterialVersion");
            });

            modelBuilder.Entity<TMaterialCriterioVerificacion>(entity =>
            {
                entity.ToTable("T_MaterialCriterioVerificacion", "ope");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialCriterioVerificacionDetalle>(entity =>
            {
                entity.ToTable("T_MaterialCriterioVerificacionDetalle", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMaterialPespecificoDetalle).HasColumnName("IdMaterialPEspecificoDetalle");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialEntrega>(entity =>
            {
                entity.ToTable("T_MaterialEntrega", "ope");

                entity.Property(e => e.Comentario)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAsistenciaNavigation)
                    .WithMany(p => p.TMaterialEntrega)
                    .HasForeignKey(d => d.IdAsistencia)
                    .HasConstraintName("FK_T_MaterialEntrega_T_Asistencia");
            });

            modelBuilder.Entity<TMaterialEnvio>(entity =>
            {
                entity.ToTable("T_MaterialEnvio", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalRemitente).HasColumnName("IdPersonal_Remitente");

                entity.Property(e => e.IdProveedorEnvio).HasColumnName("IdProveedor_Envio");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialEnvioDetalle>(entity =>
            {
                entity.ToTable("T_MaterialEnvioDetalle", "ope");

                entity.Property(e => e.ComentarioEnvio)
                    .IsRequired()
                    .HasMaxLength(2500)
                    .IsUnicode(false);

                entity.Property(e => e.ComentarioRecepcion)
                    .IsRequired()
                    .HasMaxLength(2500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalReceptor).HasColumnName("IdPersonal_Receptor");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMaterialEnvioNavigation)
                    .WithMany(p => p.TMaterialEnvioDetalle)
                    .HasForeignKey(d => d.IdMaterialEnvio)
                    .HasConstraintName("FK_T_MaterialEnvioDetalle_T_MaterialEnvio");
            });

            modelBuilder.Entity<TMaterialEstado>(entity =>
            {
                entity.ToTable("T_MaterialEstado", "ope");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialEstadoRecepcion>(entity =>
            {
                entity.ToTable("T_MaterialEstadoRecepcion", "ope");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialPespecifico>(entity =>
            {
                entity.ToTable("T_MaterialPEspecifico", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialPespecificoDetalle>(entity =>
            {
                entity.ToTable("T_MaterialPEspecificoDetalle", "ope");

                entity.Property(e => e.ComentarioSubida).IsUnicode(false);

                entity.Property(e => e.DireccionEntrega).IsUnicode(false);

                entity.Property(e => e.FechaAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSubida).HasColumnType("datetime");

                entity.Property(e => e.IdMaterialPespecifico).HasColumnName("IdMaterialPEspecifico");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlArchivo)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioAprobacion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioEnvio)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSubida)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFurNavigation)
                    .WithMany(p => p.TMaterialPespecificoDetalle)
                    .HasForeignKey(d => d.IdFur)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_MaterialPEspecificoDetalle_T_Fur");

                entity.HasOne(d => d.IdMaterialEstadoNavigation)
                    .WithMany(p => p.TMaterialPespecificoDetalle)
                    .HasForeignKey(d => d.IdMaterialEstado)
                    .HasConstraintName("FK_T_MaterialPEspecificoDetalle_T_MaterialEstado");

                entity.HasOne(d => d.IdMaterialPespecificoNavigation)
                    .WithMany(p => p.TMaterialPespecificoDetalle)
                    .HasForeignKey(d => d.IdMaterialPespecifico)
                    .HasConstraintName("FK_T_MaterialPEspecificoDetalle_T_MaterialPEspecifico");

                entity.HasOne(d => d.IdMaterialVersionNavigation)
                    .WithMany(p => p.TMaterialPespecificoDetalle)
                    .HasForeignKey(d => d.IdMaterialVersion)
                    .HasConstraintName("FK_T_MaterialPEspecificoDetalle_T_MaterialVersion");
            });

            modelBuilder.Entity<TMaterialRegistroEntregaAlumno>(entity =>
            {
                entity.ToTable("T_MaterialRegistroEntregaAlumno", "ope");

                entity.Property(e => e.FechaAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMaterialPespecificoDetalle).HasColumnName("IdMaterialPEspecificoDetalle");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioAprobacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialTipo>(entity =>
            {
                entity.ToTable("T_MaterialTipo", "ope");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialTipoEntrega>(entity =>
            {
                entity.ToTable("T_MaterialTipoEntrega", "ope");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMaterialVersion>(entity =>
            {
                entity.ToTable("T_MaterialVersion", "ope");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaAlumnoMoodle>(entity =>
            {
                entity.ToTable("T_MatriculaAlumno_Moodle", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaCabecera>(entity =>
            {
                entity.ToTable("T_MatriculaCabecera", "fin");

                entity.HasIndex(e => e.UsuarioCoordinadorAcademico)
                    .HasName("INC_T_MatriculaCabecera_PorUsuarioCoordinadorAcademico");

                entity.HasIndex(e => new { e.Estado, e.CodigoMatricula })
                    .HasName("INC_T_MatriculaCabecera_PorEstado_PorCodigoMatricula");

                entity.HasIndex(e => new { e.CodigoMatricula, e.IdAsesor, e.FechaMatricula })
                    .HasName("INC_T_MatriculaCabecera_PorIdAsesor_PorFechaMatricula");

                entity.HasIndex(e => new { e.IdAlumno, e.IdPespecifico, e.EstadoMatricula })
                    .HasName("NonClusteredIndex-20190727-132823-ProespAlu");

                entity.HasIndex(e => new { e.CodigoMatricula, e.Estado, e.FechaMatricula, e.IdCronograma })
                    .HasName("INC_T_MatriculaCabecera_PorIdCronograma");

                entity.HasIndex(e => new { e.FechaMatricula, e.Id, e.IdPespecifico, e.UsuarioCoordinadorAcademico, e.EstadoMatricula })
                    .HasName("INC_T_MatriculaCabecera_PorEstadoMatricula");

                entity.HasIndex(e => new { e.CodigoMatricula, e.FechaMatricula, e.IdAlumno, e.IdPespecifico, e.IdCronograma, e.EstadoMatricula, e.Estado })
                    .HasName("INC_T_MatriculaCabecera_PorCamposRepresentativosTabAgenda");

                entity.HasIndex(e => new { e.CodigoMatricula, e.Estado, e.EstadoMatricula, e.GrupoCurso, e.IdAlumno, e.IdEstadoMatricula, e.IdSubEstadoMatricula, e.Id, e.IdPespecifico, e.EmpresaPaga })
                    .HasName("INC_T_MatriculaCabecera_PorIdPorIdPespecificoPorEmpresaPaga");

                entity.Property(e => e.CodigoMatricula)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaContacto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaObservaciones)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaPaga)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaRuc)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoMatricula)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinalizacion).HasColumnType("datetime");

                entity.Property(e => e.FechaMatricula).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRetiro).HasColumnType("datetime");

                entity.Property(e => e.FechaSuspendido)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdEstadoMatricula).HasColumnName("IdEstado_matricula");

                entity.Property(e => e.IdMigracion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.ObservacionGeneralOperaciones).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCoordinadorAcademico)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCoordinadorPreAsignacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCoordinadorSupervision)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaCabeceraBeneficios>(entity =>
            {
                entity.ToTable("T_MatriculaCabeceraBeneficios", "com");

                entity.HasIndex(e => e.IdMatriculaCabecera)
                    .HasName("INC_T_MatricualCabeceraBeneficios_PorIdMatriculaCabecera");

                entity.Property(e => e.FechaAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramada).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioAprobacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioEntregoBeneficio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaCabeceraControlCondicionesComision>(entity =>
            {
                entity.ToTable("T_MatriculaCabeceraControlCondicionesComision", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TMatriculaCabeceraControlCondicionesComision)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FK_T_MatriculaCabeceraControlCondicionesComision_T_MatriculaCabecera");
            });

            modelBuilder.Entity<TMatriculaCabeceraDatosCertificado>(entity =>
            {
                entity.ToTable("T_MatriculaCabeceraDatosCertificado", "fin");

                entity.Property(e => e.Duracion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinal).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreCurso)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaCabeceraDatosCertificadoMensajes>(entity =>
            {
                entity.ToTable("T_MatriculaCabeceraDatosCertificadoMensajes", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAntiguo)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.ValorNuevo)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaCabeceraLog>(entity =>
            {
                entity.ToTable("T_MatriculaCabeceraLog", "fin");

                entity.Property(e => e.Alumno)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoCentroCostoAnterior)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoCentroCostoNuevo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMatriculaCabecera)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdPespecificoAnterior).HasColumnName("IdPEspecifico_Anterior");

                entity.Property(e => e.IdPespecificoNuevo).HasColumnName("IdPEspecifico_Nuevo");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaCabeceraLogCoordinadorAcademico>(entity =>
            {
                entity.ToTable("T_MatriculaCabeceraLogCoordinadorAcademico", "fin");

                entity.Property(e => e.CodigoMatricula)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoMatricula)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaMatricula).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSuspendido)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdPersonalAsesor).HasColumnName("IdPersonal_Asesor");

                entity.Property(e => e.IdPersonalCoordinadorAcademico).HasColumnName("IdPersonal_CoordinadorAcademico");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCoordinadorAcademico)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCoordinadorPreAsignacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCoordinadorSupervision)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaCabeceraLogFinanzas>(entity =>
            {
                entity.ToTable("T_MatriculaCabeceraLogFinanzas", "fin");

                entity.Property(e => e.CodigoMatricula)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaContacto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaObservaciones)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaRuc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoMatricula)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinalizacion).HasColumnType("datetime");

                entity.Property(e => e.FechaMatricula).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRetiro).HasColumnType("datetime");

                entity.Property(e => e.FechaSuspendido)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdEstadoMatricula).HasColumnName("IdEstado_Matricula");

                entity.Property(e => e.IdPersonalAsesor).HasColumnName("IdPersonal_Asesor");

                entity.Property(e => e.IdPersonalCoordinadorAcademico).HasColumnName("IdPersonal_CoordinadorAcademico");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.ObservacionGeneralOperaciones)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCoordinadorAcademico)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCoordinadorPreAsignacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCoordinadorSupervision)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaCabeceraNoRecordatorio>(entity =>
            {
                entity.ToTable("T_MatriculaCabeceraNoRecordatorio", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaReincorporacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaDetalle>(entity =>
            {
                entity.ToTable("T_MatriculaDetalle", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCursoPespecifico).HasColumnName("IdCursoPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaMoodleSolicitud>(entity =>
            {
                entity.ToTable("T_MatriculaMoodleSolicitud", "ope");

                entity.Property(e => e.CodigoMatricula)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinMatricula).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioMatricula).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioAprobacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSolicitud)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatriculaMoodleSolicitudEstado>(entity =>
            {
                entity.ToTable("T_MatriculaMoodleSolicitudEstado", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatrizDimensionNeoPir>(entity =>
            {
                entity.ToTable("T_MatrizDimensionNeoPir", "gp");

                entity.Property(e => e.Clase)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreEscalaValor)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMatrizEscalaNeoPir>(entity =>
            {
                entity.ToTable("T_MatrizEscalaNeoPir", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Pd)
                    .IsRequired()
                    .HasColumnName("PD")
                    .HasMaxLength(5);

                entity.Property(e => e.Per).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.T).HasColumnType("decimal(14, 4)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMensajePrecargado>(entity =>
            {
                entity.ToTable("T_MensajePrecargado", "com");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Texto)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMensajeTexto>(entity =>
            {
                entity.ToTable("T_MensajeTexto", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMatriculaCabecera)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdSeguimientoTwilio)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Numero)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMensajeTiempoInactivo>(entity =>
            {
                entity.ToTable("T_MensajeTiempoInactivo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMessengerAsesor>(entity =>
            {
                entity.ToTable("T_MessengerAsesor", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMessengerAsesorDetalle>(entity =>
            {
                entity.ToTable("T_MessengerAsesorDetalle", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMessengerChat>(entity =>
            {
                entity.ToTable("T_MessengerChat", "com");

                entity.Property(e => e.FacebookId)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaInteraccion).HasColumnType("datetime");

                entity.Property(e => e.FechaLectura).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlArchivoAdjunto).HasMaxLength(800);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMessengerConfiguracionChat>(entity =>
            {
                entity.ToTable("T_MessengerConfiguracionChat", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NombreConfiguracion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoOffline)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TextoSatisfaccionOffline)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMessengerEnvioMasivo>(entity =>
            {
                entity.ToTable("T_MessengerEnvioMasivo", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMessengerHistorialAsesor>(entity =>
            {
                entity.ToTable("T_MessengerHistorialAsesor", "com");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMessengerUsuario>(entity =>
            {
                entity.ToTable("T_MessengerUsuario", "com");

                entity.Property(e => e.Apellidos)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombres)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Psid)
                    .HasColumnName("PSID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UrlFoto).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMessengerUsuarioLog>(entity =>
            {
                entity.ToTable("T_MessengerUsuarioLog", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaCapacitacionFacebookNavigation)
                    .WithMany(p => p.TMessengerUsuarioLog)
                    .HasForeignKey(d => d.IdAreaCapacitacionFacebook)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_MessengerUsuarioLog_T_AreaCapacitacionFacebook");

                entity.HasOne(d => d.IdMessengerUsuarioNavigation)
                    .WithMany(p => p.TMessengerUsuarioLog)
                    .HasForeignKey(d => d.IdMessengerUsuario)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_MessengerUsuarioLog_T_MessengerUsuario");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TMessengerUsuarioLog)
                    .HasForeignKey(d => d.IdPersonal)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_MessengerUsuarioLog_T_Personal");
            });

            modelBuilder.Entity<TMessengerValue>(entity =>
            {
                entity.ToTable("T_MessengerValue", "com");

                entity.Property(e => e.Content).IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Verb)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMiembroMailchimp>(entity =>
            {
                entity.ToTable("T_MiembroMailchimp", "mkt");

                entity.HasIndex(e => e.MailchimpId)
                    .HasName("INC_T_MiembroMailchimp_PorMailchimpId");

                entity.HasIndex(e => new { e.IdListaMailchimp, e.Estado })
                    .HasName("INC_T_MiembroMailchimp_PorIdListaMailchimpEstado");

                entity.Property(e => e.ClienteCorreo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaOptIn).HasColumnType("datetime");

                entity.Property(e => e.FechaUltimoCambio).HasColumnType("datetime");

                entity.Property(e => e.Fuente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpContactoId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MailchimpCorreo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MailchimpCorreoId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MailchimpEstado)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailchimpListaId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.PromedioApertura).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PromedioClic).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoCorreo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModalidadContrato>(entity =>
            {
                entity.ToTable("T_ModalidadContrato", "gp");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModalidadCurso>(entity =>
            {
                entity.ToTable("T_ModalidadCurso", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloDataMining>(entity =>
            {
                entity.ToTable("T_ModeloDataMining", "com");

                entity.HasIndex(e => new { e.IdProbabilidadRegistroPwActual, e.IdOportunidad })
                    .HasName("INC_T_ModeloDataMining_PorIdOportunidad");

                entity.Property(e => e.Ciiuempresa).HasColumnName("CIIUEmpresa");

                entity.Property(e => e.FaseActual)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FaseMaximaAlcanzada)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionContacto).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionOportunidad).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdProbabilidadRegistroPwActual).HasColumnName("IdProbabilidadRegistroPW_Actual");

                entity.Property(e => e.IdProbabilidadRegistroPwInicial).HasColumnName("IdProbabilidadRegistroPW_Inicial");

                entity.Property(e => e.ProbabilidadActual).HasColumnType("decimal(5, 4)");

                entity.Property(e => e.ProbabilidadInicial).HasColumnType("decimal(5, 4)");

                entity.Property(e => e.ProgramaGeneralDuracion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion).IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAlumnoNavigation)
                    .WithMany(p => p.TModeloDataMining)
                    .HasForeignKey(d => d.IdAlumno)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloDataMining_T_Alumno");

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TModeloDataMining)
                    .HasForeignKey(d => d.IdOportunidad)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloDataMining_T_Oportunidad");
            });

            modelBuilder.Entity<TModeloDataMiningEstadoValor>(entity =>
            {
                entity.ToTable("T_ModeloDataMiningEstadoValor", "com");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloDwOportunidad>(entity =>
            {
                entity.ToTable("T_ModeloDwOportunidad", "mkt");

                entity.Property(e => e.ApellidoMaterno).HasMaxLength(50);

                entity.Property(e => e.ApellidoPaterno).HasMaxLength(50);

                entity.Property(e => e.Celular)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCostoInicial).HasMaxLength(150);

                entity.Property(e => e.Email1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionAlumno).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionOportunidad).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaReal).HasColumnType("datetime");

                entity.Property(e => e.IdActividadDetalleUltima).HasColumnName("IdActividadDetalle_Ultima");

                entity.Property(e => e.IdCentroCostoActual).HasColumnName("IdCentroCosto_Actual");

                entity.Property(e => e.IdFaseOportunidadInicial).HasColumnName("IdFaseOportunidad_Inicial");

                entity.Property(e => e.IdFaseOportunidadMaxima).HasColumnName("IdFaseOportunidad_Maxima");

                entity.Property(e => e.IdFaseOportunidadMaximaInicial).HasColumnName("IdFaseOportunidad_MaximaInicial");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdProbabilidadRegistroPw).HasColumnName("IdProbabilidadRegistroPW");

                entity.Property(e => e.Nombre1).HasMaxLength(50);

                entity.Property(e => e.Nombre2).HasMaxLength(50);

                entity.Property(e => e.NombreCiudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(203);

                entity.Property(e => e.NombrePais)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloDwOportunidadDetalle>(entity =>
            {
                entity.ToTable("T_ModeloDwOportunidadDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionOportunidad).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloGeneral>(entity =>
            {
                entity.ToTable("T_ModeloGeneral", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.PeIntercepto).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloGeneralAformacion>(entity =>
            {
                entity.ToTable("T_ModeloGeneralAFormacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(3, 2)");

                entity.HasOne(d => d.IdAreaFormacionNavigation)
                    .WithMany(p => p.TModeloGeneralAformacion)
                    .HasForeignKey(d => d.IdAreaFormacion)
                    .HasConstraintName("FK_T_ModeloGeneralAFormacion_T_AreaFormacion");

                entity.HasOne(d => d.IdModeloGeneralNavigation)
                    .WithMany(p => p.TModeloGeneralAformacion)
                    .HasForeignKey(d => d.IdModeloGeneral)
                    .HasConstraintName("FK_T_ModeloGeneralAFormacion_T_ModeloGeneral");
            });

            modelBuilder.Entity<TModeloGeneralAtrabajo>(entity =>
            {
                entity.ToTable("T_ModeloGeneralATrabajo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(3, 2)");

                entity.HasOne(d => d.IdAreaTrabajoNavigation)
                    .WithMany(p => p.TModeloGeneralAtrabajo)
                    .HasForeignKey(d => d.IdAreaTrabajo)
                    .HasConstraintName("FK_T_ModeloGeneralATrabajo_T_AreaTrabajo");

                entity.HasOne(d => d.IdModeloGeneralNavigation)
                    .WithMany(p => p.TModeloGeneralAtrabajo)
                    .HasForeignKey(d => d.IdModeloGeneral)
                    .HasConstraintName("FK_T_ModeloGeneralATrabajo_T_ModeloGeneral");
            });

            modelBuilder.Entity<TModeloGeneralCargo>(entity =>
            {
                entity.ToTable("T_ModeloGeneralCargo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(3, 2)");

                entity.HasOne(d => d.IdCargoNavigation)
                    .WithMany(p => p.TModeloGeneralCargo)
                    .HasForeignKey(d => d.IdCargo)
                    .HasConstraintName("FK_T_ModeloGeneralCargo_T_Cargo");

                entity.HasOne(d => d.IdModeloGeneralNavigation)
                    .WithMany(p => p.TModeloGeneralCargo)
                    .HasForeignKey(d => d.IdModeloGeneral)
                    .HasConstraintName("FK_T_ModeloGeneralCargo_T_ModeloGeneral");
            });

            modelBuilder.Entity<TModeloGeneralCategoriaDato>(entity =>
            {
                entity.ToTable("T_ModeloGeneralCategoriaDato", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCategoriaDatoNavigation)
                    .WithMany(p => p.TModeloGeneralCategoriaDato)
                    .HasForeignKey(d => d.IdCategoriaDato)
                    .HasConstraintName("FK_T_ModeloGeneralCategoriaDato_T_CategoriaOrigen");

                entity.HasOne(d => d.IdModeloGeneralNavigation)
                    .WithMany(p => p.TModeloGeneralCategoriaDato)
                    .HasForeignKey(d => d.IdModeloGeneral)
                    .HasConstraintName("FK_T_ModeloGeneralCategoriaDato_T_ModeloGeneral");
            });

            modelBuilder.Entity<TModeloGeneralEscala>(entity =>
            {
                entity.ToTable("T_ModeloGeneralEscala", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorMaximo).HasColumnType("decimal(3, 2)");

                entity.Property(e => e.ValorMinimo).HasColumnType("decimal(3, 2)");

                entity.HasOne(d => d.IdModeloGeneralNavigation)
                    .WithMany(p => p.TModeloGeneralEscala)
                    .HasForeignKey(d => d.IdModeloGeneral)
                    .HasConstraintName("FK_T_ModeloGeneralEscala_T_ModeloGeneral");
            });

            modelBuilder.Entity<TModeloGeneralIndustria>(entity =>
            {
                entity.ToTable("T_ModeloGeneralIndustria", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(3, 2)");

                entity.HasOne(d => d.IdIndustriaNavigation)
                    .WithMany(p => p.TModeloGeneralIndustria)
                    .HasForeignKey(d => d.IdIndustria)
                    .HasConstraintName("FK_T_ModeloGeneralIndustria_T_Industria");

                entity.HasOne(d => d.IdModeloGeneralNavigation)
                    .WithMany(p => p.TModeloGeneralIndustria)
                    .HasForeignKey(d => d.IdModeloGeneral)
                    .HasConstraintName("FK_T_ModeloGeneralIndustria_T_ModeloGeneral");
            });

            modelBuilder.Entity<TModeloGeneralPgeneral>(entity =>
            {
                entity.ToTable("T_ModeloGeneralPGeneral", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdModeloGeneralNavigation)
                    .WithMany(p => p.TModeloGeneralPgeneral)
                    .HasForeignKey(d => d.IdModeloGeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloGeneralPGeneral_T_ModeloGeneral");

                entity.HasOne(d => d.IdProgramaGeneralNavigation)
                    .WithMany(p => p.TModeloGeneralPgeneral)
                    .HasForeignKey(d => d.IdProgramaGeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloGeneralPGeneral_T_PGeneral");
            });

            modelBuilder.Entity<TModeloGeneralTipoDato>(entity =>
            {
                entity.ToTable("T_ModeloGeneralTipoDato", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdModeloGeneralNavigation)
                    .WithMany(p => p.TModeloGeneralTipoDato)
                    .HasForeignKey(d => d.IdModeloGeneral)
                    .HasConstraintName("FK_T_ModeloGeneralTipoDato_T_ModeloGeneral");

                entity.HasOne(d => d.IdTipoDatoNavigation)
                    .WithMany(p => p.TModeloGeneralTipoDato)
                    .HasForeignKey(d => d.IdTipoDato)
                    .HasConstraintName("FK_T_ModeloGeneralTipoDato_T_TipoDato");
            });

            modelBuilder.Entity<TModeloPredictivo>(entity =>
            {
                entity.ToTable("T_ModeloPredictivo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.PeIntercepto).HasColumnType("decimal(11, 6)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TModeloPredictivo)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloPredictivo_T_PGeneral");
            });

            modelBuilder.Entity<TModeloPredictivoApellido>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoApellido", "pla");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoCargo>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoCargo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(8, 4)");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TModeloPredictivoCargo)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloPredictivoCargo_T_PGeneral");
            });

            modelBuilder.Entity<TModeloPredictivoCategoriaDato>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoCategoriaDato", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TModeloPredictivoCategoriaDato)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloPredictivoCategoriaDato_T_PGeneral");
            });

            modelBuilder.Entity<TModeloPredictivoCiudad>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoCiudad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoEscalaProbabilidad>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoEscalaProbabilidad", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ProbabilidaIinicial)
                    .HasColumnName("ProbabilidaIInicial")
                    .HasColumnType("decimal(3, 2)");

                entity.Property(e => e.ProbabilidadActual).HasColumnType("decimal(3, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TModeloPredictivoEscalaProbabilidad)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloPredictivoEscalaProbabilidad_T_PGeneral");
            });

            modelBuilder.Entity<TModeloPredictivoFormacion>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoFormacion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(8, 4)");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TModeloPredictivoFormacion)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloPredictivoFormacion_T_PGeneral");
            });

            modelBuilder.Entity<TModeloPredictivoIndustria>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoIndustria", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TModeloPredictivoIndustria)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloPredictivoIndustria_T_PGeneral");
            });

            modelBuilder.Entity<TModeloPredictivoModalidad>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoNombre>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoNombre", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoPais>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoPais", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoPartner>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoPartner", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoPrecio>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoPrecio", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoProbabilidad>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoProbabilidad", "mkt");

                entity.HasIndex(e => e.IdOportunidad)
                    .HasName("INC_T_ModeloPredictivoProbabilidad_PorIdOportunidad");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Probabilidad).HasColumnType("decimal(8, 5)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdModeloPredictivoTipoNavigation)
                    .WithMany(p => p.TModeloPredictivoProbabilidad)
                    .HasForeignKey(d => d.IdModeloPredictivoTipo)
                    .HasConstraintName("FK_T_ModeloPredictivoProbabilidad_T_ModeloPredictivoTipo");

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TModeloPredictivoProbabilidad)
                    .HasForeignKey(d => d.IdOportunidad)
                    .HasConstraintName("FK_T_ModeloPredictivoProbabilidad_T_Oportunidad");
            });

            modelBuilder.Entity<TModeloPredictivoReemplazoPgeneral>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoReemplazoPGeneral", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneralOriginal).HasColumnName("IdPGeneral_Original");

                entity.Property(e => e.IdPgeneralReemplazo).HasColumnName("IdPGeneral_Reemplazo");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoSubArea>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoSubArea", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoTelefonoFijo>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoTelefonoFijo", "pla");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoTelefonoMovil>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoTelefonoMovil", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoTipo>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoTipo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModeloPredictivoTipoDato>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoTipoDato", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TModeloPredictivoTipoDato)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloPredictivoTipoDato_T_PGeneral");
            });

            modelBuilder.Entity<TModeloPredictivoTrabajo>(entity =>
            {
                entity.ToTable("T_ModeloPredictivoTrabajo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Validar).HasColumnName("validar");

                entity.Property(e => e.Valor).HasColumnName("valor");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TModeloPredictivoTrabajo)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ModeloPredictivoTrabajo_T_PGeneral");
            });

            modelBuilder.Entity<TModoPago>(entity =>
            {
                entity.ToTable("T_ModoPago", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModuloSistema>(entity =>
            {
                entity.ToTable("T_ModuloSistema", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdModuloSistemaGrupo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModuloSistemaAcceso>(entity =>
            {
                entity.ToTable("T_ModuloSistemaAcceso", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModuloSistemaGrupo>(entity =>
            {
                entity.ToTable("T_ModuloSistemaGrupo", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TModuloSistemaPuestoTrabajo>(entity =>
            {
                entity.ToTable("T_ModuloSistemaPuestoTrabajo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdModuloSistemaNavigation)
                    .WithMany(p => p.TModuloSistemaPuestoTrabajo)
                    .HasForeignKey(d => d.IdModuloSistema)
                    .HasConstraintName("FK_T_ModuloSistemaPuestoTrabajo_T_ModuloSistema");

                entity.HasOne(d => d.IdPuestoTrabajoNavigation)
                    .WithMany(p => p.TModuloSistemaPuestoTrabajo)
                    .HasForeignKey(d => d.IdPuestoTrabajo)
                    .HasConstraintName("FK_T_ModuloSistemaPuestoTrabajo_T_PuestoTrabajo");
            });

            modelBuilder.Entity<TModuloSistemaSubGrupo>(entity =>
            {
                entity.ToTable("T_ModuloSistemaSubGrupo", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMoneda>(entity =>
            {
                entity.ToTable("T_Moneda", "pla");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCorto)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePlural)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeMora).HasColumnType("decimal(10, 8)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Simbolo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMontoPago>(entity =>
            {
                entity.ToTable("T_MontoPago", "pla");

                entity.HasIndex(e => new { e.Cuotas, e.Matricula, e.NroCuotas, e.Paquete, e.IdPrograma, e.IdTipoPago, e.Estado, e.IdPais, e.IdMoneda, e.Precio })
                    .HasName("_dta_index_T_MontoPago_19_869578136__K9_K10_K20_K11_K4_K2_5_6_7_17");

                entity.Property(e => e.Cuotas).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Matricula).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.MontoDescontado).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Precio).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.PrecioLetras)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrimeraCuota)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMontoPagoCronograma>(entity =>
            {
                entity.ToTable("T_MontoPagoCronograma", "com");

                entity.HasIndex(e => new { e.IdOportunidad, e.Estado })
                    .HasName("INC_T_MontoPagoCronograma_PorIdOportunidadPorEstado");

                entity.Property(e => e.CodigoMatricula).HasMaxLength(100);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombrePlural)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMontoPagoCronogramaDetalle>(entity =>
            {
                entity.ToTable("T_MontoPagoCronogramaDetalle", "com");

                entity.Property(e => e.CuotaDescripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMontoPagoCronogramaNavigation)
                    .WithMany(p => p.TMontoPagoCronogramaDetalle)
                    .HasForeignKey(d => d.IdMontoPagoCronograma)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_MontoPagoCronogramaDetalle_T_MontoPagoCronograma");
            });

            modelBuilder.Entity<TMontoPagoPlataforma>(entity =>
            {
                entity.ToTable("T_MontoPagoPlataforma", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMontoPagoNavigation)
                    .WithMany(p => p.TMontoPagoPlataforma)
                    .HasForeignKey(d => d.IdMontoPago)
                    .HasConstraintName("FK_T_MontoPagoPlataforma_T_MontoPago");
            });

            modelBuilder.Entity<TMontoPagoSuscripcion>(entity =>
            {
                entity.ToTable("T_MontoPagoSuscripcion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMontoPagoNavigation)
                    .WithMany(p => p.TMontoPagoSuscripcion)
                    .HasForeignKey(d => d.IdMontoPago)
                    .HasConstraintName("FK_T_MontoPagoSuscripcion_T_MontoPago");
            });

            modelBuilder.Entity<TMoodleCategoria>(entity =>
            {
                entity.ToTable("T_MoodleCategoria", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreCategoria)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMoodleCategoriaTipoNavigation)
                    .WithMany(p => p.TMoodleCategoria)
                    .HasForeignKey(d => d.IdMoodleCategoriaTipo)
                    .HasConstraintName("FK_T_MoodleCategoria_T_MoodleCategoriaTipo");
            });

            modelBuilder.Entity<TMoodleCategoriaTipo>(entity =>
            {
                entity.ToTable("T_MoodleCategoriaTipo", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMoodleCronogramaEvaluacion>(entity =>
            {
                entity.ToTable("T_MoodleCronogramaEvaluacion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEstimada).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreEvaluacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMoodleCurso>(entity =>
            {
                entity.ToTable("T_MoodleCurso", "ope");

                entity.HasIndex(e => e.IdCursoMoodle)
                    .HasName("UC_T_CursoMoodle_PorIdCursoMoodle")
                    .IsUnique();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMotivoCese>(entity =>
            {
                entity.ToTable("T_MotivoCese", "gp");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMotivoInactividad>(entity =>
            {
                entity.ToTable("T_MotivoInactividad", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TNivelCompetenciaTecnica>(entity =>
            {
                entity.ToTable("T_NivelCompetenciaTecnica", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TNivelEstudio>(entity =>
            {
                entity.ToTable("T_NivelEstudio", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TNivelIdioma>(entity =>
            {
                entity.ToTable("T_NivelIdioma", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TNota>(entity =>
            {
                entity.ToTable("T_Nota", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nota).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TNotaIngresoCaja>(entity =>
            {
                entity.ToTable("T_NotaIngresoCaja", "fin");

                entity.Property(e => e.CodigoNic)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCobro).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaGiro).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalEmitido).HasColumnName("IdPersonal_Emitido");

                entity.Property(e => e.Monto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TNuevoAlumnoCongelado>(entity =>
            {
                entity.ToTable("T_NuevoAlumnoCongelado", "fin");

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaCongelamiento).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontoPagado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Saldo).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCuota)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPagar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TObservacionesCursosFinalizadosLog>(entity =>
            {
                entity.ToTable("T_ObservacionesCursosFinalizadosLog", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.ObservacionCursoFinalizado).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOcurrencia>(entity =>
            {
                entity.ToTable("T_Ocurrencia", "com");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPlantillaSpeech).HasColumnName("IdPlantilla_Speech");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCs)
                    .HasColumnName("NombreCS")
                    .HasComputedColumnSql("(checksum([Nombre]))");

                entity.Property(e => e.NombreM)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RequiereLlamada)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Roles)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalAreaTrabajoNavigation)
                    .WithMany(p => p.TOcurrencia)
                    .HasForeignKey(d => d.IdPersonalAreaTrabajo)
                    .HasConstraintName("FK_T_Ocurrencia_T_PersonalAreaTrabajo");
            });

            modelBuilder.Entity<TOcurrenciaActividad>(entity =>
            {
                entity.ToTable("T_OcurrenciaActividad", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdOcurrenciaActividadPadre).HasColumnName("IdOcurrenciaActividad_Padre");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOcurrenciaActividadAlterno>(entity =>
            {
                entity.ToTable("T_OcurrenciaActividadAlterno", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdActividadCabeceraProgramada).HasColumnName("IdActividadCabecera_Programada");

                entity.Property(e => e.IdOcurrenciaActividadPadre).HasColumnName("IdOcurrenciaActividad_Padre");

                entity.Property(e => e.IdPlantillaSpeech).HasColumnName("IdPlantilla_Speech");

                entity.Property(e => e.Roles)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOcurrenciaAlterno>(entity =>
            {
                entity.ToTable("T_OcurrenciaAlterno", "com");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPlantillaSpeech).HasColumnName("IdPlantilla_Speech");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCs)
                    .HasColumnName("NombreCS")
                    .HasComputedColumnSql("(checksum([Nombre]))");

                entity.Property(e => e.NombreM)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RequiereLlamada)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Roles)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOcurrenciaReporte>(entity =>
            {
                entity.ToTable("T_OcurrenciaReporte", "com");

                entity.Property(e => e.Color)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPlantillaSpeech).HasColumnName("IdPlantilla_Speech");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RequiereLlamada)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Roles)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOcurrenciaReporteAlterno>(entity =>
            {
                entity.ToTable("T_OcurrenciaReporteAlterno", "com");

                entity.Property(e => e.Color)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPlantillaSpeech).HasColumnName("IdPlantilla_Speech");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RequiereLlamada)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Roles)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOcurrenciaValidacionFinalizarActividad>(entity =>
            {
                entity.ToTable("T_Ocurrencia_ValidacionFinalizarActividad", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOperadorComparacion>(entity =>
            {
                entity.ToTable("T_OperadorComparacion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Simbolo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOperadorComparacionModuloSistema>(entity =>
            {
                entity.ToTable("T_OperadorComparacionModuloSistema", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOportunidad>(entity =>
            {
                entity.ToTable("T_Oportunidad", "com");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_Oportunidad_PorIdMigracion");

                entity.HasIndex(e => new { e.Estado, e.IdClasificacionPersona })
                    .HasName("INC_T_Oportunidad_PorEstadoPorClasificacionPersona");

                entity.HasIndex(e => new { e.IdCentroCosto, e.IdAlumno })
                    .HasName("INC_T_Oportunidad_PorIdAlumnoPorIdCentroCosto");

                entity.HasIndex(e => new { e.IdFaseOportunidad, e.Estado })
                    .HasName("NonClusteredIndex-20190801-212558");

                entity.HasIndex(e => new { e.FechaCreacion, e.FechaModificacion, e.UsuarioModificacion, e.IdPersonalAsignado, e.IdCentroCosto, e.IdAlumno })
                    .HasName("INC_T_Oportunidad_PorIdPersonal_Asignado_PorIdCentroCosto_PorIdAlumno");

                entity.HasIndex(e => new { e.CodMailing, e.IdCategoriaOrigen, e.IdCentroCosto, e.IdClasificacionPersona, e.IdFaseOportunidad, e.IdFaseOportunidadMaxima, e.IdOrigen, e.IdPersonalAsignado, e.IdPersonalAreaTrabajo, e.IdTipoDato, e.FechaCreacion })
                    .HasName("INC_T_Oportunidad_PorFechaCreacion");

                entity.HasIndex(e => new { e.FechaModificacion, e.IdActividadCabeceraUltima, e.IdActividadDetalleUltima, e.IdAlumno, e.IdCentroCosto, e.IdClasificacionPersona, e.IdEstadoOportunidad, e.IdFaseOportunidad, e.IdPadre, e.IdPersonalAsignado, e.IdTipoDato, e.UltimaFechaProgramada, e.UltimoComentario, e.UsuarioCreacion, e.IdPersonalAreaTrabajo, e.FechaCreacion })
                    .HasName("INC_T_Oportunidad_PorIdPersonalAreaTrabajoPorFechaCreacionIncluyeCamposAsignacionManual");

                entity.HasIndex(e => new { e.IdActividadCabeceraUltima, e.IdActividadDetalleUltima, e.IdCategoriaOrigen, e.IdCentroCosto, e.IdClasificacionPersona, e.IdEstadoActividadDetalleUltimoEstado, e.IdEstadoOportunidad, e.IdFaseOportunidad, e.IdOrigen, e.IdPersonalAsignado, e.IdSubCategoriaDato, e.IdTipoDato, e.UltimaFechaProgramada, e.UltimoComentario, e.IdAlumno, e.Estado })
                    .HasName("INC_T_Oportunidad_PorIdAlumno_PorEstado");

                entity.HasIndex(e => new { e.FechaCreacion, e.Id, e.IdActividadCabeceraUltima, e.IdActividadDetalleUltima, e.IdAlumno, e.IdCategoriaOrigen, e.IdCentroCosto, e.IdClasificacionPersona, e.IdEstadoActividadDetalleUltimoEstado, e.IdOrigen, e.IdSubCategoriaDato, e.UltimaFechaProgramada, e.UltimoComentario, e.IdPersonalAsignado, e.IdEstadoOportunidad, e.IdTipoDato, e.IdFaseOportunidad })
                    .HasName("INC_T_Oportunidad_PorIdPersonal_Asignado_PorIsEstadoOportunidad_PorIdTipoDatos_PorIdFaseOportunidad");

                entity.HasIndex(e => new { e.IdActividadCabeceraUltima, e.IdActividadDetalleUltima, e.IdClasificacionPersona, e.IdFaseOportunidad, e.IdPadre, e.IdSubCategoriaDato, e.UltimaFechaProgramada, e.UltimoComentario, e.IdPersonalAsignado, e.IdTipoDato, e.IdEstadoOportunidad, e.IdCategoriaOrigen, e.Id, e.IdEstadoActividadDetalleUltimoEstado, e.IdOrigen, e.IdCentroCosto, e.IdAlumno })
                    .HasName("INC_T_Oportunidad_PorIdPersonal_TipoDato_EstadoOportunidad_CategoriaOrigen_EstadoActividadDetalle_Origen_CentroCosto_Alumno");

                entity.HasIndex(e => new { e.FechaModificacion, e.IdActividadCabeceraUltima, e.IdActividadDetalleUltima, e.IdAlumno, e.IdCategoriaOrigen, e.IdCentroCosto, e.IdClasificacionPersona, e.IdEstadoActividadDetalleUltimoEstado, e.IdOrigen, e.IdPadre, e.IdPersonalAreaTrabajo, e.IdSubCategoriaDato, e.UltimaFechaProgramada, e.UltimoComentario, e.UsuarioCreacion, e.IdPersonalAsignado, e.IdTipoDato, e.IdFaseOportunidad, e.IdEstadoOportunidad })
                    .HasName("IN_T_Oportunidad_PorIPersonalAsignado_TipoDato_FaseOportunidad_EstadoOportunidad");

                entity.HasIndex(e => new { e.FechaModificacion, e.FechaRegistroCampania, e.IdAlumno, e.IdOrigen, e.IdTipoDato, e.NroSolicitud, e.NroSolicitudPorArea, e.NroSolicitudPorProgramaEspecifico, e.NroSolicitudPorProgramaGeneral, e.NroSolicitudPorSubArea, e.UltimaFechaProgramada, e.UsuarioModificacion, e.IdClasificacionPersona, e.Id, e.IdFaseOportunidad, e.IdEstadoOportunidad, e.IdPersonalAreaTrabajo, e.FechaCreacion, e.IdPersonalAsignado, e.IdCentroCosto, e.IdCategoriaOrigen })
                    .HasName("INC_T_Oportunidad_ParaAsignacionManual");

                entity.Property(e => e.CodMailing)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPagoIc)
                    .HasColumnName("CodigoPagoIC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvioFaseOportunidadPf)
                    .HasColumnName("FechaEnvioFaseOportunidadPF")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPagoFaseOportunidadIc)
                    .HasColumnName("FechaPagoFaseOportunidadIC")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaPagoFaseOportunidadPf)
                    .HasColumnName("FechaPagoFaseOportunidadPF")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaPaso2).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistroCampania).HasColumnType("datetime");

                entity.Property(e => e.IdActividadCabeceraUltima).HasColumnName("IdActividadCabecera_Ultima");

                entity.Property(e => e.IdActividadDetalleUltima).HasColumnName("IdActividadDetalle_Ultima");

                entity.Property(e => e.IdEstadoActividadDetalleUltimoEstado).HasColumnName("IdEstadoActividadDetalle_UltimoEstado");

                entity.Property(e => e.IdEstadoOcurrenciaUltimo).HasColumnName("IdEstadoOcurrencia_Ultimo");

                entity.Property(e => e.IdFaseOportunidadIc).HasColumnName("IdFaseOportunidad_IC");

                entity.Property(e => e.IdFaseOportunidadInicial).HasColumnName("IdFaseOportunidad_Inicial");

                entity.Property(e => e.IdFaseOportunidadIp).HasColumnName("IdFaseOportunidad_IP");

                entity.Property(e => e.IdFaseOportunidadMaxima).HasColumnName("IdFaseOportunidad_Maxima");

                entity.Property(e => e.IdFaseOportunidadPf).HasColumnName("IdFaseOportunidad_PF");

                entity.Property(e => e.IdPersonalAsignado).HasColumnName("IdPersonal_Asignado");

                entity.Property(e => e.IdTiempoCapacitacionValidacion).HasColumnName("IdTiempoCapacitacion_Validacion");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UltimaFechaProgramada).HasColumnType("datetime");

                entity.Property(e => e.UltimoComentario)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UrlOrigen).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAnuncioFacebookNavigation)
                    .WithMany(p => p.TOportunidad)
                    .HasForeignKey(d => d.IdAnuncioFacebook)
                    .HasConstraintName("FK_T_Oportunidad_T_AnuncioFacebook");
            });

            modelBuilder.Entity<TOportunidadBeneficio>(entity =>
            {
                entity.ToTable("T_OportunidadBeneficio", "com");

                entity.HasIndex(e => new { e.IdOportunidadCompetidor, e.Estado })
                    .HasName("INC_T_OportunidadBeneficio_PorIdOportunidadCompetidorPorEstado");

                entity.Property(e => e.Completado)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadCompetidorNavigation)
                    .WithMany(p => p.TOportunidadBeneficio)
                    .HasForeignKey(d => d.IdOportunidadCompetidor)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_OportunidadBeneficio_T_OportunidadCompetidor");
            });

            modelBuilder.Entity<TOportunidadClasificacionOperaciones>(entity =>
            {
                entity.ToTable("T_OportunidadClasificacionOperaciones", "ope");

                entity.HasIndex(e => new { e.IdOportunidad, e.IdMatriculaCabecera })
                    .HasName("INC_T_OportunidadClasificacionOperaciones_PorIdMatriculaCabecera");

                entity.HasIndex(e => new { e.DiasAtrasoCuotaPago, e.Estado, e.IdAgendaTab, e.IdMatriculaCabecera, e.IdTarifario, e.IdOportunidad })
                    .HasName("INC_T_OportunidadClasificacionOperaciones_PorIdOportunidad");

                entity.HasIndex(e => new { e.DiasAtrasoCuotaPago, e.Estado, e.IdMatriculaCabecera, e.IdOportunidad, e.IdTarifario, e.IdAgendaTab })
                    .HasName("INC_T_OportunidadClasificacionOperaciones_PorIdAgendaTab");

                entity.Property(e => e.AvanceProgramado)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AvanceProgramadoAutoevaluacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AvanceProgramadoSesion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AvanceReal)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AvanceRealAutoevaluacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AvanceRealSesion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoAutoevaluaciones)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProximaCuota).HasColumnType("datetime");

                entity.Property(e => e.FechaUltimaActividadEjecutada).HasColumnType("datetime");

                entity.Property(e => e.MonedaCuotaPago)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MontoAtrasoCuotaPago).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NotaPromedio).HasColumnType("decimal(10, 1)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UltimoContacto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAgendaTabNavigation)
                    .WithMany(p => p.TOportunidadClasificacionOperaciones)
                    .HasForeignKey(d => d.IdAgendaTab)
                    .HasConstraintName("FK_T_OportunidadClasificacionOperaciones_T_AgendaTab");

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TOportunidadClasificacionOperaciones)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FK_T_OportunidadClasificacionOperaciones_T_MatriculaCabecera");

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TOportunidadClasificacionOperaciones)
                    .HasForeignKey(d => d.IdOportunidad)
                    .HasConstraintName("FK_T_OportunidadClasificacionOperaciones_T_Oportunidad");
            });

            modelBuilder.Entity<TOportunidadCompetidor>(entity =>
            {
                entity.ToTable("T_OportunidadCompetidor", "com");

                entity.HasIndex(e => e.IdOportunidad)
                    .HasName("INC_T_OportunidadCompetidor_PorIdOportunidad");

                entity.Property(e => e.Completado)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.OtroBeneficio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TOportunidadCompetidor)
                    .HasForeignKey(d => d.IdOportunidad)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_OportunidadCompetidor_T_Oportunidad");
            });

            modelBuilder.Entity<TOportunidadIsVerificada>(entity =>
            {
                entity.ToTable("T_OportunidadIsVerificada", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOportunidadLog>(entity =>
            {
                entity.ToTable("T_OportunidadLog", "com");

                entity.HasIndex(e => e.IdMigracion)
                    .HasName("INC_T_OportunidadLog_PorIdMigracion");

                entity.HasIndex(e => new { e.IdOcurrenciaActividad, e.IdActividadDetalle })
                    .HasName("NCI_T_OportunidadLog_PorIdActividadDetalle");

                entity.HasIndex(e => new { e.FechaCreacion, e.IdFaseOportunidad, e.IdOportunidad })
                    .HasName("INC_OportunidadLog_PorIdOportunidad");

                entity.HasIndex(e => new { e.IdActividadDetalle, e.IdFaseOportunidad, e.IdFaseOportunidadAnt, e.FechaLog, e.Estado })
                    .HasName("INC_T_OportunidadLog_Fecha_Log_Estado");

                entity.HasIndex(e => new { e.FechaLog, e.IdActividadDetalle, e.IdFaseOportunidad, e.IdFaseOportunidadAnt, e.IdOportunidad, e.Estado })
                    .HasName("INC_T_OportunidadLog_Estado");

                entity.HasIndex(e => new { e.IdActividadDetalle, e.IdFaseOportunidad, e.IdFaseOportunidadAnt, e.IdPersonalAsignado, e.FechaLog, e.Estado })
                    .HasName("INC_T_OportunidadLog_IdPersonalAsignado_Estado_FechaLog");

                entity.Property(e => e.CambioFaseIs).HasColumnName("CambioFaseIS");

                entity.Property(e => e.CicloRn2).HasColumnName("CicloRN2");

                entity.Property(e => e.CodigoPagoIc)
                    .HasColumnName("CodigoPagoIC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comentario)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCambioAsesor).HasColumnType("datetime");

                entity.Property(e => e.FechaCambioAsesorAnt).HasColumnType("datetime");

                entity.Property(e => e.FechaCambioFase).HasColumnType("datetime");

                entity.Property(e => e.FechaCambioFaseAnt).HasColumnType("datetime");

                entity.Property(e => e.FechaCambioFaseIs)
                    .HasColumnName("FechaCambioFaseIS")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvioFaseOportunidadPf)
                    .HasColumnName("FechaEnvioFaseOportunidadPF")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaFinLog).HasColumnType("datetime");

                entity.Property(e => e.FechaLog)
                    .HasColumnName("Fecha_Log")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPagoFaseOportunidadIc)
                    .HasColumnName("FechaPagoFaseOportunidadIC")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaPagoFaseOportunidadPf)
                    .HasColumnName("FechaPagoFaseOportunidadPF")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaRegistroCampania).HasColumnType("datetime");

                entity.Property(e => e.IdAsesorAnt).HasColumnName("IdAsesor_Ant");

                entity.Property(e => e.IdCentroCostoAnt).HasColumnName("IdCentroCosto_Ant");

                entity.Property(e => e.IdFaseOportunidadAnt).HasColumnName("IdFaseOportunidad_Ant");

                entity.Property(e => e.IdFaseOportunidadIc).HasColumnName("IdFaseOportunidad_IC");

                entity.Property(e => e.IdFaseOportunidadIp).HasColumnName("IdFaseOportunidad_IP");

                entity.Property(e => e.IdFaseOportunidadPf).HasColumnName("IdFaseOportunidad_PF");

                entity.Property(e => e.IdPersonalAsignado).HasColumnName("IdPersonal_Asignado");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TOportunidadLog)
                    .HasForeignKey(d => d.IdOportunidad)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_OportunidadLog_T_Oportunidad");
            });

            modelBuilder.Entity<TOportunidadMaximaPorCategoria>(entity =>
            {
                entity.ToTable("T_OportunidadMaximaPorCategoria", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Grupo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OportunidadesSinGenerarIs).HasColumnName("OportunidadesSinGenerarIS");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOportunidadPrerequisitoEspecifico>(entity =>
            {
                entity.ToTable("T_OportunidadPrerequisitoEspecifico", "com");

                entity.HasIndex(e => new { e.IdOportunidadCompetidor, e.Estado })
                    .HasName("INC_T_OportunidadPrerequisitoEspecifico_PorIdOportunidadCompetidorPorEstado");

                entity.Property(e => e.Completado)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadCompetidorNavigation)
                    .WithMany(p => p.TOportunidadPrerequisitoEspecifico)
                    .HasForeignKey(d => d.IdOportunidadCompetidor)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_OportunidadPrerequisitoEspecifico_T_OportunidadCompetidor");
            });

            modelBuilder.Entity<TOportunidadPrerequisitoGeneral>(entity =>
            {
                entity.ToTable("T_OportunidadPrerequisitoGeneral", "com");

                entity.HasIndex(e => new { e.IdOportunidadCompetidor, e.Estado })
                    .HasName("INC_T_OportunidadPrerequisitoGeneral_PorIdOportunidadCompetidorPorEstado");

                entity.Property(e => e.Completado)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadCompetidorNavigation)
                    .WithMany(p => p.TOportunidadPrerequisitoGeneral)
                    .HasForeignKey(d => d.IdOportunidadCompetidor)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_OportunidadPrerequisitoGeneral_T_OportunidadCompetidor");
            });

            modelBuilder.Entity<TOportunidadRemarketingAgenda>(entity =>
            {
                entity.ToTable("T_OportunidadRemarketingAgenda", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOportunidadTasaConversionHistorica>(entity =>
            {
                entity.ToTable("T_OportunidadTasaConversionHistorica", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdAformacion).HasColumnName("IdAFormacion");

                entity.Property(e => e.IdAtrabajo).HasColumnName("IdATrabajo");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.NombreAformacion).HasMaxLength(300);

                entity.Property(e => e.NombreAtrabajo)
                    .HasColumnName("NombreATrabajo")
                    .HasMaxLength(300);

                entity.Property(e => e.NombreCargo).HasMaxLength(300);

                entity.Property(e => e.NombreCategoria).HasMaxLength(300);

                entity.Property(e => e.NombreContacto).HasMaxLength(300);

                entity.Property(e => e.NombreIndustria).HasMaxLength(300);

                entity.Property(e => e.NombrePais).HasMaxLength(300);

                entity.Property(e => e.NombrePespecifico).HasMaxLength(300);

                entity.Property(e => e.ProbabilidaDesc).HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAformacion).HasColumnName("ValorAFormacion");

                entity.Property(e => e.ValorAtrabajo).HasColumnName("ValorATrabajo");
            });

            modelBuilder.Entity<TOrigen>(entity =>
            {
                entity.ToTable("T_Origen", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOrigenIngresoCaja>(entity =>
            {
                entity.ToTable("T_OrigenIngresoCaja", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOrigenPrograma>(entity =>
            {
                entity.ToTable("T_OrigenPrograma", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOtroMovimientoCaja>(entity =>
            {
                entity.ToTable("T_OtroMovimientoCaja", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPageFbValue>(entity =>
            {
                entity.ToTable("T_PageFbValue", "com");

                entity.Property(e => e.Content).IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Verb)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPaginaReclutadoraPersonal>(entity =>
            {
                entity.ToTable("T_PaginaReclutadoraPersonal", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPaginaWebPw>(entity =>
            {
                entity.ToTable("T_PaginaWeb_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.ServidorVinculado)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPago>(entity =>
            {
                entity.ToTable("T_Pago", "fin");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaDocumento).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Monto).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.NroDeposito)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NroRefCheque)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruc)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.SerieNumero)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPagoFinal>(entity =>
            {
                entity.ToTable("T_PagoFinal", "fin");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaDocumento).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Monto).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.NroDeposito)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NroRefCheque)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruc)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.SerieNumero)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPais>(entity =>
            {
                entity.ToTable("T_Pais", "conf");

                entity.HasIndex(e => new { e.CodigoIso, e.Estado })
                    .HasName("INC_T_Pais_PorCodigoISO_PorEstado");

                entity.HasIndex(e => new { e.Id, e.Estado })
                    .HasName("INC_T_Pais_PorId_PorEstado");

                entity.HasIndex(e => new { e.NombrePais, e.CodigoPais })
                    .HasName("INC_T_Pais_PorCodigoPais_PorNombrePais");

                entity.Property(e => e.CodigoIso)
                    .IsRequired()
                    .HasColumnName("CodigoISO")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPaisMoodle)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePais)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaBandera)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RutaIcono).HasMaxLength(150);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ZonaHoraria).HasColumnType("numeric(10, 2)");
            });

            modelBuilder.Entity<TPanelControlMeta>(entity =>
            {
                entity.ToTable("T_PanelControlMeta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPanelIngresoDisponible>(entity =>
            {
                entity.ToTable("T_PanelIngresoDisponible", "fin");

                entity.Property(e => e.ConsideraVsd).HasColumnName("ConsideraVSD");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdDiaSemanaFijo).HasColumnName("IdDiaSemana_Fijo");

                entity.Property(e => e.PorcentajeCobro).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TParametroEvaluacion>(entity =>
            {
                entity.ToTable("T_ParametroEvaluacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCriterioEvaluacionNavigation)
                    .WithMany(p => p.TParametroEvaluacion)
                    .HasForeignKey(d => d.IdCriterioEvaluacion)
                    .HasConstraintName("FK_T_ParametroEvaluacion_T_CriterioEvaluacion");

                entity.HasOne(d => d.IdEscalaCalificacionNavigation)
                    .WithMany(p => p.TParametroEvaluacion)
                    .HasForeignKey(d => d.IdEscalaCalificacion)
                    .HasConstraintName("FK_T_ParametroEvaluacion_T_EscalaCalificacion");
            });

            modelBuilder.Entity<TParametroEvaluacionNota>(entity =>
            {
                entity.ToTable("T_ParametroEvaluacionNota", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdEsquemaEvaluacionPgeneralDetalle).HasColumnName("IdEsquemaEvaluacionPGeneralDetalle");

                entity.Property(e => e.IdEsquemaEvaluacionPgeneralDetalleCongelado).HasColumnName("IdEsquemaEvaluacionPGeneralDetalle_Congelado");

                entity.Property(e => e.NombreArchivoRetroalimentacion)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Retroalimentacion).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlArchivoSubidoRetroalimentacion)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEscalaCalificacionDetalleNavigation)
                    .WithMany(p => p.TParametroEvaluacionNota)
                    .HasForeignKey(d => d.IdEscalaCalificacionDetalle)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ParametroEvaluacionNota_T_ParametroEvaluacion");

                entity.HasOne(d => d.IdEsquemaEvaluacionPgeneralDetalleNavigation)
                    .WithMany(p => p.TParametroEvaluacionNota)
                    .HasForeignKey(d => d.IdEsquemaEvaluacionPgeneralDetalle)
                    .HasConstraintName("FK_T_ParametroEvaluacionNota_T_EsquemaEvaluacionPGeneralDetalle");
            });

            modelBuilder.Entity<TParametroSeoPw>(entity =>
            {
                entity.ToTable("T_ParametroSEO_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TParentescoPersonal>(entity =>
            {
                entity.ToTable("T_ParentescoPersonal", "gp");

                entity.Property(e => e.Comentario)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPartnerBeneficioPw>(entity =>
            {
                entity.ToTable("T_PartnerBeneficio_PW", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPartnerContactoPw>(entity =>
            {
                entity.ToTable("T_PartnerContacto_PW", "pla");

                entity.Property(e => e.Apellidos)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Email1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Email2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombres)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPartnerPw>(entity =>
            {
                entity.ToTable("T_Partner_PW", "pla");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionCorta)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EncabezadoCorreoPartner).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ImgPrincipal)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ImgPrincipalAlf)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ImgSecundaria)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ImgSecundariaAlf)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Preguntas).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPasarelaPagoPw>(entity =>
            {
                entity.ToTable("T_PasarelaPago_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPerfilContactoProgramaColumna>(entity =>
            {
                entity.ToTable("T_PerfilContactoProgramaColumna", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPerfilPuestoTrabajo>(entity =>
            {
                entity.ToTable("T_PerfilPuestoTrabajo", "gp");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalAprobacion).HasColumnName("IdPersonal_Aprobacion");

                entity.Property(e => e.IdPersonalSolicitud).HasColumnName("IdPersonal_Solicitud");

                entity.Property(e => e.Objetivo)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Observacion).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPerfilPuestoTrabajoEstadoSolicitudNavigation)
                    .WithMany(p => p.TPerfilPuestoTrabajo)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajoEstadoSolicitud)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PerfilPuestoTrabajo_T_PerfilPuestoTrabajoEstadoSolicitud");
            });

            modelBuilder.Entity<TPerfilPuestoTrabajoEstadoSolicitud>(entity =>
            {
                entity.ToTable("T_PerfilPuestoTrabajoEstadoSolicitud", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPerfilPuestoTrabajoPersonalAprobacion>(entity =>
            {
                entity.ToTable("T_PerfilPuestoTrabajoPersonalAprobacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TPerfilPuestoTrabajoPersonalAprobacion)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_PerfilPuestoTrabajoPersonalAprobacion_T_Personal");

                entity.HasOne(d => d.IdPuestoTrabajoNavigation)
                    .WithMany(p => p.TPerfilPuestoTrabajoPersonalAprobacion)
                    .HasForeignKey(d => d.IdPuestoTrabajo)
                    .HasConstraintName("FK_T_PerfilPuestoTrabajoPersonalAprobacion_T_PuestoTrabajo");
            });

            modelBuilder.Entity<TPeriodo>(entity =>
            {
                entity.ToTable("T_Periodo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("date");

                entity.Property(e => e.FechaFinFinanzas).HasColumnType("date");

                entity.Property(e => e.FechaFinRepIngresos).HasColumnType("date");

                entity.Property(e => e.FechaInicial).HasColumnType("date");

                entity.Property(e => e.FechaInicialFinanzas).HasColumnType("date");

                entity.Property(e => e.FechaInicialRepIngresos).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPeriodoMeta>(entity =>
            {
                entity.ToTable("T_PeriodoMeta", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPeriodoReporteIngreso>(entity =>
            {
                entity.ToTable("T_PeriodoReporteIngreso", "com");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("date");

                entity.Property(e => e.FechaInicio).HasColumnType("date");

                entity.Property(e => e.FechaModifacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersona>(entity =>
            {
                entity.ToTable("T_Persona", "conf");

                entity.HasIndex(e => e.Email1)
                    .HasName("UC_T_Persona_PorEmail1")
                    .IsUnique();

                entity.Property(e => e.Email1)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonal>(entity =>
            {
                entity.ToTable("T_Personal", "gp");

                entity.HasIndex(e => new { e.Activo, e.Estado })
                    .HasName("INC_T_Personal_PorActivo_PorEstado");

                entity.HasIndex(e => new { e.Apellidos, e.Nombres, e.IdJefe })
                    .HasName("INC_T_Personal_PorIdJefe");

                entity.HasIndex(e => new { e.Id, e.Rol, e.TipoPersonal, e.Activo })
                    .HasName("INC_T_Personal_PorActivo");

                entity.HasIndex(e => new { e.Activo, e.Apellidos, e.AreaAbrev, e.Email, e.Estado, e.Nombres, e.Id })
                    .HasName("INC_T_PersonalPorIdIncluyeNombresApellidos");

                entity.Property(e => e.Activo).HasDefaultValueSql("((0))");

                entity.Property(e => e.AliasEmailAsesor)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Anexo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Anexo3Cx)
                    .HasColumnName("Anexo3CX")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Apellidos).HasMaxLength(100);

                entity.Property(e => e.AplicaFirmaHtml).HasColumnName("AplicaFirmaHTML");

                entity.Property(e => e.AreaAbrev)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AutogeneradoEssalud)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CargoFirmaHtml)
                    .HasColumnName("CargoFirmaHTML")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Central)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CiudadDireccion).HasMaxLength(100);

                entity.Property(e => e.ContrasenaAsterisk)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DistritoDireccion).HasMaxLength(250);

                entity.Property(e => e.Dominio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EmailReferencia).HasMaxLength(250);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("datetime");

                entity.Property(e => e.FijoReferencia).HasMaxLength(50);

                entity.Property(e => e.FirmaHtml)
                    .HasColumnName("FirmaHTML")
                    .IsUnicode(false);

                entity.Property(e => e.Id3Cx)
                    .HasColumnName("Id3CX")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdEstadocivil).HasDefaultValueSql("('0')");

                entity.Property(e => e.IdPaisNacimiento).HasDefaultValueSql("('0')");

                entity.Property(e => e.IdRegion).HasDefaultValueSql("('0')");

                entity.Property(e => e.IdSexo).HasDefaultValueSql("('0')");

                entity.Property(e => e.IdTipoDocumento).HasDefaultValueSql("('0')");

                entity.Property(e => e.IdTipoSangre).HasDefaultValueSql("('0')");

                entity.Property(e => e.MovilReferencia).HasMaxLength(50);

                entity.Property(e => e.NombreCuspp)
                    .HasColumnName("NombreCUSPP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreDireccion).HasMaxLength(250);

                entity.Property(e => e.Nombres).HasMaxLength(100);

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Password3Cx)
                    .HasColumnName("Password3CX")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rol).HasMaxLength(100);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoPersonal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UrlFirmaCorreos)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlFoto)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalAccesoTemporalAulaVirtual>(entity =>
            {
                entity.ToTable("T_PersonalAccesoTemporalAulaVirtual", "gp");

                entity.Property(e => e.EvaluacionHabilitada)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecificoHijo).HasColumnName("IdPEspecifico_Hijo");

                entity.Property(e => e.IdPespecificoPadre).HasColumnName("IdPEspecifico_Padre");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalArchivo>(entity =>
            {
                entity.ToTable("T_PersonalArchivo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MimeType)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaArchivo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalAreaTrabajo>(entity =>
            {
                entity.ToTable("T_PersonalAreaTrabajo", "gp");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalCertificacion>(entity =>
            {
                entity.ToTable("T_PersonalCertificacion", "gp");

                entity.Property(e => e.FechaCertificacion).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Institucion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Programa)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TPersonalCertificacion)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_PersonalCertificacion_T_Personal");
            });

            modelBuilder.Entity<TPersonalCese>(entity =>
            {
                entity.ToTable("T_PersonalCese", "gp");

                entity.Property(e => e.FechaCese).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalChatSoporte>(entity =>
            {
                entity.ToTable("T_PersonalChatSoporte", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalComputo>(entity =>
            {
                entity.ToTable("T_PersonalComputo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Programa)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalDireccion>(entity =>
            {
                entity.ToTable("T_PersonalDireccion", "gp");

                entity.Property(e => e.Distrito).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Manzana).HasMaxLength(10);

                entity.Property(e => e.NombreVia).IsUnicode(false);

                entity.Property(e => e.NombreZonaUrbana).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoVia)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoZonaUrbana)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalExperiencia>(entity =>
            {
                entity.ToTable("T_PersonalExperiencia", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaIngreso).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRetiro).HasColumnType("datetime");

                entity.Property(e => e.MotivoRetiro).IsUnicode(false);

                entity.Property(e => e.NombreJefeInmediato)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TelefonoJefeInmediato)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalExperienciaRequerida>(entity =>
            {
                entity.ToTable("T_PersonalExperienciaRequerida", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMigracion).HasColumnType("money");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalFormacion>(entity =>
            {
                entity.ToTable("T_PersonalFormacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Logro).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalHistorialMedico>(entity =>
            {
                entity.ToTable("T_PersonalHistorialMedico", "gp");

                entity.Property(e => e.DetalleEnfermedad)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Enfermedad)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Periodo)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalHorario>(entity =>
            {
                entity.ToTable("T_PersonalHorario", "gp");

                entity.Property(e => e.Domingo1).HasColumnType("time(0)");

                entity.Property(e => e.Domingo2).HasColumnType("time(0)");

                entity.Property(e => e.Domingo3).HasColumnType("time(0)");

                entity.Property(e => e.Domingo4).HasColumnType("time(0)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Jueves1).HasColumnType("time(0)");

                entity.Property(e => e.Jueves2).HasColumnType("time(0)");

                entity.Property(e => e.Jueves3).HasColumnType("time(0)");

                entity.Property(e => e.Jueves4).HasColumnType("time(0)");

                entity.Property(e => e.Lunes1).HasColumnType("time(0)");

                entity.Property(e => e.Lunes2).HasColumnType("time(0)");

                entity.Property(e => e.Lunes3).HasColumnType("time(0)");

                entity.Property(e => e.Lunes4).HasColumnType("time(0)");

                entity.Property(e => e.Martes1).HasColumnType("time(0)");

                entity.Property(e => e.Martes2).HasColumnType("time(0)");

                entity.Property(e => e.Martes3).HasColumnType("time(0)");

                entity.Property(e => e.Martes4).HasColumnType("time(0)");

                entity.Property(e => e.Miercoles1).HasColumnType("time(0)");

                entity.Property(e => e.Miercoles2).HasColumnType("time(0)");

                entity.Property(e => e.Miercoles3).HasColumnType("time(0)");

                entity.Property(e => e.Miercoles4)
                    .HasColumnName("MIercoles4")
                    .HasColumnType("time(0)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Sabado1).HasColumnType("time(0)");

                entity.Property(e => e.Sabado2).HasColumnType("time(0)");

                entity.Property(e => e.Sabado3).HasColumnType("time(0)");

                entity.Property(e => e.Sabado4).HasColumnType("time(0)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Viernes1).HasColumnType("time(0)");

                entity.Property(e => e.Viernes2).HasColumnType("time(0)");

                entity.Property(e => e.Viernes3).HasColumnType("time(0)");

                entity.Property(e => e.Viernes4).HasColumnType("time(0)");
            });

            modelBuilder.Entity<TPersonalIdioma>(entity =>
            {
                entity.ToTable("T_PersonalIdioma", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalInformacionMedica>(entity =>
            {
                entity.ToTable("T_PersonalInformacionMedica", "gp");

                entity.Property(e => e.Alergia)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Precaucion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalLog>(entity =>
            {
                entity.ToTable("T_PersonalLog", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Rol).HasMaxLength(100);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoPersonal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TPersonalLog)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_PersonalLog_T_Personal");
            });

            modelBuilder.Entity<TPersonalMotivoTiempoInactividad>(entity =>
            {
                entity.ToTable("T_PersonalMotivoTiempoInactividad", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("date");

                entity.Property(e => e.FechaInicio).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMotivoInactividadNavigation)
                    .WithMany(p => p.TPersonalMotivoTiempoInactividad)
                    .HasForeignKey(d => d.IdMotivoInactividad)
                    .HasConstraintName("FK_T_PersonalMotivoTiempoInactividad_T_MotivoInactividad");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TPersonalMotivoTiempoInactividad)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_PersonalMotivoTiempoInactividad_T_Personal");
            });

            modelBuilder.Entity<TPersonalPuestoSedeHistorico>(entity =>
            {
                entity.ToTable("T_PersonalPuestoSedeHistorico", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TPersonalPuestoSedeHistorico)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_PersonalPuestoSedeHistorico_T_Personal");

                entity.HasOne(d => d.IdPuestoTrabajoNavigation)
                    .WithMany(p => p.TPersonalPuestoSedeHistorico)
                    .HasForeignKey(d => d.IdPuestoTrabajo)
                    .HasConstraintName("FK_T_PersonalPuestoSedeHistorico_T_PuestoTrabajo");

                entity.HasOne(d => d.IdSedeTrabajoNavigation)
                    .WithMany(p => p.TPersonalPuestoSedeHistorico)
                    .HasForeignKey(d => d.IdSedeTrabajo)
                    .HasConstraintName("FK_T_PersonalPuestoSedeHistorico_T_SedeTrabajo");
            });

            modelBuilder.Entity<TPersonalRecurso>(entity =>
            {
                entity.ToTable("T_PersonalRecurso", "pla");

                entity.Property(e => e.ApellidosPersonal)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionPersonal)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombrePersonal)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlfotoPersonal)
                    .IsRequired()
                    .HasColumnName("URLFotoPersonal")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMonedaNavigation)
                    .WithMany(p => p.TPersonalRecurso)
                    .HasForeignKey(d => d.IdMoneda)
                    .HasConstraintName("FK_T_PersonalRecurso_T_Moneda");

                entity.HasOne(d => d.IdTipoDisponibilidadPersonalNavigation)
                    .WithMany(p => p.TPersonalRecurso)
                    .HasForeignKey(d => d.IdTipoDisponibilidadPersonal)
                    .HasConstraintName("FK_T_PersonalRecurso_T_TipoDisponibilidadPersonal");
            });

            modelBuilder.Entity<TPersonalRecursoHabilidad>(entity =>
            {
                entity.ToTable("T_PersonalRecursoHabilidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdHabilidadSimuladorNavigation)
                    .WithMany(p => p.TPersonalRecursoHabilidad)
                    .HasForeignKey(d => d.IdHabilidadSimulador)
                    .HasConstraintName("FK_T_PersonalRecursoHabilidad_T_HabilidadSimulador");

                entity.HasOne(d => d.IdPersonalRecursoNavigation)
                    .WithMany(p => p.TPersonalRecursoHabilidad)
                    .HasForeignKey(d => d.IdPersonalRecurso)
                    .HasConstraintName("FK_T_PersonalRecursoHabilidad_T_PersonalRecurso");
            });

            modelBuilder.Entity<TPersonalRelacionExterna>(entity =>
            {
                entity.ToTable("T_PersonalRelacionExterna", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalRemuneracion>(entity =>
            {
                entity.ToTable("T_PersonalRemuneracion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NumeroCuenta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalSeguroSalud>(entity =>
            {
                entity.ToTable("T_PersonalSeguroSalud", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalSistemaPensionario>(entity =>
            {
                entity.ToTable("T_PersonalSistemaPensionario", "gp");

                entity.Property(e => e.CodigoAfiliado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPersonalTipoFuncion>(entity =>
            {
                entity.ToTable("T_PersonalTipoFuncion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecifico>(entity =>
            {
                entity.ToTable("T_PEspecifico", "pla");

                entity.HasIndex(e => new { e.Id, e.IdCentroCosto })
                    .HasName("INC_T_PEspecifico_PorIdCentroCosto");

                entity.HasIndex(e => new { e.EstadoPid, e.IdProgramaGeneral, e.Estado })
                    .HasName("INC_T_PEspecifico_PorEstado");

                entity.HasIndex(e => new { e.Id, e.IdProgramaGeneral, e.IdCentroCosto })
                    .HasName("INC_T_PEspecifico_PorIdPGeneralPorIdCentroCosto");

                entity.HasIndex(e => new { e.Id, e.TipoId, e.IdCentroCosto })
                    .HasName("INC_T_PEspecifico_PorIdPorTipoId_PorIdCentroCosto");

                entity.HasIndex(e => new { e.IdCentroCosto, e.IdProgramaGeneral, e.Estado })
                    .HasName("INC_T_PEspecifico_PorIdCentroCostoPorIdProgramaGeneral");

                entity.HasIndex(e => new { e.CodigoBanco, e.IdProgramaGeneral, e.IdCentroCosto, e.Estado })
                    .HasName("INC_T_PEspecifico_PorIdCentroCostoPorEstado");

                entity.HasIndex(e => new { e.IdCursoMoodle, e.Id, e.IdCentroCosto, e.IdProgramaGeneral, e.IdCiudad })
                    .HasName("NonClusteredIndex-20190727-133655_centrocosto");

                entity.HasIndex(e => new { e.Estado, e.IdCentroCosto, e.IdCursoMoodle, e.Nombre, e.TipoId, e.IdProgramaGeneral })
                    .HasName("INC_T_PEspecifico_PorIdProgramaGeneral");

                entity.HasIndex(e => new { e.Categoria, e.Ciudad, e.CursoIndividual, e.Duracion, e.EstadoP, e.EstadoPid, e.IdAmbiente, e.IdCiudad, e.IdExpositorReferencia, e.IdMigracion, e.IdSesionInicio, e.Nombre, e.Tipo, e.TipoAmbiente, e.TipoId, e.UrlDocumentoCronograma, e.UrlDocumentoCronogramaGrupos, e.Estado, e.IdCentroCosto, e.Id, e.IdProgramaGeneral })
                    .HasName("INC_T_PEspecifico_PorEstado_PorIdCentroCosto_PorId_PorIdProgramaGeneral");

                entity.Property(e => e.ActualizacionAutomatica)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Categoria)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Codigo).HasMaxLength(100);

                entity.Property(e => e.CodigoBanco).HasMaxLength(20);

                entity.Property(e => e.CoordinadoraAcademica)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CoordinadoraCobranza)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Duracion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoP)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.EstadoPid).HasColumnName("EstadoPId");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaInicioV)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaTermino).HasColumnType("datetime");

                entity.Property(e => e.FechaTerminoP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaTerminoV)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Frecuencia).HasMaxLength(100);

                entity.Property(e => e.IdCursoRa).HasColumnName("IdCursoRA");

                entity.Property(e => e.IdEstadoPespecifico).HasColumnName("IdEstadoPEspecifico");

                entity.Property(e => e.IdExpositorReferencia).HasColumnName("IdExpositor_Referencia");

                entity.Property(e => e.IdSesionInicio).HasColumnName("IdSesion_Inicio");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.ObservacionCursoFinalizado).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TipoAmbiente).HasMaxLength(50);

                entity.Property(e => e.UrlDocumentoCronograma)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlDocumentoCronogramaGrupos)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCentroCostoNavigation)
                    .WithMany(p => p.TPespecifico)
                    .HasForeignKey(d => d.IdCentroCosto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PEspecifico_T_CentroCosto");
            });

            modelBuilder.Entity<TPespecificoAprobacionCalificacion>(entity =>
            {
                entity.ToTable("T_PEspecificoAprobacionCalificacion", "ope");

                entity.Property(e => e.FechaAprobacionAsistencia).HasColumnType("datetime");

                entity.Property(e => e.FechaAprobacionNota).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoAsesor>(entity =>
            {
                entity.ToTable("T_PEspecificoAsesor", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoConsumo>(entity =>
            {
                entity.ToTable("T_PEspecificoConsumo", "pla");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Factor)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecificoSesion).HasColumnName("IdPEspecificoSesion");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoExpositorGrupo>(entity =>
            {
                entity.ToTable("T_PEspecificoExpositorGrupo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoFrecuencia>(entity =>
            {
                entity.ToTable("T_PEspecificoFrecuencia", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoFrecuenciaDetalle>(entity =>
            {
                entity.ToTable("T_PEspecificoFrecuenciaDetalle", "pla");

                entity.Property(e => e.Duracion).HasColumnType("decimal(4, 1)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.HoraDia).HasColumnType("time(0)");

                entity.Property(e => e.IdPespecificoFrecuencia).HasColumnName("IdPEspecificoFrecuencia");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoMatriculaAlumno>(entity =>
            {
                entity.ToTable("T_PEspecificoMatriculaAlumno", "ope");

                entity.Property(e => e.AplicaNuevaAulaVirtual).HasDefaultValueSql("((0))");

                entity.Property(e => e.ErrorCongelamiento)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Grupo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPespecificoTipoMatricula).HasColumnName("IdPEspecificoTipoMatricula");

                entity.Property(e => e.NotaAulaVirtualAnterior).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoMeta>(entity =>
            {
                entity.ToTable("T_PEspecificoMeta", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoNuevoAulaVirtual>(entity =>
            {
                entity.ToTable("T_PEspecificoNuevoAulaVirtual", "pla");

                entity.Property(e => e.Codigo).HasMaxLength(100);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoPadrePespecificoHijo>(entity =>
            {
                entity.ToTable("T_PEspecificoPadrePEspecificoHijo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PespecificoHijoId).HasColumnName("PEspecificoHijoId");

                entity.Property(e => e.PespecificoPadreId).HasColumnName("PEspecificoPadreId");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoParticipacionDocente>(entity =>
            {
                entity.ToTable("T_PEspecificoParticipacionDocente", "ope");

                entity.Property(e => e.FechaConfirmacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoParticipacionExpositor>(entity =>
            {
                entity.ToTable("T_PEspecificoParticipacionExpositor", "pla");

                entity.Property(e => e.ExpositorCurso)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ExpositorGrupo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ExpositorV3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdExpositorCurso).HasColumnName("IdExpositor_Curso");

                entity.Property(e => e.IdExpositorGrupo).HasColumnName("IdExpositor_Grupo");

                entity.Property(e => e.IdExpositorGrupoConfirmado).HasColumnName("IdExpositor_GrupoConfirmado");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdProveedorFurHonorario).HasColumnName("IdProveedor_FurHonorario");

                entity.Property(e => e.IdProveedorOperacionesGrupoConfirmado).HasColumnName("IdProveedor_OperacionesGrupoConfirmado");

                entity.Property(e => e.IdProveedorPlanificacionGrupo).HasColumnName("IdProveedor_PlanificacionGrupo");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoSesion>(entity =>
            {
                entity.ToTable("T_PEspecificoSesion", "pla");

                entity.HasIndex(e => new { e.EsSesionInicio, e.Estado, e.Grupo, e.IdPespecifico, e.Id, e.FechaHoraInicio })
                    .HasName("INC_T_PEspecificoSesion_PorIdPEspecifico_PorId_PorFechaHoraInicio");

                entity.Property(e => e.Comentario).IsUnicode(false);

                entity.Property(e => e.ComentarioCancelacionWebinar).IsUnicode(false);

                entity.Property(e => e.Duracion).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.FechaCancelacionWebinar).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaHoraInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaHoraRegularizacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdSesionRa).HasColumnName("IdSesionRA");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlWebex).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoSilabo>(entity =>
            {
                entity.ToTable("T_PEspecificoSilabo", "ope");

                entity.Property(e => e.Bibliografia).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Material).IsUnicode(false);

                entity.Property(e => e.ObjetivoAprendizaje).IsUnicode(false);

                entity.Property(e => e.PautaComplementaria).IsUnicode(false);

                entity.Property(e => e.PublicoObjetivo).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPespecificoTipoMatricula>(entity =>
            {
                entity.ToTable("T_PEspecificoTipoMatricula", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneral>(entity =>
            {
                entity.ToTable("T_PGeneral", "pla");

                entity.HasIndex(e => new { e.IdArea, e.IdPgeneral })
                    .HasName("INC_T_PGeneral_PorIdPgeneral");

                entity.HasIndex(e => new { e.IdPgeneral, e.Id, e.Estado })
                    .HasName("_dta_index_T_PGeneral_19_725577623__K2_K1_K28_3_9_10_14");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPartner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.LogoPrograma)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCorto)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PgTitulo)
                    .HasColumnName("Pg_titulo")
                    .IsUnicode(false);

                entity.Property(e => e.PwDescripcionGeneral)
                    .HasColumnName("Pw_DescripcionGeneral")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PwDuracion)
                    .HasColumnName("pw_duracion")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PwEstado)
                    .HasColumnName("Pw_estado")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PwImgPortada)
                    .HasColumnName("Pw_ImgPortada")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.PwImgPortadaAlf)
                    .HasColumnName("Pw_ImgPortadaAlf")
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.PwImgSecundaria)
                    .HasColumnName("Pw_ImgSecundaria")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.PwImgSecundariaAlf)
                    .HasColumnName("Pw_ImgSecundariaAlf")
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.PwMostrarBsplay)
                    .HasColumnName("Pw_mostrarBSPlay")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PwTituloHtml)
                    .HasColumnName("Pw_tituloHtml")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlBrochurePrograma)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlImagenPortadaFr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlLogoPrograma).HasMaxLength(500);

                entity.Property(e => e.UrlPartner)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlVersion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTipoProgramaNavigation)
                    .WithMany(p => p.TPgeneral)
                    .HasForeignKey(d => d.IdTipoPrograma)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PGeneral_T_TipoPrograma");
            });

            modelBuilder.Entity<TPgeneralAsubPgeneral>(entity =>
            {
                entity.ToTable("T_PGeneralASubPGeneral", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneralHijo).HasColumnName("IdPGeneral_Hijo");

                entity.Property(e => e.IdPgeneralPadre).HasColumnName("IdPGeneral_Padre");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralAsubPgeneralVersionPrograma>(entity =>
            {
                entity.ToTable("T_PgeneralASubPgeneralVersionPrograma", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneralAsubPgeneral).HasColumnName("IdPgeneralASubPgeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralAsubPgeneralNavigation)
                    .WithMany(p => p.TPgeneralAsubPgeneralVersionPrograma)
                    .HasForeignKey(d => d.IdPgeneralAsubPgeneral)
                    .HasConstraintName("FK_T_PgeneralASubPgeneralVersionPrograma_T_PGeneralASubPGeneral");

                entity.HasOne(d => d.IdVersionProgramaNavigation)
                    .WithMany(p => p.TPgeneralAsubPgeneralVersionPrograma)
                    .HasForeignKey(d => d.IdVersionPrograma)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PgeneralASubPgeneralVersionPrograma_T_VersionPrograma");
            });

            modelBuilder.Entity<TPgeneralCodigoPartner>(entity =>
            {
                entity.ToTable("T_PgeneralCodigoPartner", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPgeneralCodigoPartner)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_PgeneralCodigoPartner_T_PGeneral");
            });

            modelBuilder.Entity<TPgeneralCodigoPartnerModalidadCurso>(entity =>
            {
                entity.ToTable("T_PgeneralCodigoPartnerModalidadCurso", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdModalidadCursoNavigation)
                    .WithMany(p => p.TPgeneralCodigoPartnerModalidadCurso)
                    .HasForeignKey(d => d.IdModalidadCurso)
                    .HasConstraintName("FK_T_PgeneralCodigoPartnerModalidadCurso_T_ModalidadCurso");

                entity.HasOne(d => d.IdPgeneralCodigoPartnerNavigation)
                    .WithMany(p => p.TPgeneralCodigoPartnerModalidadCurso)
                    .HasForeignKey(d => d.IdPgeneralCodigoPartner)
                    .HasConstraintName("FK_T_PgeneralCodigoPartnerModalidadCurso_T_PgeneralCodigoPartner");
            });

            modelBuilder.Entity<TPgeneralCodigoPartnerVersionPrograma>(entity =>
            {
                entity.ToTable("T_PgeneralCodigoPartnerVersionPrograma", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralCodigoPartnerNavigation)
                    .WithMany(p => p.TPgeneralCodigoPartnerVersionPrograma)
                    .HasForeignKey(d => d.IdPgeneralCodigoPartner)
                    .HasConstraintName("FK_T_PgeneralCodigoPartnerVersionPrograma_T_PgeneralCodigoPartner");

                entity.HasOne(d => d.IdVersionProgramaNavigation)
                    .WithMany(p => p.TPgeneralCodigoPartnerVersionPrograma)
                    .HasForeignKey(d => d.IdVersionPrograma)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PgeneralCodigoPartnerVersionPrograma_T_VersionPrograma");
            });

            modelBuilder.Entity<TPgeneralConfiguracionPlantilla>(entity =>
            {
                entity.ToTable("T_PGeneralConfiguracionPlantilla", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UltimaFechaRemplazarCertificado).HasColumnType("datetime");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPgeneralConfiguracionPlantilla)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_PGeneralConfiguracionPlantilla_T_PGeneral");
            });

            modelBuilder.Entity<TPgeneralConfiguracionPlantillaDetalle>(entity =>
            {
                entity.ToTable("T_PGeneralConfiguracionPlantillaDetalle", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NotaAprobatoria).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdModalidadCursoNavigation)
                    .WithMany(p => p.TPgeneralConfiguracionPlantillaDetalle)
                    .HasForeignKey(d => d.IdModalidadCurso)
                    .HasConstraintName("FK_T_PGeneralConfiguracionPlantillaDetalle_T_ModalidadCurso");

                entity.HasOne(d => d.IdOperadorComparacionNavigation)
                    .WithMany(p => p.TPgeneralConfiguracionPlantillaDetalle)
                    .HasForeignKey(d => d.IdOperadorComparacion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PGeneralConfiguracionPlantillaDetalle_T_OperadorComparacion");

                entity.HasOne(d => d.IdPgeneralConfiguracionPlantillaNavigation)
                    .WithMany(p => p.TPgeneralConfiguracionPlantillaDetalle)
                    .HasForeignKey(d => d.IdPgeneralConfiguracionPlantilla)
                    .HasConstraintName("FK_T_PGeneralConfiguracionPlantillaDetalle_T_PGeneralConfiguracionPlantilla");
            });

            modelBuilder.Entity<TPgeneralConfiguracionPlantillaEstadoMatricula>(entity =>
            {
                entity.ToTable("T_PgeneralConfiguracionPlantillaEstadoMatricula", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralConfiguracionPlantillaSubEstadoMatricula>(entity =>
            {
                entity.ToTable("T_PgeneralConfiguracionPlantillaSubEstadoMatricula", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralCriterioEvaluacion>(entity =>
            {
                entity.ToTable("T_PGeneralCriterioEvaluacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralCriterioEvaluacionHijo>(entity =>
            {
                entity.ToTable("T_PGeneralCriterioEvaluacionHijo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdPgeneralHijo).HasColumnName("IdPGeneral_Hijo");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralDescripcion>(entity =>
            {
                entity.ToTable("T_PGeneralDescripcion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Texto)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPgeneralDescripcion)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PGeneralDescripcion_T_PGeneral");
            });

            modelBuilder.Entity<TPgeneralDocumentoPw>(entity =>
            {
                entity.ToTable("T_PGeneralDocumento_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralExpositor>(entity =>
            {
                entity.ToTable("T_PGeneralExpositor", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPgeneralExpositor)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PGeneralExpositor_T_PGeneral");
            });

            modelBuilder.Entity<TPgeneralForoAsignacionProveedor>(entity =>
            {
                entity.ToTable("T_PGeneralForoAsignacionProveedor", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralModalidad>(entity =>
            {
                entity.ToTable("T_PGeneralModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdModalidadCursoNavigation)
                    .WithMany(p => p.TPgeneralModalidad)
                    .HasForeignKey(d => d.IdModalidadCurso)
                    .HasConstraintName("FK_T_PGeneralModalidad_T_ModalidadCurso");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPgeneralModalidad)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_PGeneralModalidad_T_PGeneral");
            });

            modelBuilder.Entity<TPgeneralParametroSeoPw>(entity =>
            {
                entity.ToTable("T_PGeneralParametroSEO_PW", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdParametroSeo).HasColumnName("IdParametroSEO");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPgeneralParametroSeoPw)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PGeneralParametroSEO_PW_T_PGeneral");
            });

            modelBuilder.Entity<TPgeneralProyectoAplicacion>(entity =>
            {
                entity.ToTable("T_PgeneralProyectoAplicacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralProyectoAplicacionAnexo>(entity =>
            {
                entity.ToTable("T_PgeneralProyectoAplicacionAnexo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaArchivo)
                    .IsRequired()
                    .HasMaxLength(1500);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralProyectoAplicacionEnvio>(entity =>
            {
                entity.ToTable("T_PgeneralProyectoAplicacionEnvio", "pla");

                entity.Property(e => e.Comentarios).IsUnicode(false);

                entity.Property(e => e.FechaCalificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivoRetroalimentacion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Nota).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaArchivo)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.RutaArchivoRetroalimentacion)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralProyectoAplicacionEstado>(entity =>
            {
                entity.ToTable("T_PgeneralProyectoAplicacionEstado", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralProyectoAplicacionModalidad>(entity =>
            {
                entity.ToTable("T_PgeneralProyectoAplicacionModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralProyectoAplicacionProveedor>(entity =>
            {
                entity.ToTable("T_PgeneralProyectoAplicacionProveedor", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralRelacionado>(entity =>
            {
                entity.ToTable("T_PGeneralRelacionado", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdPgeneralRelacionado).HasColumnName("IdPGeneral_Relacionado");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralTagsPw>(entity =>
            {
                entity.ToTable("T_PGeneralTags_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdTagPw).HasColumnName("IdTagPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPgeneralTagsPw)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PGeneralTags_PW_T_PGeneral");

                entity.HasOne(d => d.IdTagPwNavigation)
                    .WithMany(p => p.TPgeneralTagsPw)
                    .HasForeignKey(d => d.IdTagPw)
                    .HasConstraintName("FK_T_PGeneralTags_PW_T_Tag_PW");
            });

            modelBuilder.Entity<TPgeneralTipoDescuento>(entity =>
            {
                entity.ToTable("T_PGeneralTipoDescuento", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPgeneralVersionPrograma>(entity =>
            {
                entity.ToTable("T_PgeneralVersionPrograma", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPgeneralVersionPrograma)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_PGeneralVersionPrograma_T_PGeneral");
            });

            modelBuilder.Entity<TPlanContable>(entity =>
            {
                entity.ToTable("T_PlanContable", "fin");

                entity.Property(e => e.Analisis)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cbal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Debe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Haber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPlanContableTipoCuenta>(entity =>
            {
                entity.ToTable("T_PlanContableTipoCuenta", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPlantilla>(entity =>
            {
                entity.ToTable("T_Plantilla", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPlantillaAsociacionModuloSistema>(entity =>
            {
                entity.ToTable("T_PlantillaAsociacionModuloSistema", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdModuloSistemaNavigation)
                    .WithMany(p => p.TPlantillaAsociacionModuloSistema)
                    .HasForeignKey(d => d.IdModuloSistema)
                    .HasConstraintName("FK_T_PlantillaAsociacionModuloSistema_T_ModuloSistema");

                entity.HasOne(d => d.IdPlantillaNavigation)
                    .WithMany(p => p.TPlantillaAsociacionModuloSistema)
                    .HasForeignKey(d => d.IdPlantilla)
                    .HasConstraintName("FK_T_PlantillaAsociacionModuloSistema_T_Plantilla");
            });

            modelBuilder.Entity<TPlantillaBase>(entity =>
            {
                entity.ToTable("T_PlantillaBase", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPlantillaClaveValor>(entity =>
            {
                entity.ToTable("T_PlantillaClaveValor", "mkt");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Etiquetas).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);

                entity.HasOne(d => d.IdPlantillaNavigation)
                    .WithMany(p => p.TPlantillaClaveValor)
                    .HasForeignKey(d => d.IdPlantilla)
                    .HasConstraintName("FK_T_PlantillaClaveValor_T_Plantilla");
            });

            modelBuilder.Entity<TPlantillaLandingPage>(entity =>
            {
                entity.ToTable("T_PlantillaLandingPage", "mkt");

                entity.Property(e => e.Cita1Color)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cita1Despues)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Cita1Texto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Cita2Color)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cita2Texto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Cita3Color)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cita3Texto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Cita4Color)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cita4Texto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.ColorDescripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoBoton)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ColorFondoHeader)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ColorPlaceHolder)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ColorPopup)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTextoBoton)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTitulo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FormularioBotonFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioBotonPosicion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioBotonTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioTextoFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioTextoTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioTituloFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormularioTituloTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoTextoFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TextoTextoTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TextoTituloFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TextoTituloTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TituloTextoFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TituloTextoTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TituloTituloFormato)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TituloTituloTamanhio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UrlImagenPrincipal)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPlantillaLandingPagePgeneralAdicional>(entity =>
            {
                entity.ToTable("T_PlantillaLandingPagePGeneralAdicional", "mkt");

                entity.Property(e => e.ColorDescripcion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ColorTitulo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreTitulo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPlantillaLandingPageNavigation)
                    .WithMany(p => p.TPlantillaLandingPagePgeneralAdicional)
                    .HasForeignKey(d => d.IdPlantillaLandingPage)
                    .HasConstraintName("FK_T_PlantillaLandingPagePGeneralAdicional_T_PlantillaLandingPage");
            });

            modelBuilder.Entity<TPlantillaMaestroPw>(entity =>
            {
                entity.ToTable("T_PlantillaMaestro_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPlantillaPais>(entity =>
            {
                entity.ToTable("T_PlantillaPais", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPaisNavigation)
                    .WithMany(p => p.TPlantillaPais)
                    .HasForeignKey(d => d.IdPais)
                    .HasConstraintName("FK_T_PlantillaPais_T_Pais");

                entity.HasOne(d => d.IdPlantillaNavigation)
                    .WithMany(p => p.TPlantillaPais)
                    .HasForeignKey(d => d.IdPlantilla)
                    .HasConstraintName("FK_T_PlantillaPais_T_PlantillaPais");
            });

            modelBuilder.Entity<TPlantillaPlantillaMaestroPw>(entity =>
            {
                entity.ToTable("T_PlantillaPlantillaMaestro_PW", "pla");

                entity.Property(e => e.Contenido).IsRequired();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPlantillaPw).HasColumnName("IdPlantillaPW");

                entity.Property(e => e.IdSeccionMaestraPw).HasColumnName("IdSeccionMaestraPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPlantillaPwNavigation)
                    .WithMany(p => p.TPlantillaPlantillaMaestroPw)
                    .HasForeignKey(d => d.IdPlantillaPw)
                    .HasConstraintName("FK_T_PlantillaPlantillaMaestro_PW_T_Plantilla_PW");

                entity.HasOne(d => d.IdSeccionMaestraPwNavigation)
                    .WithMany(p => p.TPlantillaPlantillaMaestroPw)
                    .HasForeignKey(d => d.IdSeccionMaestraPw)
                    .HasConstraintName("FK_T_PlantillaPlantillaMaestro_PW_T_SeccionMaestra_PW");
            });

            modelBuilder.Entity<TPlantillaPw>(entity =>
            {
                entity.ToTable("T_Plantilla_PW", "pla");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPlantillaMaestroPwNavigation)
                    .WithMany(p => p.TPlantillaPw)
                    .HasForeignKey(d => d.IdPlantillaMaestroPw)
                    .HasConstraintName("FK_T_Plantilla_PW_T_PlantillaMaestro_PW");

                entity.HasOne(d => d.IdRevisionPwNavigation)
                    .WithMany(p => p.TPlantillaPw)
                    .HasForeignKey(d => d.IdRevisionPw)
                    .HasConstraintName("FK_T_Plantilla_PW_T_Revision_PW");
            });

            modelBuilder.Entity<TPlantillaRevisionPw>(entity =>
            {
                entity.ToTable("T_PlantillaRevision_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPlantillaPw).HasColumnName("IdPlantillaPW");

                entity.Property(e => e.IdRevisionNivelPw).HasColumnName("IdRevisionNivelPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TPlantillaRevisionPw)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_PlantillaRevision_PW_T_Personal");

                entity.HasOne(d => d.IdPlantillaPwNavigation)
                    .WithMany(p => p.TPlantillaRevisionPw)
                    .HasForeignKey(d => d.IdPlantillaPw)
                    .HasConstraintName("FK_T_PlantillaRevision_PW_T_Plantilla_PW");

                entity.HasOne(d => d.IdRevisionNivelPwNavigation)
                    .WithMany(p => p.TPlantillaRevisionPw)
                    .HasForeignKey(d => d.IdRevisionNivelPw)
                    .HasConstraintName("FK_T_PlantillaRevision_PW_T_RevisionNivel_PW");
            });

            modelBuilder.Entity<TPlataformaPago>(entity =>
            {
                entity.ToTable("T_PlataformaPago", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPortalEmpleo>(entity =>
            {
                entity.ToTable("T_PortalEmpleo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPortalEmpleoPais>(entity =>
            {
                entity.ToTable("T_PortalEmpleoPais", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostComentarioDetalle>(entity =>
            {
                entity.ToTable("T_PostComentarioDetalle", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCommentFacebook)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdParent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdPostFacebook)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdUsuarioFacebook)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostComentarioUsuario>(entity =>
            {
                entity.ToTable("T_PostComentarioUsuario", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAreaCapacitacion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.IdUsuarioFacebook)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombres)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostComentarioUsuarioLog>(entity =>
            {
                entity.ToTable("T_PostComentarioUsuarioLog", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulante>(entity =>
            {
                entity.ToTable("T_Postulante", "gp");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Celular)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Celular2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Celular3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Email2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Email3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NroDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UrlPerfilFacebook).IsUnicode(false);

                entity.Property(e => e.UrlPerfilLinkedin).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteAccesoTemporalAulaVirtual>(entity =>
            {
                entity.ToTable("T_PostulanteAccesoTemporalAulaVirtual", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecificoHijo).HasColumnName("IdPEspecifico_Hijo");

                entity.Property(e => e.IdPespecificoPadre).HasColumnName("IdPEspecifico_Padre");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteComparacion>(entity =>
            {
                entity.ToTable("T_PostulanteComparacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdGrupoComparacionProcesoSeleccionNavigation)
                    .WithMany(p => p.TPostulanteComparacion)
                    .HasForeignKey(d => d.IdGrupoComparacionProcesoSeleccion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PostulanteComparacion_T_GrupoComparacionProcesoSeleccion");

                entity.HasOne(d => d.IdPostulanteNavigation)
                    .WithMany(p => p.TPostulanteComparacion)
                    .HasForeignKey(d => d.IdPostulante)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PostulanteComparacion_T_Postulante");
            });

            modelBuilder.Entity<TPostulanteConexionInternet>(entity =>
            {
                entity.ToTable("T_PostulanteConexionInternet", "gp");

                entity.Property(e => e.ConexionCompartida)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CostoInternet).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MedioConexion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProveedorInternet)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoConexion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VelocidadInternet)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteCriterioDesaprobatorio>(entity =>
            {
                entity.ToTable("T_PostulanteCriterioDesaprobatorio", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteCursoPortalNotasHistorico>(entity =>
            {
                entity.ToTable("T_PostulanteCursoPortalNotasHistorico", "gp");

                entity.Property(e => e.Calificacion).HasColumnType("decimal(16, 4)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.GrupoPregunta)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdUsuario).HasMaxLength(250);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteEquipoComputo>(entity =>
            {
                entity.ToTable("T_PostulanteEquipoComputo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MemoriaRam)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Procesador)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SistemaOperativo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEquipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteExperiencia>(entity =>
            {
                entity.ToTable("T_PostulanteExperiencia", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Funcion).IsUnicode(false);

                entity.Property(e => e.NombreJefe)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroJefe)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OtraEmpresa).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Salario).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.SalarioComision).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteExperienciaLog>(entity =>
            {
                entity.ToTable("T_PostulanteExperienciaLog", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Funcion).IsUnicode(false);

                entity.Property(e => e.NombreJefe)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroJefe)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OtraEmpresa).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Salario).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.SalarioComision).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoActualizacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteFactorDesaprobatorio>(entity =>
            {
                entity.ToTable("T_PostulanteFactorDesaprobatorio", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteFormacion>(entity =>
            {
                entity.ToTable("T_PostulanteFormacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.OtraCarrera).IsUnicode(false);

                entity.Property(e => e.OtraInstitucion).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TurnoEstudio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteFormacionLog>(entity =>
            {
                entity.ToTable("T_PostulanteFormacionLog", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.OtraCarrera).IsUnicode(false);

                entity.Property(e => e.OtraInstitucion).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoActualizacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TurnoEstudio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteIdioma>(entity =>
            {
                entity.ToTable("T_PostulanteIdioma", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteInformacionImportacion>(entity =>
            {
                entity.ToTable("T_PostulanteInformacionImportacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProcesoSeleccionNavigation)
                    .WithMany(p => p.TPostulanteInformacionImportacion)
                    .HasForeignKey(d => d.IdProcesoSeleccion)
                    .HasConstraintName("FK_T_PostulanteInformacionImportacion_T_ProcesoSeleccion");
            });

            modelBuilder.Entity<TPostulanteInformacionImportacionLog>(entity =>
            {
                entity.ToTable("T_PostulanteInformacionImportacionLog", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProcesoSeleccionNavigation)
                    .WithMany(p => p.TPostulanteInformacionImportacionLog)
                    .HasForeignKey(d => d.IdProcesoSeleccion)
                    .HasConstraintName("FK_T_PostulanteInformacionImportacionLog_T_ProcesoSeleccion");
            });

            modelBuilder.Entity<TPostulanteLog>(entity =>
            {
                entity.ToTable("T_PostulanteLog", "gp");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteNivelPotencial>(entity =>
            {
                entity.ToTable("T_PostulanteNivelPotencial", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPostulanteProcesoSeleccion>(entity =>
            {
                entity.ToTable("T_PostulanteProcesoSeleccion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistro).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalOperadorProceso).HasColumnName("IdPersonal_OperadorProceso");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPreCalculadaCambioFase>(entity =>
            {
                entity.ToTable("T_PreCalculadaCambioFase", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdFaseOportunidadDestino).HasColumnName("IdFaseOportunidad_Destino");

                entity.Property(e => e.IdFaseOportunidadOrigen).HasColumnName("IdFaseOportunidad_Origen");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPregunta>(entity =>
            {
                entity.ToTable("T_Pregunta", "gp");

                entity.Property(e => e.ActivarFeedBackRespuestaCorrecta).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActivarFeedBackRespuestaIncorrecta).HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MinutosPorPregunta).HasDefaultValueSql("((0))");

                entity.Property(e => e.MostrarFeedbackInmediato).HasDefaultValueSql("((0))");

                entity.Property(e => e.MostrarFeedbackPorPregunta).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequiereTiempo).HasDefaultValueSql("((0))");

                entity.Property(e => e.RespuestaAleatoria).HasDefaultValueSql("((0))");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPreguntaCategoria>(entity =>
            {
                entity.ToTable("T_PreguntaCategoria", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPreguntaEscalaValor>(entity =>
            {
                entity.ToTable("T_PreguntaEscalaValor", "gp");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Descripcion).HasMaxLength(100);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPreguntaEvaluacion>(entity =>
            {
                entity.ToTable("T_PreguntaEvaluacion", "gp");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Enunciado)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Puntaje).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlImagen).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPreguntaEvaluacionTrabajo>(entity =>
            {
                entity.ToTable("T_PreguntaEvaluacionTrabajo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConfigurarEvaluacionTrabajoNavigation)
                    .WithMany(p => p.TPreguntaEvaluacionTrabajo)
                    .HasForeignKey(d => d.IdConfigurarEvaluacionTrabajo)
                    .HasConstraintName("FK_T_PreguntaEvaluacionTrabajo_T_ConfigurarEvaluacionTrabajo");

                entity.HasOne(d => d.IdPreguntaNavigation)
                    .WithMany(p => p.TPreguntaEvaluacionTrabajo)
                    .HasForeignKey(d => d.IdPregunta)
                    .HasConstraintName("FK_T_PreguntaEvaluacionTrabajo_T_Pregunta");
            });

            modelBuilder.Entity<TPreguntaFrecuente>(entity =>
            {
                entity.ToTable("T_PreguntaFrecuente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Pregunta)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Respuesta)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPreguntaFrecuenteArea>(entity =>
            {
                entity.ToTable("T_PreguntaFrecuenteArea", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaNavigation)
                    .WithMany(p => p.TPreguntaFrecuenteArea)
                    .HasForeignKey(d => d.IdArea)
                    .HasConstraintName("FK_T_PreguntaFrecuenteArea_T_AreaCapacitacion");

                entity.HasOne(d => d.IdPreguntaFrecuenteNavigation)
                    .WithMany(p => p.TPreguntaFrecuenteArea)
                    .HasForeignKey(d => d.IdPreguntaFrecuente)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaFrecuenteArea_T_PreguntaFrecuente");
            });

            modelBuilder.Entity<TPreguntaFrecuentePgeneral>(entity =>
            {
                entity.ToTable("T_PreguntaFrecuentePGeneral", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPreguntaFrecuentePgeneral)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaFrecuentePGeneral_T_PGeneral");

                entity.HasOne(d => d.IdPreguntaFrecuenteNavigation)
                    .WithMany(p => p.TPreguntaFrecuentePgeneral)
                    .HasForeignKey(d => d.IdPreguntaFrecuente)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaFrecuentePGeneral_T_PreguntaFrecuente");
            });

            modelBuilder.Entity<TPreguntaFrecuenteSubArea>(entity =>
            {
                entity.ToTable("T_PreguntaFrecuenteSubArea", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPreguntaFrecuenteNavigation)
                    .WithMany(p => p.TPreguntaFrecuenteSubArea)
                    .HasForeignKey(d => d.IdPreguntaFrecuente)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaFrecuenteSubArea_T_PreguntaFrecuente");

                entity.HasOne(d => d.IdSubAreaNavigation)
                    .WithMany(p => p.TPreguntaFrecuenteSubArea)
                    .HasForeignKey(d => d.IdSubArea)
                    .HasConstraintName("FK_T_PreguntaFrecuenteSubArea_T_SubAreaCapacitacion");
            });

            modelBuilder.Entity<TPreguntaFrecuenteTipo>(entity =>
            {
                entity.ToTable("T_PreguntaFrecuenteTipo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPreguntaFrecuenteNavigation)
                    .WithMany(p => p.TPreguntaFrecuenteTipo)
                    .HasForeignKey(d => d.IdPreguntaFrecuente)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaFrecuenteTipo_T_PreguntaFrecuente");
            });

            modelBuilder.Entity<TPreguntaIntento>(entity =>
            {
                entity.ToTable("T_PreguntaIntento", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MensajeFeedback).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPreguntaIntentoDetalle>(entity =>
            {
                entity.ToTable("T_PreguntaIntentoDetalle", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPreguntaProgramaCapacitacion>(entity =>
            {
                entity.ToTable("T_PreguntaProgramaCapacitacion", "ope");

                entity.Property(e => e.ActivarFeedBackRespuestaCorrecta).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActivarFeedBackRespuestaIncorrecta).HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.GrupoPregunta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.MinutosPorPregunta).HasDefaultValueSql("((0))");

                entity.Property(e => e.MostrarFeedbackInmediato).HasDefaultValueSql("((0))");

                entity.Property(e => e.MostrarFeedbackPorPregunta).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequiereTiempo).HasDefaultValueSql("((0))");

                entity.Property(e => e.RespuestaAleatoria).HasDefaultValueSql("((0))");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorMarcador).HasColumnType("decimal(14, 4)");

                entity.HasOne(d => d.IdPespecificoNavigation)
                    .WithMany(p => p.TPreguntaProgramaCapacitacion)
                    .HasForeignKey(d => d.IdPespecifico)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaProgramaCapacitacion_T_PEspecifico");

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TPreguntaProgramaCapacitacion)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_PreguntaProgramaCapacitacion_T_PGeneral");

                entity.HasOne(d => d.IdPreguntaEscalaValorNavigation)
                    .WithMany(p => p.TPreguntaProgramaCapacitacion)
                    .HasForeignKey(d => d.IdPreguntaEscalaValor)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaProgramaCapacitacion_T_PreguntaEscalaValor");

                entity.HasOne(d => d.IdPreguntaIntentoNavigation)
                    .WithMany(p => p.TPreguntaProgramaCapacitacion)
                    .HasForeignKey(d => d.IdPreguntaIntento)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaProgramaCapacitacion_T_PreguntaIntento");

                entity.HasOne(d => d.IdPreguntaTipoNavigation)
                    .WithMany(p => p.TPreguntaProgramaCapacitacion)
                    .HasForeignKey(d => d.IdPreguntaTipo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaProgramaCapacitacion_T_PreguntaTipo");

                entity.HasOne(d => d.IdTipoMarcadorNavigation)
                    .WithMany(p => p.TPreguntaProgramaCapacitacion)
                    .HasForeignKey(d => d.IdTipoMarcador)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaProgramaCapacitacion_T_TipoMarcador");

                entity.HasOne(d => d.IdTipoRespuestaNavigation)
                    .WithMany(p => p.TPreguntaProgramaCapacitacion)
                    .HasForeignKey(d => d.IdTipoRespuesta)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaProgramaCapacitacion_T_TipoRespuesta");

                entity.HasOne(d => d.IdTipoRespuestaCalificacionNavigation)
                    .WithMany(p => p.TPreguntaProgramaCapacitacion)
                    .HasForeignKey(d => d.IdTipoRespuestaCalificacion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PreguntaProgramaCapacitacion_T_TipoRespuestaCalificacion");
            });

            modelBuilder.Entity<TPreguntaTipo>(entity =>
            {
                entity.ToTable("T_PreguntaTipo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPremioRankingAsesor>(entity =>
            {
                entity.ToTable("T_PremioRankingAsesor", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Premio)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPrestacionRegistro>(entity =>
            {
                entity.ToTable("T_PrestacionRegistro", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPrestacionTipoNavigation)
                    .WithMany(p => p.TPrestacionRegistro)
                    .HasForeignKey(d => d.IdPrestacionTipo)
                    .HasConstraintName("FK_T_PrestacionRegistro_T_PrestacionTipo");
            });

            modelBuilder.Entity<TPrestacionTipo>(entity =>
            {
                entity.ToTable("T_PrestacionTipo", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPrioridadMailChimpLista>(entity =>
            {
                entity.ToTable("T_PrioridadMailChimpLista", "mkt");

                entity.HasIndex(e => e.IdCampaniaMailing)
                    .HasName("INC_T_PrioridadMailChimpLista_PorIdCampaniaMailing");

                entity.HasIndex(e => new { e.Id, e.IdCampaniaMailingDetalle })
                    .HasName("INC_[T_PrioridadMailChimpLista_PorIdCampaniaMailingDetalle");

                entity.HasIndex(e => new { e.IdCampaniaGeneralDetalle, e.Estado })
                    .HasName("INC_T_PrioridadMailChimpLista_PorIdCampaniaGeneralDetalle_PorEstado");

                entity.Property(e => e.Alias)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Asunto)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.AsuntoLista)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Etiquetas)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCampaniaMailchimp)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdListaMailchimp)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAsesor)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TasaApertura).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TasaClic).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaMailingNavigation)
                    .WithMany(p => p.TPrioridadMailChimpLista)
                    .HasForeignKey(d => d.IdCampaniaMailing)
                    .HasConstraintName("FK_T_PrioridadMailChimpLista_T_CampaniaMailing");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TPrioridadMailChimpLista)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_PrioridadMailChimpLista_T_Personal");
            });

            modelBuilder.Entity<TPrioridadMailChimpListaCorreo>(entity =>
            {
                entity.ToTable("T_PrioridadMailChimpListaCorreo", "mkt");

                entity.HasIndex(e => e.IdCampaniaMailing)
                    .HasName("INC_T_PrioridadMailChimpListaCorreo_PorIdCampaniaMailing");

                entity.HasIndex(e => new { e.IdPrioridadMailChimpLista, e.IdAlumno })
                    .HasName("INC_T_PrioridadMailChimpListaCorreo_PorIdAlumno");

                entity.Property(e => e.ApellidoPaterno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Email1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoSuscripcionMailChimp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ObjetoSerializado).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaMailingNavigation)
                    .WithMany(p => p.TPrioridadMailChimpListaCorreo)
                    .HasForeignKey(d => d.IdCampaniaMailing)
                    .HasConstraintName("FK_T_PrioridadMailChimpListaCorreo_T_CampaniaMailing");
            });

            modelBuilder.Entity<TPrioridadMailChimpListaInteraccion>(entity =>
            {
                entity.ToTable("T_PrioridadMailChimpListaInteraccion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProbabilidadAlumnoPrograma>(entity =>
            {
                entity.ToTable("T_ProbabilidadAlumnoPrograma", "mkt");

                entity.HasIndex(e => new { e.IdAlumno, e.IdProgramaGeneral, e.IdProbabilidadRegistroPw })
                    .HasName("INC_T_ProbabilidadAlumnoPrograma_PorAlumnoProbabilidadPrograma");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdProbabilidadRegistroPw).HasColumnName("IdProbabilidadRegistroPW");

                entity.Property(e => e.NroSolicitudesInformacionPg).HasColumnName("NroSolicitudesInformacionPG");

                entity.Property(e => e.Probabilidad).HasColumnType("decimal(5, 4)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProbabilidadByContactoPrograma>(entity =>
            {
                entity.ToTable("T_ProbabilidadByContactoPrograma", "pla");

                entity.HasIndex(e => e.IdAlumno)
                    .HasName("INC_T_ProbabilidadByContactoPrograma_");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombrePrograma)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ProbabilidadActualDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProbabilidadRegistroPw>(entity =>
            {
                entity.ToTable("T_ProbabilidadRegistro_PW", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProbabilidadRegistroPwVentaCruzadaProbabilidad>(entity =>
            {
                entity.ToTable("T_ProbabilidadRegistroPW_VentaCruzadaProbabilidad", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdProbabilidadRegistroPw).HasColumnName("IdProbabilidadRegistroPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProbabilidadRegistroPwNavigation)
                    .WithMany(p => p.TProbabilidadRegistroPwVentaCruzadaProbabilidad)
                    .HasForeignKey(d => d.IdProbabilidadRegistroPw)
                    .HasConstraintName("FK_T_ProbabilidadRegistroPW_VentaCruzadaProbabilidad_T_ProbabilidadRegistro_PW");
            });

            modelBuilder.Entity<TProblema>(entity =>
            {
                entity.ToTable("T_Problema", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProblemaCliente>(entity =>
            {
                entity.ToTable("T_ProblemaCliente", "com");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProblemaHorario>(entity =>
            {
                entity.ToTable("T_ProblemaHorario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProcedenciaFormulario>(entity =>
            {
                entity.ToTable("T_ProcedenciaFormulario", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProcedenciaFormularioDetalle>(entity =>
            {
                entity.ToTable("T_ProcedenciaFormularioDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProcedenciaVentaCruzada>(entity =>
            {
                entity.ToTable("T_ProcedenciaVentaCruzada", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdCentroCostoActual).HasColumnName("IdCentroCosto_Actual");

                entity.Property(e => e.IdCentroCostoInicial).HasColumnName("IdCentroCosto_Inicial");

                entity.Property(e => e.IdCentroCostoNuevo).HasColumnName("IdCentroCosto_Nuevo");

                entity.Property(e => e.IdOportunidadActual).HasColumnName("IdOportunidad_Actual");

                entity.Property(e => e.IdOportunidadInicial).HasColumnName("IdOportunidad_Inicial");

                entity.Property(e => e.IdOportunidadNuevo).HasColumnName("IdOportunidad_Nuevo");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProcesoSeleccion>(entity =>
            {
                entity.ToTable("T_ProcesoSeleccion", "gp");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinProceso).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioProceso).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Url).HasMaxLength(150);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProcesoSeleccionEtapa>(entity =>
            {
                entity.ToTable("T_ProcesoSeleccionEtapa", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProcesoSeleccionPuntajeCalificacion>(entity =>
            {
                entity.ToTable("T_ProcesoSeleccionPuntajeCalificacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PuntajeMinimo).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProcesoSeleccionRango>(entity =>
            {
                entity.ToTable("T_ProcesoSeleccionRango", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Simbolo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProducto>(entity =>
            {
                entity.ToTable("T_Producto", "fin");

                entity.Property(e => e.CuentaEspecifica)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaEspecificaCodigo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaGeneral)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaGeneralCodigo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProductoPresentacion>(entity =>
            {
                entity.ToTable("T_ProductoPresentacion", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaAreaRelacionada>(entity =>
            {
                entity.ToTable("T_ProgramaAreaRelacionada", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaAreaRelacionada)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaAreaRelacionada_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaCapacitacion>(entity =>
            {
                entity.ToTable("T_ProgramaCapacitacion", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(900)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecificoAsesor).HasColumnName("IdPEspecificoAsesor");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaCapacitacionPorPgeneral>(entity =>
            {
                entity.ToTable("T_ProgramaCapacitacionPorPGeneral", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralBeneficio>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralBeneficio", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralBeneficioArgumento>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralBeneficioArgumento", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralBeneficioNavigation)
                    .WithMany(p => p.TProgramaGeneralBeneficioArgumento)
                    .HasForeignKey(d => d.IdProgramaGeneralBeneficio)
                    .HasConstraintName("FK_T_ProgramaGeneralBeneficioArgumento_T_ProgramaGeneralBeneficio");
            });

            modelBuilder.Entity<TProgramaGeneralBeneficioModalidad>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralBeneficioModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralBeneficioNavigation)
                    .WithMany(p => p.TProgramaGeneralBeneficioModalidad)
                    .HasForeignKey(d => d.IdProgramaGeneralBeneficio)
                    .HasConstraintName("FK_T_ProgramaGeneralBeneficioModalidad_T_ProgramaGeneralBeneficio");
            });

            modelBuilder.Entity<TProgramaGeneralBeneficioRespuesta>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralBeneficioRespuesta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralCertificacion>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralCertificacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralCertificacionArgumento>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralCertificacionArgumento", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralCertificacionNavigation)
                    .WithMany(p => p.TProgramaGeneralCertificacionArgumento)
                    .HasForeignKey(d => d.IdProgramaGeneralCertificacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_ProgramaGeneralCertificacionArgumento_T_ProgramaGeneralCertificacion");
            });

            modelBuilder.Entity<TProgramaGeneralCertificacionModalidad>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralCertificacionModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralCertificacionNavigation)
                    .WithMany(p => p.TProgramaGeneralCertificacionModalidad)
                    .HasForeignKey(d => d.IdProgramaGeneralCertificacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_ProgramaGeneralCertificacionModalidad_T_ProgramaGeneralCertificacion");
            });

            modelBuilder.Entity<TProgramaGeneralCertificacionRespuesta>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralCertificacionRespuesta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralMaterialEstudioAdicional>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralMaterialEstudioAdicional", "pla");

                entity.Property(e => e.EnlaceArchivo).HasMaxLength(1000);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreConfiguracion).HasMaxLength(150);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralMaterialEstudioAdicional)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralMaterialEstudioAdicional_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralMaterialEstudioAdicionalEspecificos>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralMaterialEstudioAdicionalEspecificos", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.MaterialEstudioAdicionalPorPgeneralId).HasColumnName("MaterialEstudioAdicionalPorPGeneralId");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPespecificoNavigation)
                    .WithMany(p => p.TProgramaGeneralMaterialEstudioAdicionalEspecificos)
                    .HasForeignKey(d => d.IdPespecifico)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ProgramaGeneralMaterialEstudioAdicionalEspecificos_T_PEspecifico");
            });

            modelBuilder.Entity<TProgramaGeneralMotivacion>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralMotivacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralMotivacionArgumento>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralMotivacionArgumento", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralMotivacionNavigation)
                    .WithMany(p => p.TProgramaGeneralMotivacionArgumento)
                    .HasForeignKey(d => d.IdProgramaGeneralMotivacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_ProgramaGeneralMotivacionArgumento_T_ProgramaGeneralMotivacion");
            });

            modelBuilder.Entity<TProgramaGeneralMotivacionModalidad>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralMotivacionModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralMotivacionNavigation)
                    .WithMany(p => p.TProgramaGeneralMotivacionModalidad)
                    .HasForeignKey(d => d.IdProgramaGeneralMotivacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_ProgramaGeneralMotivacionModalidad_T_ProgramaGeneralMotivacion");
            });

            modelBuilder.Entity<TProgramaGeneralMotivacionRespuesta>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralMotivacionRespuesta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralPerfilAformacionCoeficiente>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilAFormacionCoeficiente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilAformacionCoeficiente)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilAFormacionCoeficiente_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilAtrabajoCoeficiente>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilATrabajoCoeficiente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilAtrabajoCoeficiente)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilATrabajoCoeficiente_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilCargoCoeficiente>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilCargoCoeficiente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilCargoCoeficiente)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilCargoCoeficiente_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilCategoriaCoeficiente>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilCategoriaCoeficiente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilCategoriaCoeficiente)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilCategoriaCoeficiente_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilCiudadCoeficiente>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilCiudadCoeficiente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilCiudadCoeficiente)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilCiudadCoeficiente_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilEscalaProbabilidad>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilEscalaProbabilidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilEscalaProbabilidad)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilEscalaProbabilidad_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilIndustriaCoeficiente>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilIndustriaCoeficiente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilIndustriaCoeficiente)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilIndustriaCoeficiente_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilIntercepto>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilIntercepto", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.PerfilEstado)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilIntercepto)
                    .HasForeignKey(d => d.IdPgeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilIntercepto_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilModalidadCoeficiente>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilModalidadCoeficiente", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilModalidadCoeficiente)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilModalidadCoeficiente_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilScoringAformacion>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilScoringAFormacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilScoringAformacion)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilScoringAFormacion_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilScoringAtrabajo>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilScoringATrabajo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilScoringAtrabajo)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilScoringATrabajo_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilScoringCargo>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilScoringCargo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilScoringCargo)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilScoringCargo_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilScoringCategoria>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilScoringCategoria", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilScoringCategoria)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilScoringCategoria_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilScoringCiudad>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilScoringCiudad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilScoringCiudad)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilScoringCiudad_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilScoringIndustria>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilScoringIndustria", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdSelect).HasColumnName("idSelect");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilScoringIndustria)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilScoringIndustria_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilScoringModalidad>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilScoringModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.IdSelect).HasColumnName("idSelect");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilScoringModalidad)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilScoringModalidad_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPerfilTipoDato>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPerfilTipoDato", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPerfilTipoDato)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_ProgramaGeneralPerfilTipoDato_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPrerequisito>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPrerequisito", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralPrerequisitoModalidad>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPrerequisitoModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralPrerequisitoNavigation)
                    .WithMany(p => p.TProgramaGeneralPrerequisitoModalidad)
                    .HasForeignKey(d => d.IdProgramaGeneralPrerequisito)
                    .HasConstraintName("FK_T_ProgramaGeneralPrerequisitoModalidad_T_ProgramaGeneralPrerequisito");
            });

            modelBuilder.Entity<TProgramaGeneralPrerequisitoRespuesta>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPrerequisitoRespuesta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralProblema>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralProblema", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralProblemaDetalleSolucion>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralProblemaDetalleSolucion", "pla");

                entity.Property(e => e.Detalle)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Solucion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralProblemaNavigation)
                    .WithMany(p => p.TProgramaGeneralProblemaDetalleSolucion)
                    .HasForeignKey(d => d.IdProgramaGeneralProblema)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_ProgramaGeneralProblemaDetalleSolucion_T_ProgramaGeneralProblema");
            });

            modelBuilder.Entity<TProgramaGeneralProblemaDetalleSolucionRespuesta>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralProblemaDetalleSolucionRespuesta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralProblemaModalidad>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralProblemaModalidad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralProblemaNavigation)
                    .WithMany(p => p.TProgramaGeneralProblemaModalidad)
                    .HasForeignKey(d => d.IdProgramaGeneralProblema)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_ProgramaGeneralProblemaModalidad_T_ProgramaGeneralProblema");
            });

            modelBuilder.Entity<TProgramaGeneralPuntoCorte>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPuntoCorte", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PuntoCorteAlta).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PuntoCorteMedia).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.PuntoCorteMuyAlta).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProgramaGeneralNavigation)
                    .WithMany(p => p.TProgramaGeneralPuntoCorte)
                    .HasForeignKey(d => d.IdProgramaGeneral)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ProgramaGeneralPuntoCorte_T_PGeneral");
            });

            modelBuilder.Entity<TProgramaGeneralPuntoCorteConfiguracion>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPuntoCorteConfiguracion", "pla");

                entity.Property(e => e.Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Texto)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProgramaGeneralPuntoCorteDetalle>(entity =>
            {
                entity.ToTable("T_ProgramaGeneralPuntoCorteDetalle", "pla");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorMaximo).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.ValorMinimo).HasColumnType("decimal(10, 4)");
            });

            modelBuilder.Entity<TProgramaPlantilla>(entity =>
            {
                entity.ToTable("T_ProgramaPlantilla", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProveedor>(entity =>
            {
                entity.ToTable("T_Proveedor", "fin");

                entity.HasIndex(e => e.Email)
                    .HasName("UC_T_Proveedor_PorEmail")
                    .IsUnique();

                entity.Property(e => e.Alias)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApeMaterno)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ApePaterno)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Celular1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Celular2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contacto1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Contacto2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdDetraccionPreferido).HasColumnName("IdDetraccion_Preferido");

                entity.Property(e => e.IdPersonalAsignado).HasColumnName("IdPersonal_Asignado");

                entity.Property(e => e.IdRetencionPreferido).HasColumnName("IdRetencion_Preferido");

                entity.Property(e => e.IdTipoImpuestoPreferido).HasColumnName("IdTipoImpuesto_Preferido");

                entity.Property(e => e.Nombre1)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NroDocIdentidad)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProveedorCalificacion>(entity =>
            {
                entity.ToTable("T_ProveedorCalificacion", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProveedorCampaniaIntegra>(entity =>
            {
                entity.ToTable("T_ProveedorCampaniaIntegra", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProveedorCriterioCalificacion>(entity =>
            {
                entity.ToTable("T_ProveedorCriterioCalificacion", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProveedorCuentaBanco>(entity =>
            {
                entity.ToTable("T_ProveedorCuentaBanco", "fin");

                entity.Property(e => e.CuentaInterbancaria)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NroCuenta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProveedorLog>(entity =>
            {
                entity.ToTable("T_ProveedorLog", "fin");

                entity.Property(e => e.CampoActualizado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAnterior)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNuevo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProveedorNube>(entity =>
            {
                entity.ToTable("T_ProveedorNube", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProveedorSubCriterioCalificacion>(entity =>
            {
                entity.ToTable("T_ProveedorSubCriterioCalificacion", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TProveedorTipoServicio>(entity =>
            {
                entity.ToTable("T_ProveedorTipoServicio", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.TProveedorTipoServicio)
                    .HasForeignKey(d => d.IdProveedor)
                    .HasConstraintName("FK_T_ProveedorTipoServicio_T_Proveedor");

                entity.HasOne(d => d.IdTipoServicioNavigation)
                    .WithMany(p => p.TProveedorTipoServicio)
                    .HasForeignKey(d => d.IdTipoServicio)
                    .HasConstraintName("FK_T_ProveedorTipoServicio_T_TipoServicio");
            });

            modelBuilder.Entity<TProyectoAplicacionDocumentoSeccionPw>(entity =>
            {
                entity.ToTable("T_ProyectoAplicacionDocumentoSeccionPw", "pla");

                entity.Property(e => e.FechaCalificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).IsRequired();
            });

            modelBuilder.Entity<TProyectoAplicacionEntregaVersionPw>(entity =>
            {
                entity.ToTable("T_ProyectoAplicacionEntregaVersionPw", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaArchivo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPublicidadWeb>(entity =>
            {
                entity.ToTable("T_PublicidadWeb", "mkt");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.UrlBrochure)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UrlImagen)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UrlVideo).HasMaxLength(500);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPublicidadWebFormulario>(entity =>
            {
                entity.ToTable("T_PublicidadWebFormulario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoBoton)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPublicidadWebNavigation)
                    .WithMany(p => p.TPublicidadWebFormulario)
                    .HasForeignKey(d => d.IdPublicidadWeb)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PublicidadWebFormulario_T_PublicidadWeb");
            });

            modelBuilder.Entity<TPublicidadWebFormularioCampo>(entity =>
            {
                entity.ToTable("T_PublicidadWebFormularioCampo", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPublicidadWebFormularioNavigation)
                    .WithMany(p => p.TPublicidadWebFormularioCampo)
                    .HasForeignKey(d => d.IdPublicidadWebFormulario)
                    .HasConstraintName("FK_T_PublicidadWebFormularioCampo_T_PublicidadWebFormulario");
            });

            modelBuilder.Entity<TPublicidadWebPrograma>(entity =>
            {
                entity.ToTable("T_PublicidadWebPrograma", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPublicidadWebNavigation)
                    .WithMany(p => p.TPublicidadWebPrograma)
                    .HasForeignKey(d => d.IdPublicidadWeb)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PublicidadWebPrograma_T_PublicidadWeb");
            });

            modelBuilder.Entity<TPublicoObjetivoRespuesta>(entity =>
            {
                entity.ToTable("T_PublicoObjetivoRespuesta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdDocumentoSeccionPw).HasColumnName("IdDocumentoSeccion_PW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPuestoTrabajo>(entity =>
            {
                entity.ToTable("T_PuestoTrabajo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalAreaTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajo)
                    .HasForeignKey(d => d.IdPersonalAreaTrabajo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PuestoTrabajo_T_PersonalAreaTrabajo");
            });

            modelBuilder.Entity<TPuestoTrabajoCaracteristicaPersonal>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoCaracteristicaPersonal", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEstadoCivilNavigation)
                    .WithMany(p => p.TPuestoTrabajoCaracteristicaPersonal)
                    .HasForeignKey(d => d.IdEstadoCivil)
                    .HasConstraintName("FK_T_PuestoTrabajoCaracteristicaPersonal_T_EstadoCivil");

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoCaracteristicaPersonal)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoCaracteristicaPersonal_T_PerfilPuestoTrabajo");

                entity.HasOne(d => d.IdSexoNavigation)
                    .WithMany(p => p.TPuestoTrabajoCaracteristicaPersonal)
                    .HasForeignKey(d => d.IdSexo)
                    .HasConstraintName("FK_T_PuestoTrabajoCaracteristicaPersonal_T_Sexo");
            });

            modelBuilder.Entity<TPuestoTrabajoCursoComplementario>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoCursoComplementario", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdNivelCompetenciaTecnicaNavigation)
                    .WithMany(p => p.TPuestoTrabajoCursoComplementario)
                    .HasForeignKey(d => d.IdNivelCompetenciaTecnica)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PuestoTrabajoCursoComplementario_T_NivelCompetenciaTecnica");

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoCursoComplementario)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoCursoComplementario_T_PerfilPuestoTrabajo");

                entity.HasOne(d => d.IdTipoCompetenciaTecnicaNavigation)
                    .WithMany(p => p.TPuestoTrabajoCursoComplementario)
                    .HasForeignKey(d => d.IdTipoCompetenciaTecnica)
                    .HasConstraintName("FK_T_PuestoTrabajoCursoComplementario_T_TipoCompetenciaTecnica");
            });

            modelBuilder.Entity<TPuestoTrabajoDependencia>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoDependencia", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoDependencia)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoDependencia_T_PerfilPuestoTrabajo");

                entity.HasOne(d => d.IdPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoDependencia)
                    .HasForeignKey(d => d.IdPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoDependencia_T_PuestoTrabajo");
            });

            modelBuilder.Entity<TPuestoTrabajoExperiencia>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoExperiencia", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Periodo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdExperienciaNavigation)
                    .WithMany(p => p.TPuestoTrabajoExperiencia)
                    .HasForeignKey(d => d.IdExperiencia)
                    .HasConstraintName("FK_T_PuestoTrabajoExperiencia_T_Experiencia");

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoExperiencia)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoExperiencia_T_PerfilPuestoTrabajo");

                entity.HasOne(d => d.IdTipoExperienciaNavigation)
                    .WithMany(p => p.TPuestoTrabajoExperiencia)
                    .HasForeignKey(d => d.IdTipoExperiencia)
                    .HasConstraintName("FK_T_PuestoTrabajoExperiencia_T_TipoExperiencia");
            });

            modelBuilder.Entity<TPuestoTrabajoFormacionAcademica>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoFormacionAcademica", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdAreaFormacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.IdCentroEstudio)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.IdGradoEstudio)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.IdNivelEstudio)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.IdTipoFormacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoFormacionAcademica)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoFormacionAcademica_T_PerfilPuestoTrabajo");
            });

            modelBuilder.Entity<TPuestoTrabajoFuncion>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoFuncion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFrecuenciaPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoFuncion)
                    .HasForeignKey(d => d.IdFrecuenciaPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoFuncion_T_FrecuenciaPuestoTrabajo");

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoFuncion)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoFuncion_T_PerfilPuestoTrabajo");

                entity.HasOne(d => d.IdPersonalTipoFuncionNavigation)
                    .WithMany(p => p.TPuestoTrabajoFuncion)
                    .HasForeignKey(d => d.IdPersonalTipoFuncion)
                    .HasConstraintName("FK_T_PuestoTrabajoFuncion_T_PersonalTipoFuncion");
            });

            modelBuilder.Entity<TPuestoTrabajoGrupoComparacion>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoGrupoComparacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPuestoTrabajoIdioma>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoIdioma", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPuestoTrabajoLineaCarrera>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoLineaCarrera", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.LineaCarrera)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPuestoTrabajoNivel>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoNivel", "gp");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NivelVisualizacionAgenda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPuestoTrabajoObjetivo>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoObjetivo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Objetivo)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPuestoTrabajoPremio>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoPremio", "gp");

                entity.Property(e => e.Denominacion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MontoMeta).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Premio)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Reconocimiento)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPuestoTrabajoPuestoAcargo>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoPuestoACargo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoPuestoAcargo)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoPuestoACargo_T_PerfilPuestoTrabajo");

                entity.HasOne(d => d.IdPerfilPuestoTrabajo1)
                    .WithMany(p => p.TPuestoTrabajoPuestoAcargo)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoPuestoACargo_T_PuestoTrabajo");
            });

            modelBuilder.Entity<TPuestoTrabajoPuntajeCalificacion>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoPuntajeCalificacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PuntajeMinimo).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdExamenNavigation)
                    .WithMany(p => p.TPuestoTrabajoPuntajeCalificacion)
                    .HasForeignKey(d => d.IdExamen)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PuestoTrabajoPuntajeCalificacion_T_Examen");

                entity.HasOne(d => d.IdExamenTestNavigation)
                    .WithMany(p => p.TPuestoTrabajoPuntajeCalificacion)
                    .HasForeignKey(d => d.IdExamenTest)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PuestoTrabajoPuntajeCalificacion_T_ExamenTest");

                entity.HasOne(d => d.IdGrupoComponenteEvaluacionNavigation)
                    .WithMany(p => p.TPuestoTrabajoPuntajeCalificacion)
                    .HasForeignKey(d => d.IdGrupoComponenteEvaluacion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PuestoTrabajoPuntajeCalificacion_T_GrupoComponenteEvaluacion");

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoPuntajeCalificacion)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoPuntajeCalificacion_T_PerfilPuestoTrabajo");

                entity.HasOne(d => d.IdProcesoSeleccionRangoNavigation)
                    .WithMany(p => p.TPuestoTrabajoPuntajeCalificacion)
                    .HasForeignKey(d => d.IdProcesoSeleccionRango)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PuestoTrabajoPuntajeCalificacion_T_ProcesoSeleccionRango");
            });

            modelBuilder.Entity<TPuestoTrabajoRelacion>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoRelacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoRelacion)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoRelacion_T_PerfilPuestoTrabajo");
            });

            modelBuilder.Entity<TPuestoTrabajoRelacionDetalle>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoRelacionDetalle", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPuestoTrabajoDependencia).HasColumnName("IdPuestoTrabajo_Dependencia");

                entity.Property(e => e.IdPuestoTrabajoPuestoAcargo).HasColumnName("IdPuestoTrabajo_PuestoACargo");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalAreaTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoRelacionDetalle)
                    .HasForeignKey(d => d.IdPersonalAreaTrabajo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_PuestoTrabajoRelacionDetalle_T_PersonalAreaTrabajo");

                entity.HasOne(d => d.IdPuestoTrabajoDependenciaNavigation)
                    .WithMany(p => p.TPuestoTrabajoRelacionDetalleIdPuestoTrabajoDependenciaNavigation)
                    .HasForeignKey(d => d.IdPuestoTrabajoDependencia)
                    .HasConstraintName("FK_T_PuestoTrabajoRelacionDetalle_T_PuestoTrabajo_Dependencia");

                entity.HasOne(d => d.IdPuestoTrabajoPuestoAcargoNavigation)
                    .WithMany(p => p.TPuestoTrabajoRelacionDetalleIdPuestoTrabajoPuestoAcargoNavigation)
                    .HasForeignKey(d => d.IdPuestoTrabajoPuestoAcargo)
                    .HasConstraintName("FK_T_PuestoTrabajoRelacionDetalle_T_PuestoTrabajo_PuestoACargo");

                entity.HasOne(d => d.IdPuestoTrabajoRelacionNavigation)
                    .WithMany(p => p.TPuestoTrabajoRelacionDetalle)
                    .HasForeignKey(d => d.IdPuestoTrabajoRelacion)
                    .HasConstraintName("FK_T_PuestoTrabajoRelacionDetalle_T_PuestoTrabajoRelacion");
            });

            modelBuilder.Entity<TPuestoTrabajoRelacionExterna>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoRelacionExterna", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalRelacionExternaNavigation)
                    .WithMany(p => p.TPuestoTrabajoRelacionExterna)
                    .HasForeignKey(d => d.IdPersonalRelacionExterna)
                    .HasConstraintName("FK_T_PuestoTrabajoRelacionExterna_T_PersonalRelacionExterna");

                entity.HasOne(d => d.IdPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoRelacionExterna)
                    .HasForeignKey(d => d.IdPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoRelacionExterna_T_PuestoTrabajo");
            });

            modelBuilder.Entity<TPuestoTrabajoRelacionInterna>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoRelacionInterna", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoRelacionInterna)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoRelacionInterna_T_PerfilPuestoTrabajo");

                entity.HasOne(d => d.IdPersonalAreaTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoRelacionInterna)
                    .HasForeignKey(d => d.IdPersonalAreaTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoRelacionInterna_T_PersonalAreaTrabajo");
            });

            modelBuilder.Entity<TPuestoTrabajoRemuneracion>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoRemuneracion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoRemuneracion)
                    .HasForeignKey(d => d.IdPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoRemuneracion_T_PuestoTrabajo");
            });

            modelBuilder.Entity<TPuestoTrabajoRemuneracionDetalle>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoRemuneracionDetalle", "gp");

                entity.Property(e => e.DescripcionEquipo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMonedaMontoFijo).HasColumnName("IdMoneda_MontoFijo");

                entity.Property(e => e.IdMonedaRangoValor).HasColumnName("IdMoneda_RangoValor");

                entity.Property(e => e.IngresoMensual).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.MontoFijo).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.PorcentajeTasa).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RangoValorMaximo).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.RangoValorMinimo).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPuestoTrabajoRemuneracionNavigation)
                    .WithMany(p => p.TPuestoTrabajoRemuneracionDetalle)
                    .HasForeignKey(d => d.IdPuestoTrabajoRemuneracion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_PuestoTrabajoRemuneracionDetalle_T_PuestoTrabajoRemuneracion");
            });

            modelBuilder.Entity<TPuestoTrabajoReporte>(entity =>
            {
                entity.ToTable("T_PuestoTrabajoReporte", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFrecuenciaPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoReporte)
                    .HasForeignKey(d => d.IdFrecuenciaPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoReporte_T_FrecuenciaPuestoTrabajo");

                entity.HasOne(d => d.IdPerfilPuestoTrabajoNavigation)
                    .WithMany(p => p.TPuestoTrabajoReporte)
                    .HasForeignKey(d => d.IdPerfilPuestoTrabajo)
                    .HasConstraintName("FK_T_PuestoTrabajoReporte_T_PerfilPuestoTrabajo");
            });

            modelBuilder.Entity<TPuntoCorte>(entity =>
            {
                entity.ToTable("T_PuntoCorte", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaAerolinea>(entity =>
            {
                entity.ToTable("T_Ra_Aerolinea", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.LinkBoarding)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaAlumno>(entity =>
            {
                entity.ToTable("T_Ra_Alumno", "ope");

                entity.Property(e => e.CodigoAlumno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaAlumnoCurso>(entity =>
            {
                entity.ToTable("T_Ra_AlumnoCurso", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCentroCosto>(entity =>
            {
                entity.ToTable("T_Ra_CentroCosto", "ope");

                entity.Property(e => e.Coordinador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaConfirmacionApertura).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionAulaVirtual).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSubidaAutoevaluacionesAulaVirtual).HasColumnType("date");

                entity.Property(e => e.FechaSubidaMaterialAulaVirtual).HasColumnType("date");

                entity.Property(e => e.FechaSubidaSilaboAulaVirtual).HasColumnType("date");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.NombreCentroCosto)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePespecifico)
                    .HasColumnName("NombrePEspecifico")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Observacion)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.ResponsableCoordinacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioConfirmacionApertura)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCentroCostoEstado>(entity =>
            {
                entity.ToTable("T_Ra_CentroCostoEstado", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCertificadoBrochure>(entity =>
            {
                entity.ToTable("T_Ra_CertificadoBrochure", "ope");

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NombreEnCertificado)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCertificadoPartnerComplemento>(entity =>
            {
                entity.ToTable("T_Ra_CertificadoPartnerComplemento", "ope");

                entity.Property(e => e.Categoria)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FrontalCentral)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FrontalInferiorIzquierda)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.MencionEnCertificado)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PosteriorCentral)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.PosteriorInferiorIzquierda)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaConstanciaAlumno>(entity =>
            {
                entity.ToTable("T_Ra_ConstanciaAlumno", "ope");

                entity.Property(e => e.Alumno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCosto)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoAlumno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Coordinador)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAutorizacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEmision).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaArchivoDigital)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RutaArchivoImpresion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioAutorizacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCoordinadorAccesoMoodleCorteMensual>(entity =>
            {
                entity.ToTable("T_Ra_CoordinadorAccesoMoodleCorteMensual", "ope");

                entity.Property(e => e.CodigoAlumno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCoordinadorDocumentacionAlumno>(entity =>
            {
                entity.ToTable("T_Ra_CoordinadorDocumentacionAlumno", "ope");

                entity.Property(e => e.CodigoAlumno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContentType)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruta)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCurso>(entity =>
            {
                entity.ToTable("T_Ra_Curso", "ope");

                entity.Property(e => e.CostoHora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FechaConfirmacionDocente).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacionAulasVirtuales).HasColumnType("datetime");

                entity.Property(e => e.FechaEstimadaEntregaEvaluacion).HasColumnType("date");

                entity.Property(e => e.FechaEstimadaEntregaMaterial).HasColumnType("date");

                entity.Property(e => e.FechaEstimadaRecepcionNota).HasColumnType("date");

                entity.Property(e => e.FechaFinalizacion).HasColumnType("datetime");

                entity.Property(e => e.FechaIngresoConfirmacionDocente).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcionNota).HasColumnType("date");

                entity.Property(e => e.FechaSolicitudMaterial).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitudNota).HasColumnType("datetime");

                entity.Property(e => e.FechaSubidaEvaluacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSubidaSilabo).HasColumnType("datetime");

                entity.Property(e => e.FechaTipoCambio).HasColumnType("date");

                entity.Property(e => e.Grupo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IdPespecificoIntegra).HasColumnName("IdPEspecificoIntegra");

                entity.Property(e => e.Mimetype)
                    .HasColumnName("MIMEType")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MimetypeArchivoEvaluacion)
                    .HasColumnName("MIMETypeArchivoEvaluacion")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MimetypeArchivoNota)
                    .HasColumnName("MIMETypeArchivoNota")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MimetypeConfirmacionDocente)
                    .HasColumnName("MIMETypeConfirmacionDocente")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MimetypeSilabo)
                    .HasColumnName("MIMETypeSilabo")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivoConfirmacionDocente)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivoEvaluacion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivoNota)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NombreContrato)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCurso)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSilabo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PromedioDocenteEncuestaFinal).HasColumnType("decimal(2, 1)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaArchivoEvaluacion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RutaArchivoNota)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RutaConfirmacionDocente)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RutaContrato)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RutaSilabo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCursoMaterial>(entity =>
            {
                entity.ToTable("T_Ra_CursoMaterial", "ope");

                entity.Property(e => e.CarpetaAmazon)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ComentarioSubidaArchivo)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.ComentariosAprobacion).HasMaxLength(1024);

                entity.Property(e => e.ContentTypeArchivoAlumno)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ContentTypeArchivoEditado)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ContentTypeArchivoEditadoProveedor)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ContentTypeArchivoEnviadoProveedor)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ContentTypeArchivoOriginal)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEdicion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvioAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvioImpresion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcionCoordinador).HasColumnType("date");

                entity.Property(e => e.FechaRecepcionEstimadaImpresion).HasColumnType("date");

                entity.Property(e => e.FechaRecepcionImpresion).HasColumnType("date");

                entity.Property(e => e.FechaSubida).HasColumnType("datetime");

                entity.Property(e => e.FechaSubidaAmazon).HasColumnType("datetime");

                entity.Property(e => e.FechaSubidaAmazonAlumno).HasColumnType("datetime");

                entity.Property(e => e.FechaSubidaArchivoAlumno).HasColumnType("datetime");

                entity.Property(e => e.FechaSubidaArchivoEditado).HasColumnType("datetime");

                entity.Property(e => e.FechaSubidaArchivoEditadoFinal).HasColumnType("datetime");

                entity.Property(e => e.FechaSubidaArchivoProveedor).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivo).HasMaxLength(255);

                entity.Property(e => e.NombreArchivoAlumno).HasMaxLength(255);

                entity.Property(e => e.NombreArchivoEditado).HasMaxLength(255);

                entity.Property(e => e.NombreArchivoEditadoProveedor).HasMaxLength(255);

                entity.Property(e => e.NombreArchivoEnviadoProveedor).HasMaxLength(255);

                entity.Property(e => e.ObservacionProveedor)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruta)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSubidaArchivoAlumno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSubidaArchivoEditado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSubidaArchivoEditadoFinal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSubidaArchivoProveedor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCursoObservacion>(entity =>
            {
                entity.ToTable("T_Ra_CursoObservacion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Observacion)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCursoTrabajoAlumno>(entity =>
            {
                entity.ToTable("T_Ra_CursoTrabajoAlumno", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrega).HasColumnType("date");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaCursoTrabajoAlumnoTipo>(entity =>
            {
                entity.ToTable("T_Ra_CursoTrabajoAlumnoTipo", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaEstadoConstanciaAlumno>(entity =>
            {
                entity.ToTable("T_Ra_EstadoConstanciaAlumno", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaEvaluacion>(entity =>
            {
                entity.ToTable("T_Ra_Evaluacion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaEvaluacionEscala>(entity =>
            {
                entity.ToTable("T_Ra_EvaluacionEscala", "ope");

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Escala).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NotaAprobatoria).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TextoEscala)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TextoNotaAprobatoria)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaEvaluacionTipo>(entity =>
            {
                entity.ToTable("T_Ra_EvaluacionTipo", "ope");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaFrecuencia>(entity =>
            {
                entity.ToTable("T_Ra_Frecuencia", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaHistorialCambioAlumno>(entity =>
            {
                entity.ToTable("T_Ra_HistorialCambioAlumno", "ope");

                entity.Property(e => e.CentroCostoDestino)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCostoOrigen)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoAlumno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComentarioSolicitud)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioAprobacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSolicitud)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaHistorialCambioAlumnoTipo>(entity =>
            {
                entity.ToTable("T_Ra_HistorialCambioAlumnoTipo", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaHotel>(entity =>
            {
                entity.ToTable("T_Ra_Hotel", "ope");

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaJerarquia>(entity =>
            {
                entity.ToTable("T_Ra_Jerarquia", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaMovilidad>(entity =>
            {
                entity.ToTable("T_Ra_Movilidad", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaPresencialBoletoAereo>(entity =>
            {
                entity.ToTable("T_Ra_PresencialBoletoAereo", "ope");

                entity.Property(e => e.FechaCoordinacionEstadia).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaPresencialBoletoAereoDetalle>(entity =>
            {
                entity.ToTable("T_Ra_PresencialBoletoAereoDetalle", "ope");

                entity.Property(e => e.CodigoReserva)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Destino)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCompraPasaje).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimientoReserva).HasColumnType("datetime");

                entity.Property(e => e.HoraLlegada).HasColumnType("datetime");

                entity.Property(e => e.HoraSalida).HasColumnType("datetime");

                entity.Property(e => e.NumeroVuelo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Origen)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaPresencialBoletoAereoReserva>(entity =>
            {
                entity.ToTable("T_Ra_PresencialBoletoAereoReserva", "ope");

                entity.Property(e => e.CodigoReserva)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.LinkBoarding)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaPresencialComprobantePago>(entity =>
            {
                entity.ToTable("T_Ra_PresencialComprobantePago", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Monto).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.MontoViatico).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.NumeroComprobante)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observacion)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaRemitente>(entity =>
            {
                entity.ToTable("T_Ra_Remitente", "ope");

                entity.Property(e => e.AliasCorreo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Celular)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ClaveAplicacion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Correo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Firma)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.RutaFirma)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaSede>(entity =>
            {
                entity.ToTable("T_Ra_Sede", "ope");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaSesion>(entity =>
            {
                entity.ToTable("T_Ra_Sesion", "ope");

                entity.Property(e => e.ConformidadSesion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.HoraFin).HasColumnType("datetime");

                entity.Property(e => e.HoraIngresoProfesor).HasColumnType("datetime");

                entity.Property(e => e.HoraInicio).HasColumnType("datetime");

                entity.Property(e => e.HoraInicioBreak).HasColumnType("datetime");

                entity.Property(e => e.HoraInicioClase).HasColumnType("datetime");

                entity.Property(e => e.HoraTerminoBreak).HasColumnType("datetime");

                entity.Property(e => e.HoraTerminoClase).HasColumnType("datetime");

                entity.Property(e => e.Horario)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Observacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ResultadoParticipacionDocente).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaSesionBitacora>(entity =>
            {
                entity.ToTable("T_Ra_SesionBitacora", "ope");

                entity.Property(e => e.Detalle)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaSesionTipo>(entity =>
            {
                entity.ToTable("T_Ra_SesionTipo", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaSkypeReunion>(entity =>
            {
                entity.ToTable("T_Ra_SkypeReunion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ReunionId)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlBase)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaTipoBoletoAereo>(entity =>
            {
                entity.ToTable("T_Ra_TipoBoletoAereo", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaTipoConstanciaAlumno>(entity =>
            {
                entity.ToTable("T_Ra_TipoConstanciaAlumno", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaTipoContrato>(entity =>
            {
                entity.ToTable("T_Ra_TipoContrato", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaTipoCurso>(entity =>
            {
                entity.ToTable("T_Ra_TipoCurso", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaTipoCursoMaterial>(entity =>
            {
                entity.ToTable("T_Ra_TipoCursoMaterial", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRaTipoMovilidad>(entity =>
            {
                entity.ToTable("T_Ra_TipoMovilidad", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRankingIngreso>(entity =>
            {
                entity.ToTable("T_RankingIngreso", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IngresoIs).HasColumnName("IngresoIS");

                entity.Property(e => e.IngresoOc).HasColumnName("IngresoOC");

                entity.Property(e => e.IngresoPromedioOc).HasColumnName("IngresoPromedioOC");

                entity.Property(e => e.IrbyIm).HasColumnName("IRByIM");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tcmeta)
                    .HasColumnName("TCMeta")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Tcreal)
                    .HasColumnName("TCReal")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TcrealByMeta)
                    .HasColumnName("TCRealByMeta")
                    .HasColumnType("decimal(11, 6)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReclamo>(entity =>
            {
                entity.ToTable("T_Reclamo", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaReclamoRealizadoFin).HasColumnType("datetime");

                entity.Property(e => e.IdEstadoMatriculaPrevio).HasColumnName("IdEstadoMatricula_Previo");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TReclamo)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FKT_Reclamo_T_MatriculaCabecera");

                entity.HasOne(d => d.IdOrigenNavigation)
                    .WithMany(p => p.TReclamo)
                    .HasForeignKey(d => d.IdOrigen)
                    .HasConstraintName("FK_T_Reclamo_T_Origen");

                entity.HasOne(d => d.IdReclamoEstadoNavigation)
                    .WithMany(p => p.TReclamo)
                    .HasForeignKey(d => d.IdReclamoEstado)
                    .HasConstraintName("FK_T_Reclamo_T_ReclamoEstado");

                entity.HasOne(d => d.IdTipoReclamoAlumnoNavigation)
                    .WithMany(p => p.TReclamo)
                    .HasForeignKey(d => d.IdTipoReclamoAlumno)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_Reclamo_T_TipoReclamoAlumno");
            });

            modelBuilder.Entity<TReclamoEstado>(entity =>
            {
                entity.ToTable("T_ReclamoEstado", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRecordAreaComercial>(entity =>
            {
                entity.ToTable("T_RecordAreaComercial", "com");

                entity.Property(e => e.Bono).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMonedaBono).HasColumnName("IdMoneda_Bono");

                entity.Property(e => e.IdMonedaRecord).HasColumnName("IdMoneda_Record");

                entity.Property(e => e.Monto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRecuperacionAutomaticoModuloSistema>(entity =>
            {
                entity.ToTable("T_RecuperacionAutomaticoModuloSistema", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRecuperacionAutomaticoModuloSistemaResponsable>(entity =>
            {
                entity.ToTable("T_RecuperacionAutomaticoModuloSistemaResponsable", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRecuperacionSesion>(entity =>
            {
                entity.ToTable("T_RecuperacionSesion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecificoSesion).HasColumnName("IdPEspecificoSesion");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TRecuperacionSesion)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FK_T_RecuperacionSesion_T_MatriculaCabecera");

                entity.HasOne(d => d.IdPespecificoSesionNavigation)
                    .WithMany(p => p.TRecuperacionSesion)
                    .HasForeignKey(d => d.IdPespecificoSesion)
                    .HasConstraintName("FK_T_RecuperacionSesion_T_PEspecificoSesion");
            });

            modelBuilder.Entity<TReferidoConfiguracion>(entity =>
            {
                entity.ToTable("T_ReferidoConfiguracion", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRegionCiudad>(entity =>
            {
                entity.ToTable("T_RegionCiudad", "conf");

                entity.Property(e => e.CodigoBs).HasColumnName("CodigoBS");

                entity.Property(e => e.DenominacionBs)
                    .HasColumnName("DenominacionBS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCorto)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRegistroArchivoStorage>(entity =>
            {
                entity.ToTable("T_RegistroArchivoStorage", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruta)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdUrlSubContenedorNavigation)
                    .WithMany(p => p.TRegistroArchivoStorage)
                    .HasForeignKey(d => d.IdUrlSubContenedor)
                    .HasConstraintName("FK_T_RegistroArchivoStorage_T_UrlSubContenedor");
            });

            modelBuilder.Entity<TRegistroCertificadoFisicoGenerado>(entity =>
            {
                entity.ToTable("T_RegistroCertificadoFisicoGenerado", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FormatoArchivo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreArchivo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UltimaFechaGeneracion).HasColumnType("datetime");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSolicitudCertificadoFisicoNavigation)
                    .WithMany(p => p.TRegistroCertificadoFisicoGenerado)
                    .HasForeignKey(d => d.IdSolicitudCertificadoFisico)
                    .HasConstraintName("FK_T_RegistroCertificadoFisicoGenerado_T_SolicitudCertificadoFisico");

                entity.HasOne(d => d.IdUrlBlockStorageNavigation)
                    .WithMany(p => p.TRegistroCertificadoFisicoGenerado)
                    .HasForeignKey(d => d.IdUrlBlockStorage)
                    .HasConstraintName("FK_T_RegistroCertificadoFisicoGenerado_T_UrlBlockStorage");
            });

            modelBuilder.Entity<TRegistroLlamada>(entity =>
            {
                entity.ToTable("T_RegistroLlamada", "com");

                entity.HasIndex(e => new { e.Id, e.ReasonTerminated, e.TimeAnswered, e.TimeEnd, e.FromDn, e.TimeStart })
                    .HasName("INC_T_RegistroLlamada_PorFromDn_PorTimeStart");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BillCost)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BillName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BillRate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CallId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Chain)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DialNro)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Duration)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FinalDn)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinalNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FromDn)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FromNro)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.HistoryId)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonChanged)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonTerminated)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TimeAnswered)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TimeEnd)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TimeStart)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDn)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToNro)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRegistroLlamadaError>(entity =>
            {
                entity.ToTable("T_RegistroLlamadaError", "com");

                entity.Property(e => e.Content)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.StringData)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Verb)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRegistroMarcadorFecha>(entity =>
            {
                entity.ToTable("T_RegistroMarcadorFecha", "gp");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.M1).HasColumnType("time(0)");

                entity.Property(e => e.M2).HasColumnType("time(0)");

                entity.Property(e => e.M3).HasColumnType("time(0)");

                entity.Property(e => e.M4).HasColumnType("time(0)");

                entity.Property(e => e.M5).HasColumnType("time(0)");

                entity.Property(e => e.M6).HasColumnType("time(0)");

                entity.Property(e => e.Pin)
                    .IsRequired()
                    .HasColumnName("PIN")
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRegistroRecuperacionWhatsApp>(entity =>
            {
                entity.ToTable("T_RegistroRecuperacionWhatsApp", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinEnvioWhatsapp).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioEnvioWhatsapp).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRegistroVideoProveedor>(entity =>
            {
                entity.ToTable("T_RegistroVideoProveedor", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreReproductor)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VideoId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRemitenteMailing>(entity =>
            {
                entity.ToTable("T_RemitenteMailing", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRemitenteMailingAsesor>(entity =>
            {
                entity.ToTable("T_RemitenteMailingAsesor", "mkt");

                entity.Property(e => e.CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReporteAnalyticsFiltro>(entity =>
            {
                entity.ToTable("T_ReporteAnalyticsFiltro", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReporteAnalyticsFiltroDetalle>(entity =>
            {
                entity.ToTable("T_ReporteAnalyticsFiltroDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Texto)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReporteCalidadProcesamiento>(entity =>
            {
                entity.ToTable("T_ReporteCalidadProcesamiento", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PromedioBeneficios).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.PromedioCompetidores).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.PromedioHistorialFinanciero).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.PromedioPerfil).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.PromedioPespecifico)
                    .HasColumnName("PromedioPEspecifico")
                    .HasColumnType("decimal(4, 3)");

                entity.Property(e => e.PromedioPgeneral)
                    .HasColumnName("PromedioPGeneral")
                    .HasColumnType("decimal(4, 3)");

                entity.Property(e => e.PromedioProblemaSeleccionados).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.PromedioProblemaSolucionados).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReporteCambiosCongelado>(entity =>
            {
                entity.ToTable("T_ReporteCambiosCongelado", "fin");

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCambio).HasColumnType("datetime");

                entity.Property(e => e.FechaCongelamiento).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MensajeSistema)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReporteDevolucionCongelado>(entity =>
            {
                entity.ToTable("T_ReporteDevolucionCongelado", "fin");

                entity.Property(e => e.CodigoMatricula)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCongelamiento).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRetiro).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.MontoDevolucion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NombreAlumno)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodoFechaVencimiento)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoRetiro)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReporteFlujoCongeladoPorDia>(entity =>
            {
                entity.ToTable("T_ReporteFlujoCongeladoPorDia", "fin");

                entity.Property(e => e.CodigoMatricula)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CoordinadorAcademico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoordinadorCobranza)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dni)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.EstadoMatricula)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCongelamiento).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.MonedaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontoCuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NombreAlumno)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NroDocumento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RealPagoDolar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SaldoPendiente).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.SaldoPendienteDolar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalCuotaDolar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPagado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReporteFlujoCongeladoPorPeriodo>(entity =>
            {
                entity.ToTable("T_ReporteFlujoCongeladoPorPeriodo", "fin");

                entity.Property(e => e.CodigoMatricula)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CoordinadorAcademico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CoordinadorCobranza)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dni)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.EstadoMatricula)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.MonedaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MontoCuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NombreAlumno)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NroDocumento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RealPagoDolar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SaldoPendiente).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.SaldoPendienteDolar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalCuotaDolar).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPagado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<TReporteNota>(entity =>
            {
                entity.ToTable("T_ReporteNota", "ope");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaActualizacion).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreAutoevaluacion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCurso)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nota)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReportePagoCongeladoPorDia>(entity =>
            {
                entity.ToTable("T_ReportePagoCongeladoPorDia", "fin");

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoAlumno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comprobante)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.CuotaSubCuota)
                    .IsRequired()
                    .HasColumnName("Cuota_SubCuota")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dni)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.EstadoCuota)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCongelamiento).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCuota)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaPagoOriginal).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FormaIngreso).HasMaxLength(500);

                entity.Property(e => e.Modalidad)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MonedaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NombreAlumno)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NroDocumento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPagado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPagadoDisponible).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReportePagoCongeladoPorPeriodo>(entity =>
            {
                entity.ToTable("T_ReportePagoCongeladoPorPeriodo", "fin");

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoAlumno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comprobante)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cuota).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.CuotaSubCuota)
                    .IsRequired()
                    .HasColumnName("Cuota_SubCuota")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dni)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(120);

                entity.Property(e => e.EstadoCuota)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCuota)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaPagoOriginal).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesoPago).HasColumnType("datetime");

                entity.Property(e => e.FormaIngreso).HasMaxLength(500);

                entity.Property(e => e.Modalidad)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MonedaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mora).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NombreAlumno)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePrograma)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NroDocumento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPagado).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPagadoDisponible).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReportePendienteHistorico>(entity =>
            {
                entity.ToTable("T_ReportePendienteHistorico", "fin");

                entity.Property(e => e.FechaCierre).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalCoordinadora).HasColumnName("IdPersonal_Coordinadora");

                entity.Property(e => e.PorcentajeProyectadoActual).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PorcentajeProyectoInicial).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PorcentajeVencido).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoReporte)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCoordinadora)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPeriodoNavigation)
                    .WithMany(p => p.TReportePendienteHistorico)
                    .HasForeignKey(d => d.IdPeriodo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ReportePendienteHistorico_T_Periodo");

                entity.HasOne(d => d.IdPersonalCoordinadoraNavigation)
                    .WithMany(p => p.TReportePendienteHistorico)
                    .HasForeignKey(d => d.IdPersonalCoordinadora)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ReportePendienteHistorico_T_Personal");
            });

            modelBuilder.Entity<TReprogramacionCabecera>(entity =>
            {
                entity.ToTable("T_ReprogramacionCabecera", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReprogramacionCabeceraPersonal>(entity =>
            {
                entity.ToTable("T_ReprogramacionCabeceraPersonal", "com");

                entity.HasIndex(e => new { e.IdActividadCabecera, e.IdCategoriaOrigen, e.IdPersonal })
                    .HasName("INC_T_ReprogramacionCabeceraPersonal_PorIdActividadCabeceraPorIdCategoriaOrigenPorIdPersonal");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaReprogramacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRespuestaPregunta>(entity =>
            {
                entity.ToTable("T_RespuestaPregunta", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FeedbackNegativo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackPositivo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MostrarFeedBack).HasDefaultValueSql("((0))");

                entity.Property(e => e.Puntaje).HasDefaultValueSql("((0))");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRespuestaPreguntaEvaluacion>(entity =>
            {
                entity.ToTable("T_RespuestaPreguntaEvaluacion", "gp");

                entity.Property(e => e.EnunciadoEmparejar).IsUnicode(false);

                entity.Property(e => e.EnunciadoRespuesta).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Feedback).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRespuestaPreguntaProgramaCapacitacion>(entity =>
            {
                entity.ToTable("T_RespuestaPreguntaProgramaCapacitacion", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FeedbackNegativo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackPositivo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MostrarFeedBack).HasDefaultValueSql("((0))");

                entity.Property(e => e.Puntaje).HasDefaultValueSql("((0))");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRetencion>(entity =>
            {
                entity.ToTable("T_Retencion", "fin");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<TRevisionNivelPw>(entity =>
            {
                entity.ToTable("T_RevisionNivel_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdRevisionPw).HasColumnName("IdRevisionPW");

                entity.Property(e => e.IdTipoRevisionPw).HasColumnName("IdTipoRevisionPW");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdRevisionPwNavigation)
                    .WithMany(p => p.TRevisionNivelPw)
                    .HasForeignKey(d => d.IdRevisionPw)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_RevisionNivel_PW_T_Revision_PW");

                entity.HasOne(d => d.IdTipoRevisionPwNavigation)
                    .WithMany(p => p.TRevisionNivelPw)
                    .HasForeignKey(d => d.IdTipoRevisionPw)
                    .HasConstraintName("FK_T_RevisionNivel_PW_T_TipoRevision_PW");
            });

            modelBuilder.Entity<TRevisionPw>(entity =>
            {
                entity.ToTable("T_Revision_PW", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TRolUsuarioTicket>(entity =>
            {
                entity.ToTable("T_RolUsuarioTicket", "ope");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingAerolineaConfiguracion>(entity =>
            {
                entity.ToTable("T_ScrapingAerolineaConfiguracion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEjecucion).HasColumnType("datetime");

                entity.Property(e => e.FechaIda).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRetorno).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.PrecisionIda).HasColumnType("decimal(4, 1)");

                entity.Property(e => e.PrecisionRetorno).HasColumnType("decimal(4, 1)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoFrecuencia)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoVuelo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingAerolineaEstadoConsulta>(entity =>
            {
                entity.ToTable("T_ScrapingAerolineaEstadoConsulta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingAerolineaResultado>(entity =>
            {
                entity.ToTable("T_ScrapingAerolineaResultado", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingAerolineaResultadoDetalle>(entity =>
            {
                entity.ToTable("T_ScrapingAerolineaResultadoDetalle", "pla");

                entity.Property(e => e.Clase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaLlegada).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSalida).HasColumnType("datetime");

                entity.Property(e => e.NombreAerolinea)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCiudadDestino)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCiudadOrigen)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NroVuelo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingEmpleoClasificacionCertificacion>(entity =>
            {
                entity.ToTable("T_ScrapingEmpleoClasificacionCertificacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingEmpleoClasificacionEstudio>(entity =>
            {
                entity.ToTable("T_ScrapingEmpleoClasificacionEstudio", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingEmpleoClasificacionExperiencia>(entity =>
            {
                entity.ToTable("T_ScrapingEmpleoClasificacionExperiencia", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingEmpleoPatronClasificacion>(entity =>
            {
                entity.ToTable("T_ScrapingEmpleoPatronClasificacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Patron)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingEmpleoResultadoClasificacion>(entity =>
            {
                entity.ToTable("T_ScrapingEmpleoResultadoClasificacion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdScrapingEmpleoPatronClasificacionNavigation)
                    .WithMany(p => p.TScrapingEmpleoResultadoClasificacion)
                    .HasForeignKey(d => d.IdScrapingEmpleoPatronClasificacion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_ScrapingEmpleoResultadoClasificacion_T_ScrapingEmpleoPatronClasificacion");

                entity.HasOne(d => d.IdScrapingPortalEmpleoResultadoNavigation)
                    .WithMany(p => p.TScrapingEmpleoResultadoClasificacion)
                    .HasForeignKey(d => d.IdScrapingPortalEmpleoResultado)
                    .HasConstraintName("FK_T_ScrapingEmpleoResultadoClasificacion_T_ScrapingPortalEmpleoResultado");
            });

            modelBuilder.Entity<TScrapingPagina>(entity =>
            {
                entity.ToTable("T_ScrapingPagina", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Url)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TScrapingPortalEmpleoResultado>(entity =>
            {
                entity.ToTable("T_ScrapingPortalEmpleoResultado", "pla");

                entity.HasIndex(e => new { e.PortalId, e.IdScrapingPagina })
                    .HasName("INC_T_ScrapingPortalEmpleoResultado_PorIdScrapingPagina");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionHtml)
                    .HasColumnName("DescripcionHTML")
                    .IsUnicode(false);

                entity.Property(e => e.Empresa).IsUnicode(false);

                entity.Property(e => e.Error).IsUnicode(false);

                entity.Property(e => e.FechaAnuncio).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Jornada).IsUnicode(false);

                entity.Property(e => e.Modalidad).IsUnicode(false);

                entity.Property(e => e.PortalId).HasColumnType("varchar(max)");

                entity.Property(e => e.Puesto).IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Salario).IsUnicode(false);

                entity.Property(e => e.TipoContrato).IsUnicode(false);

                entity.Property(e => e.TituloAnuncio)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Ubicacion).IsUnicode(false);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSeccionFormularioAb>(entity =>
            {
                entity.ToTable("T_SeccionFormularioAB", "mkt");

                entity.Property(e => e.ColorDescripcion).HasMaxLength(50);

                entity.Property(e => e.ColorTitulo).HasMaxLength(50);

                entity.Property(e => e.Descripcion).IsRequired();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdFormularioLandingAb).HasColumnName("IdFormularioLandingAB");

                entity.Property(e => e.Imagen).HasMaxLength(250);

                entity.Property(e => e.NombreTitulo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFormularioLandingAbNavigation)
                    .WithMany(p => p.TSeccionFormularioAb)
                    .HasForeignKey(d => d.IdFormularioLandingAb)
                    .HasConstraintName("FK_T_SeccionFormularioAB_T_FormularioLandingAB");
            });

            modelBuilder.Entity<TSeccionMaestraPw>(entity =>
            {
                entity.ToTable("T_SeccionMaestra_PW", "pla");

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPlantillaMaestroPw).HasColumnName("IdPlantillaMaestroPW");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPlantillaMaestroPwNavigation)
                    .WithMany(p => p.TSeccionMaestraPw)
                    .HasForeignKey(d => d.IdPlantillaMaestroPw)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_SeccionMaestra_PW_T_PlantillaMaestro_PW");
            });

            modelBuilder.Entity<TSeccionPreguntaFrecuente>(entity =>
            {
                entity.ToTable("T_SeccionPreguntaFrecuente", "pla");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSeccionPw>(entity =>
            {
                entity.ToTable("T_Seccion_PW", "pla");

                entity.Property(e => e.Contenido)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPlantillaPwNavigation)
                    .WithMany(p => p.TSeccionPw)
                    .HasForeignKey(d => d.IdPlantillaPw)
                    .HasConstraintName("FK_T_Seccion_PW_T_Plantilla_PW");

                entity.HasOne(d => d.IdSeccionTipoContenidoNavigation)
                    .WithMany(p => p.TSeccionPw)
                    .HasForeignKey(d => d.IdSeccionTipoContenido)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_Seccion_PW_T_SeccionTipoContenido_PW");
            });

            modelBuilder.Entity<TSeccionTipoContenidoPw>(entity =>
            {
                entity.ToTable("T_SeccionTipoContenido_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSeccionTipoDetallePw>(entity =>
            {
                entity.ToTable("T_SeccionTipoDetalle_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreTitulo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSeccionPwNavigation)
                    .WithMany(p => p.TSeccionTipoDetallePw)
                    .HasForeignKey(d => d.IdSeccionPw)
                    .HasConstraintName("FK_T_SeccionTipoDetalle_PW_T_Seccion_PW");
            });

            modelBuilder.Entity<TSede>(entity =>
            {
                entity.ToTable("T_Sede", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSedeTrabajo>(entity =>
            {
                entity.ToTable("T_SedeTrabajo", "gp");

                entity.Property(e => e.Comentarios)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IpCentral)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSedeTrabajoGrupoComparacion>(entity =>
            {
                entity.ToTable("T_SedeTrabajoGrupoComparacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSeguimientoAlumnoCategoria>(entity =>
            {
                entity.ToTable("T_SeguimientoAlumnoCategoria", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSeguimientoAlumnoComentario>(entity =>
            {
                entity.ToTable("T_SeguimientoAlumnoComentario", "ope");

                entity.Property(e => e.Comentario)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCompromiso).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSeguimientoPreProcesoListaWhatsApp>(entity =>
            {
                entity.ToTable("T_SeguimientoPreProcesoListaWhatsApp", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoListaNavigation)
                    .WithMany(p => p.TSeguimientoPreProcesoListaWhatsApp)
                    .HasForeignKey(d => d.IdConjuntoLista)
                    .HasConstraintName("FK_T_SeguimientoPreProcesoListaWhatsApp_T_ConjuntoLista");

                entity.HasOne(d => d.IdEstadoSeguimientoPreProcesoListaWhatsAppNavigation)
                    .WithMany(p => p.TSeguimientoPreProcesoListaWhatsApp)
                    .HasForeignKey(d => d.IdEstadoSeguimientoPreProcesoListaWhatsApp)
                    .HasConstraintName("FK_T_SeguimientoPreProcesoListaWhatsApp_T_EstadoSeguimientoPreProcesoListaWhatsApp");
            });

            modelBuilder.Entity<TSemaforoFinanciero>(entity =>
            {
                entity.ToTable("T_SemaforoFinanciero", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSemaforoFinancieroDetalle>(entity =>
            {
                entity.ToTable("T_SemaforoFinancieroDetalle", "com");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSemaforoFinancieroDetalleVariable>(entity =>
            {
                entity.ToTable("T_SemaforoFinancieroDetalleVariable", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorMaximo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorMinimo).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TSemaforoFinancieroVariable>(entity =>
            {
                entity.ToTable("T_SemaforoFinancieroVariable", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSensoresPersonal>(entity =>
            {
                entity.ToTable("T_SensoresPersonal", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.PingWebPhone)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSentinel>(entity =>
            {
                entity.ToTable("T_Sentinel", "com");

                entity.Property(e => e.Dni)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSentinelRepLegItem>(entity =>
            {
                entity.ToTable("T_SentinelRepLegItem", "com");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cargo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombres)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroDocumento)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SemaforoActual)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSentinelNavigation)
                    .WithMany(p => p.TSentinelRepLegItem)
                    .HasForeignKey(d => d.IdSentinel)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SentinelRepLegItem_T_Sentinel");
            });

            modelBuilder.Entity<TSentinelSdtEstandarItem>(entity =>
            {
                entity.ToTable("T_SentinelSdtEstandarItem", "com");

                entity.Property(e => e.Calificativo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionDomicilio)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CuentasTarjetas)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaCastigada)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaDirecta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaImpagable)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaIndirecta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaLaboral)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaProtestos)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaSbs)
                    .HasColumnName("DeudaSBS")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaTotal)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaTributaria)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Documento2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoDomicilio)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioActividad).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProceso).HasColumnType("date");

                entity.Property(e => e.LineaCreditoNoUtilizada)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NroBancos)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PeorCalificacion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeCalificacionNormal)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ReporteNegativo)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Score)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Semaforos)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SemanaActual)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SemanaPeorMejor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SemanaPrevio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoActividad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalRiesgo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Veces24m)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.VencidoBanco)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSentinelNavigation)
                    .WithMany(p => p.TSentinelSdtEstandarItem)
                    .HasForeignKey(d => d.IdSentinel)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SentinelSdtEstandarItem_T_Sentinel");
            });

            modelBuilder.Entity<TSentinelSdtInfGen>(entity =>
            {
                entity.ToTable("T_SentinelSdtInfGen", "com");

                entity.Property(e => e.ActividadEconomica)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ActividadEconomica2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ActividadEconomica3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ActvidadComercioExterior)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Asiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ciiu)
                    .HasColumnName("CIIU")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ciiu2)
                    .HasColumnName("CIIU2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ciiu3)
                    .HasColumnName("CIIU3")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoActividadComerExt)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoCondicionContribuyente)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoDependencia)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoEstadoContribuyente)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTipoContribuyente)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionContribuyente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Departamento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dependencia)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Digito)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DigitoAnterior)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Distrito)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dni)
                    .HasColumnName("DNI")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoContribuyente)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaActividad).HasColumnType("date");

                entity.Property(e => e.FechaBaja).HasColumnType("date");

                entity.Property(e => e.FechaConstitucion).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.Folio)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NombreComercial)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PartidaReg)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Patron)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Provincia)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruc)
                    .HasColumnName("RUC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sexo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoContribuyente)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Tomo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ubigeo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSentinelNavigation)
                    .WithMany(p => p.TSentinelSdtInfGen)
                    .HasForeignKey(d => d.IdSentinel)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SentinelSdtInfGen_T_Sentinel");
            });

            modelBuilder.Entity<TSentinelSdtLincreItem>(entity =>
            {
                entity.ToTable("T_SentinelSdtLincreItem", "com");

                entity.Property(e => e.CnsEntNomRazLn)
                    .HasColumnName("CnsEntNomRazLN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.LineaCredito).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.LineaCreditoNoUtil).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.LineaUtil).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSentinelNavigation)
                    .WithMany(p => p.TSentinelSdtLincreItem)
                    .HasForeignKey(d => d.IdSentinel)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SentinelSdtLincreItem_T_Sentinel");
            });

            modelBuilder.Entity<TSentinelSdtPoshisItem>(entity =>
            {
                entity.ToTable("T_SentinelSdtPoshisItem", "com");

                entity.HasIndex(e => e.IdSentinel)
                    .HasName("INC_T_SentinelSdtPoshisItem_porIdSentinel");

                entity.Property(e => e.Afp)
                    .HasColumnName("AFP")
                    .HasColumnType("decimal(11, 2)");

                entity.Property(e => e.DescripcionSemaforo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionVariacion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DeudaCastigada).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.DeudaDirecta).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.DeudaIndirecta).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.DeudaTotal).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.DeudaTributaria).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.DocImpuesto).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaProceso).HasColumnType("date");

                entity.Property(e => e.LineaCreditoNoUtilizada).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.MontoSbs)
                    .HasColumnName("MontoSBS")
                    .HasColumnType("decimal(11, 2)");

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PeroCalificacionDescripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeCalificacion).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ProgresoRegistro).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Score).HasColumnType("decimal(6, 5)");

                entity.Property(e => e.SemanaActual)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSentinelNavigation)
                    .WithMany(p => p.TSentinelSdtPoshisItem)
                    .HasForeignKey(d => d.IdSentinel)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SentinelSdtPoshisItem_T_Sentinel");
            });

            modelBuilder.Entity<TSentinelSdtRepSbsitem>(entity =>
            {
                entity.ToTable("T_SentinelSdtRepSBSItem", "com");

                entity.Property(e => e.Calificacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaReporte).HasColumnType("date");

                entity.Property(e => e.MontoDeuda).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.NombreRazonSocial)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NroDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSentinelNavigation)
                    .WithMany(p => p.TSentinelSdtRepSbsitem)
                    .HasForeignKey(d => d.IdSentinel)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SentinelSdtRepSBSItem_T_Sentinel");
            });

            modelBuilder.Entity<TSentinelSdtResVenItem>(entity =>
            {
                entity.ToTable("T_SentinelSdtResVenItem", "com");

                entity.Property(e => e.Entidad)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Monto).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.NroDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSentinelNavigation)
                    .WithMany(p => p.TSentinelSdtResVenItem)
                    .HasForeignKey(d => d.IdSentinel)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SentinelSdtResVenItem_T_Sentinel");
            });

            modelBuilder.Entity<TSentinelSueldoIndividual>(entity =>
            {
                entity.ToTable("T_SentinelSueldoIndividual", "com");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.AreaFormacion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.AreaTrabajo)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cargo)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Dni)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmpresaNombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Industria)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Nombres)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OrigenInformacion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TamanioEmpresa)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSentinelSueldoPorIndustria>(entity =>
            {
                entity.ToTable("T_SentinelSueldoPorIndustria", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSentinelSueldoPorIndustriaDataDinamico>(entity =>
            {
                entity.ToTable("T_SentinelSueldoPorIndustriaDataDinamico", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSentinelSueldoPorIndustriaDataTotal>(entity =>
            {
                entity.ToTable("T_SentinelSueldoPorIndustriaDataTotal", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSesionConfigurarVideo>(entity =>
            {
                entity.ToTable("T_SesionConfigurarVideo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConfigurarVideoProgramaNavigation)
                    .WithMany(p => p.TSesionConfigurarVideo)
                    .HasForeignKey(d => d.IdConfigurarVideoPrograma)
                    .HasConstraintName("FK_T_SesionConfigurarVideo_T_ConfigurarVideoPrograma");

                entity.HasOne(d => d.IdTipoVistaNavigation)
                    .WithMany(p => p.TSesionConfigurarVideo)
                    .HasForeignKey(d => d.IdTipoVista)
                    .HasConstraintName("FK_T_SesionConfigurarVideo_T_TipoVista");
            });

            modelBuilder.Entity<TSesionGuardado>(entity =>
            {
                entity.ToTable("T_SesionGuardado", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre).HasMaxLength(20);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSexo>(entity =>
            {
                entity.ToTable("T_Sexo", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSilaboSeccion>(entity =>
            {
                entity.ToTable("T_SilaboSeccion", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSistemaPensionario>(entity =>
            {
                entity.ToTable("T_SistemaPensionario", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSmsConfiguracionEnvio>(entity =>
            {
                entity.ToTable("T_SmsConfiguracionEnvio", "mkt");

                entity.HasIndex(e => new { e.IdConjuntoListaDetalle, e.Id, e.Estado })
                    .HasName("INC_T_SmsConfiguracionEnvio_PorEstado_PorId");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoListaDetalleNavigation)
                    .WithMany(p => p.TSmsConfiguracionEnvio)
                    .HasForeignKey(d => d.IdConjuntoListaDetalle)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SmsConfiguracionEnvio_T_ConjuntoListaDetalle");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TSmsConfiguracionEnvio)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_SmsConfiguracionEnvio_T_Personal");

                entity.HasOne(d => d.IdPlantillaNavigation)
                    .WithMany(p => p.TSmsConfiguracionEnvio)
                    .HasForeignKey(d => d.IdPlantilla)
                    .HasConstraintName("FK_T_SmsConfiguracionEnvio_T_Plantilla");
            });

            modelBuilder.Entity<TSmsConfiguracionEnvioDetalle>(entity =>
            {
                entity.ToTable("T_SmsConfiguracionEnvioDetalle", "mkt");

                entity.HasIndex(e => new { e.Mensaje, e.IdConjuntoListaResultado, e.IdSmsConfiguracionLogEjecucion, e.EnviadoCorrectamente, e.FechaCreacion })
                    .HasName("INC_T_SmsConfiguracionEnvioDetalle_PorIdConjuntoListaResultado_PorIdWhatsAppConfiguracionLogEjecucion");

                entity.HasIndex(e => new { e.EnviadoCorrectamente, e.FechaCreacion, e.IdSmsConfiguracionLogEjecucion, e.Mensaje, e.UsuarioCreacion, e.IdConjuntoListaResultado })
                    .HasName("INC_T_SmsConfiguracionEnvioDetalle_IdConjuntoListaResultado");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje).HasColumnType("varchar(max)");

                entity.Property(e => e.MensajeError)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoListaResultadoNavigation)
                    .WithMany(p => p.TSmsConfiguracionEnvioDetalle)
                    .HasForeignKey(d => d.IdConjuntoListaResultado)
                    .HasConstraintName("FK_T_SmsConfiguracionEnvioDetalle_T_ConjuntoListaResultado");

                entity.HasOne(d => d.IdSmsConfiguracionLogEjecucionNavigation)
                    .WithMany(p => p.TSmsConfiguracionEnvioDetalle)
                    .HasForeignKey(d => d.IdSmsConfiguracionLogEjecucion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_SmsConfiguracionEnvioDetalle_T_WhatsAppConfiguracionLogEjecucion");
            });

            modelBuilder.Entity<TSmsConfiguracionLogEjecucion>(entity =>
            {
                entity.ToTable("T_SmsConfiguracionLogEjecucion", "mkt");

                entity.HasIndex(e => e.IdSmsConfiguracionEnvio)
                    .HasName("INC_T_SmsConfiguracionLogEjecucion_PorIdSmsConfiguracionEnvio");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSmsDesuscrito>(entity =>
            {
                entity.ToTable("T_SmsDesuscrito", "mkt");

                entity.HasIndex(e => new { e.EsActivo, e.Estado, e.NumeroTelefono })
                    .HasName("INC_T_SmsDesuscrito_PorNumeroTelefono");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NumeroTelefono)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSmsMensajeEnviado>(entity =>
            {
                entity.ToTable("T_SmsMensajeEnviado", "mkt");

                entity.HasIndex(e => new { e.FechaCreacion, e.IdPersonal, e.Mensaje, e.Celular })
                    .HasName("SmsMensajeEnviado_Celular");

                entity.HasIndex(e => new { e.Celular, e.IdAlumno, e.IdPais, e.IdPersonal, e.Mensaje, e.ParteMensaje, e.FechaCreacion })
                    .HasName("INC_T_SmsMensajeEnviado_FechaCreacion");

                entity.Property(e => e.Celular)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSmsMensajeRecibido>(entity =>
            {
                entity.ToTable("T_SmsMensajeRecibido", "mkt");

                entity.Property(e => e.EstadoMensaje)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.Imsi)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePuerto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroTelefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Puerto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSolicitudCertificadoFisico>(entity =>
            {
                entity.ToTable("T_SolicitudCertificadoFisico", "mkt");

                entity.Property(e => e.CodigoSeguimiento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoSeguimientoEnvio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoCourier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEntregaCourier).HasColumnType("datetime");

                entity.Property(e => e.FechaEntregaEstimada).HasColumnType("datetime");

                entity.Property(e => e.FechaEntregaReal).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEstadoCertificadoFisicoNavigation)
                    .WithMany(p => p.TSolicitudCertificadoFisico)
                    .HasForeignKey(d => d.IdEstadoCertificadoFisico)
                    .HasConstraintName("FK_T_SolicitudCertificadoFisico_T_EstadoCertificadoFisico");

                entity.HasOne(d => d.IdFurNavigation)
                    .WithMany(p => p.TSolicitudCertificadoFisico)
                    .HasForeignKey(d => d.IdFur)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SolicitudCertificadoFisico_T_Fur");

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TSolicitudCertificadoFisico)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FK_T_SolicitudCertificadoFisico_T_MatriculaCabecera");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TSolicitudCertificadoFisico)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_SolicitudCertificadoFisico_T_Personal");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.TSolicitudCertificadoFisico)
                    .HasForeignKey(d => d.IdProveedor)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SolicitudCertificadoFisico_T_Proveedor");
            });

            modelBuilder.Entity<TSolicitudOperaciones>(entity =>
            {
                entity.ToTable("T_SolicitudOperaciones", "ope");

                entity.HasIndex(e => new { e.IdOportunidad, e.IdTipoSolicitudOperaciones, e.Estado })
                    .HasName("INC_T_SolicitudOperaciones_PorIdTipoSolicitudOperaciones_PorEstado");

                entity.Property(e => e.ComentarioSolicitante)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContentType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAprobacion).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.IdPersonalAprobacion).HasColumnName("IdPersonal_Aprobacion");

                entity.Property(e => e.IdPersonalSolicitante).HasColumnName("IdPersonal_Solicitante");

                entity.Property(e => e.NombreArchivo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Observacion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionEncargado)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAnterior)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNuevo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSolicitudOperacionesAccesoTemporalDetalle>(entity =>
            {
                entity.ToTable("T_SolicitudOperacionesAccesoTemporalDetalle", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPespecificoNavigation)
                    .WithMany(p => p.TSolicitudOperacionesAccesoTemporalDetalle)
                    .HasForeignKey(d => d.IdPespecifico)
                    .HasConstraintName("FK_T_SolicitudOperacionesAccesoTemporalDetalle_T_PEspecifico");

                entity.HasOne(d => d.IdSolicitudOperacionesNavigation)
                    .WithMany(p => p.TSolicitudOperacionesAccesoTemporalDetalle)
                    .HasForeignKey(d => d.IdSolicitudOperaciones)
                    .HasConstraintName("FK_T_SolicitudOperacionesAccesoTemporalDetalle_T_SolicitudOperaciones");
            });

            modelBuilder.Entity<TSolucion>(entity =>
            {
                entity.ToTable("T_Solucion", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSolucionCliente>(entity =>
            {
                entity.ToTable("T_SolucionCliente", "com");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSolucionClienteByActividad>(entity =>
            {
                entity.ToTable("T_SolucionClienteByActividad", "com");

                entity.HasIndex(e => new { e.IdOportunidad, e.IdActividadDetalle })
                    .HasName("INC_T_SolucionClienteByActividad_PorIdOportunidadPorIdActividadDetalle");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.OtroProblema)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOportunidadNavigation)
                    .WithMany(p => p.TSolucionClienteByActividad)
                    .HasForeignKey(d => d.IdOportunidad)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_SolucionClienteByActividad_T_Oportunidad");
            });

            modelBuilder.Entity<TSubArea>(entity =>
            {
                entity.ToTable("T_SubArea", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSubAreaCampaniaMailingDetalle>(entity =>
            {
                entity.ToTable("T_SubAreaCampaniaMailingDetalle", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCampaniaMailingDetalleNavigation)
                    .WithMany(p => p.TSubAreaCampaniaMailingDetalle)
                    .HasForeignKey(d => d.IdCampaniaMailingDetalle)
                    .HasConstraintName("FK_T_SubAreaCampaniaMailingDetalle_T_CampaniaMailingDetalle");

                entity.HasOne(d => d.IdSubAreaCapacitacionNavigation)
                    .WithMany(p => p.TSubAreaCampaniaMailingDetalle)
                    .HasForeignKey(d => d.IdSubAreaCapacitacion)
                    .HasConstraintName("FK_T_SubAreaCampaniaMailingDetalle_T_SubAreaCapacitacion");
            });

            modelBuilder.Entity<TSubAreaCampoEtiqueta>(entity =>
            {
                entity.ToTable("T_SubAreaCampoEtiqueta", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaCampoEtiquetaNavigation)
                    .WithMany(p => p.TSubAreaCampoEtiqueta)
                    .HasForeignKey(d => d.IdAreaCampoEtiqueta)
                    .HasConstraintName("FK_T_SubAreaCampoEtiqueta_T_AreaCampoEtiqueta");
            });

            modelBuilder.Entity<TSubAreaCapacitacion>(entity =>
            {
                entity.ToTable("T_SubAreaCapacitacion", "pla");

                entity.Property(e => e.AliasFacebook)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionHtml)
                    .HasColumnName("DescripcionHTML")
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSubAreaParametroSeoPw>(entity =>
            {
                entity.ToTable("T_SubAreaParametroSeo_Pw", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdParametroSeoPwNavigation)
                    .WithMany(p => p.TSubAreaParametroSeoPw)
                    .HasForeignKey(d => d.IdParametroSeoPw)
                    .HasConstraintName("FK_T_SubAreaParametroSeo_Pw_T_ParametroSEO_PW");

                entity.HasOne(d => d.IdSubAreaCapacitacionNavigation)
                    .WithMany(p => p.TSubAreaParametroSeoPw)
                    .HasForeignKey(d => d.IdSubAreaCapacitacion)
                    .HasConstraintName("FK_T_SubAreaParametroSeo_Pw_T_SubAreaCapacitacion");
            });

            modelBuilder.Entity<TSubCategoriaDato>(entity =>
            {
                entity.ToTable("T_SubCategoriaDato", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSubCategoriaInteraccion>(entity =>
            {
                entity.ToTable("T_SubCategoriaInteraccion", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSubEstadoMatriculaEstandar>(entity =>
            {
                entity.ToTable("T_SubEstadoMatriculaEstandar", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSubNivelCc>(entity =>
            {
                entity.ToTable("T_SubNivelCC", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdAreaCc).HasColumnName("IdAreaCC");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSubTipoMovimientoCaja>(entity =>
            {
                entity.ToTable("T_SubTipoMovimientoCaja", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSunatDocumento>(entity =>
            {
                entity.ToTable("T_SunatDocumento", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSuscripcionProgramaGeneral>(entity =>
            {
                entity.ToTable("T_SuscripcionProgramaGeneral", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TSuscripcionProgramaGeneral)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_SuscripcionProgramaGeneral_T_PGeneral");
            });

            modelBuilder.Entity<TTableroComercialCategoriaAsesor>(entity =>
            {
                entity.ToTable("T_TableroComercialCategoriaAsesor", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdMonedaPremio).HasColumnName("IdMoneda_Premio");

                entity.Property(e => e.IdMonedaVenta).HasColumnName("IdMoneda_Venta");

                entity.Property(e => e.IdTableroComercialUnidadVenta).HasColumnName("IdTableroComercialUnidad_Venta");

                entity.Property(e => e.MontoPremio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoVenta).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTableroComercialMejorMes>(entity =>
            {
                entity.ToTable("T_TableroComercialMejorMes", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Monto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTableroComercialUnidad>(entity =>
            {
                entity.ToTable("T_TableroComercialUnidad", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Simbolo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTagParametroSeoPw>(entity =>
            {
                entity.ToTable("T_TagParametroSEO_PW", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdParametroSeopw).HasColumnName("IdParametroSEOPW");

                entity.Property(e => e.IdTagPw).HasColumnName("IdTagPW");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdParametroSeopwNavigation)
                    .WithMany(p => p.TTagParametroSeoPw)
                    .HasForeignKey(d => d.IdParametroSeopw)
                    .HasConstraintName("FK_T_TagParametroSEO_PW_T_ParametroSEO_PW");

                entity.HasOne(d => d.IdTagPwNavigation)
                    .WithMany(p => p.TTagParametroSeoPw)
                    .HasForeignKey(d => d.IdTagPw)
                    .HasConstraintName("FK_T_TagParametroSEO_PW_T_Tag_PW");
            });

            modelBuilder.Entity<TTagPw>(entity =>
            {
                entity.ToTable("T_Tag_PW", "pla");

                entity.Property(e => e.Codigo).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTamanioEmpresa>(entity =>
            {
                entity.ToTable("T_TamanioEmpresa", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTarifario>(entity =>
            {
                entity.ToTable("T_Tarifario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTarifarioDetalleAlterno>(entity =>
            {
                entity.ToTable("T_TarifarioDetalleAlterno", "mkt");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Estados)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Monto).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.SubEstados)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCantidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTasaConversionHistorica>(entity =>
            {
                entity.ToTable("T_TasaConversionHistorica", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TasaConversion).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorVariable)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Variable)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTasaConversionHistoricaAformacion>(entity =>
            {
                entity.ToTable("T_TasaConversionHistoricaAFormacion", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TasaConversion).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorVariable)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTasaConversionHistoricaAtrabajo>(entity =>
            {
                entity.ToTable("T_TasaConversionHistoricaATrabajo", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TasaConversion).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorVariable)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTasaConversionHistoricaBeta>(entity =>
            {
                entity.ToTable("T_TasaConversionHistoricaBeta", "com");

                entity.HasIndex(e => e.FechaCierre)
                    .HasName("NonClusteredIndex-20190727-135411_fechacierre");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCierre).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.FechaPrimerContacto).HasColumnType("datetime");

                entity.Property(e => e.FechaReasignacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistroCampania).HasColumnType("datetime");

                entity.Property(e => e.IdAformacion).HasColumnName("IdAFormacion");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.ProbabilidadDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReasignadoIp).HasColumnName("ReasignadoIP");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAformacion).HasColumnName("ValorAFormacion");

                entity.Property(e => e.ValorAtrabajo).HasColumnName("ValorATrabajo");
            });

            modelBuilder.Entity<TTasaConversionHistoricaCargo>(entity =>
            {
                entity.ToTable("T_TasaConversionHistoricaCargo", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TasaConversion).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorVariable)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTasaConversionHistoricaCategoriaOrigen>(entity =>
            {
                entity.ToTable("T_TasaConversionHistoricaCategoriaOrigen", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TasaConversion).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorVariable)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTasaConversionHistoricaIndustria>(entity =>
            {
                entity.ToTable("T_TasaConversionHistoricaIndustria", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TasaConversion).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorVariable)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTasaConversionHistoricaPais>(entity =>
            {
                entity.ToTable("T_TasaConversionHistoricaPais", "com");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPespecifico).HasColumnName("IdPEspecifico");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TasaConversion).HasColumnType("decimal(4, 3)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorVariable)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTerminoUsoSitioWebPw>(entity =>
            {
                entity.ToTable("T_TerminoUsoSitioWeb_PW", "pla");

                entity.Property(e => e.CodigoIsopais)
                    .IsRequired()
                    .HasColumnName("CodigoISOPais")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contenido).IsRequired();

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePais)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTesteoAb>(entity =>
            {
                entity.ToTable("T_TesteoAB", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePlantilla)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTestimonioPrograma>(entity =>
            {
                entity.ToTable("T_TestimonioPrograma", "pla");

                entity.Property(e => e.Alumno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.Pregunta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Testimonio).IsRequired();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTiempoCapacitacion>(entity =>
            {
                entity.ToTable("T_TiempoCapacitacion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTiempoFrecuencia>(entity =>
            {
                entity.ToTable("T_TiempoFrecuencia", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTiempoLibre>(entity =>
            {
                entity.ToTable("T_TiempoLibre", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Tipo).HasColumnName("TIpo");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTiempoLibreTipo>(entity =>
            {
                entity.ToTable("T_TiempoLibreTipo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTiempoRestriccionOcurrencia>(entity =>
            {
                entity.ToTable("T_TiempoRestriccionOcurrencia", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoAmbiente>(entity =>
            {
                entity.ToTable("T_TipoAmbiente", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoAsociacion>(entity =>
            {
                entity.ToTable("T_TipoAsociacion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCambio>(entity =>
            {
                entity.ToTable("T_TipoCambio", "fin");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCambioCol>(entity =>
            {
                entity.ToTable("T_TipoCambioCol", "fin");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCambioEntreMoneda>(entity =>
            {
                entity.ToTable("T_TipoCambioEntreMoneda", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCambioMoneda>(entity =>
            {
                entity.ToTable("T_TipoCambioMoneda", "fin");

                entity.Property(e => e.DolarAmoneda).HasColumnName("DolarAMoneda");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.MonedaAdolar).HasColumnName("MonedaADolar");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMonedaNavigation)
                    .WithMany(p => p.TTipoCambioMoneda)
                    .HasForeignKey(d => d.IdMoneda)
                    .HasConstraintName("FK_T_TipoCambioMoneda_T_Moneda");

                entity.HasOne(d => d.IdTipoCambioColNavigation)
                    .WithMany(p => p.TTipoCambioMoneda)
                    .HasForeignKey(d => d.IdTipoCambioCol)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_TipoCambioMoneda_T_TipoCambioCol");
            });

            modelBuilder.Entity<TTipoCampoGlobal>(entity =>
            {
                entity.ToTable("T_TipoCampoGlobal", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCapacitacionMoodle>(entity =>
            {
                entity.ToTable("T_TipoCapacitacion_Moodle", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCategoriaOrigen>(entity =>
            {
                entity.ToTable("T_TipoCategoriaOrigen", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCentroEstudio>(entity =>
            {
                entity.ToTable("T_TipoCentroEstudio", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCompensacionPersonal>(entity =>
            {
                entity.ToTable("T_TipoCompensacionPersonal", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCompetenciaTecnica>(entity =>
            {
                entity.ToTable("T_TipoCompetenciaTecnica", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoComprobante>(entity =>
            {
                entity.ToTable("T_TipoComprobante", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoComprobanteDetalle>(entity =>
            {
                entity.ToTable("T_TipoComprobanteDetalle", "fin");

                entity.Property(e => e.Campo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoContrato>(entity =>
            {
                entity.ToTable("T_TipoContrato", "gp");

                entity.Property(e => e.Comentario)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoContribuyente>(entity =>
            {
                entity.ToTable("T_TipoContribuyente", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoCuentaBanco>(entity =>
            {
                entity.ToTable("T_TipoCuentaBanco", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDato>(entity =>
            {
                entity.ToTable("T_TipoDato", "mkt");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDatoMeta>(entity =>
            {
                entity.ToTable("T_TipoDatoMeta", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdFaseOportunidadDestino).HasColumnName("IdFaseOportunidad_Destino");

                entity.Property(e => e.IdFaseOportunidadOrigen).HasColumnName("IdFaseOportunidad_Origen");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTipoDatoNavigation)
                    .WithMany(p => p.TTipoDatoMeta)
                    .HasForeignKey(d => d.IdTipoDato)
                    .HasConstraintName("FK_T_TipoDatoMeta_T_TipoDato");
            });

            modelBuilder.Entity<TTipoDescuento>(entity =>
            {
                entity.ToTable("T_TipoDescuento", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDescuentoAsesorCoordinadorPw>(entity =>
            {
                entity.ToTable("T_TipoDescuentoAsesorCoordinador_PW", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTipoDescuentoNavigation)
                    .WithMany(p => p.TTipoDescuentoAsesorCoordinadorPw)
                    .HasForeignKey(d => d.IdTipoDescuento)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_TipoDescuentoAsesorCoordinador_PW_T_TipoDescuento");
            });

            modelBuilder.Entity<TTipoDisponibilidadPersonal>(entity =>
            {
                entity.ToTable("T_TipoDisponibilidadPersonal", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDocumentacionPersonal>(entity =>
            {
                entity.ToTable("T_TipoDocumentacionPersonal", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDocumento>(entity =>
            {
                entity.ToTable("T_TipoDocumento", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDocumentoAlumno>(entity =>
            {
                entity.ToTable("T_TipoDocumentoAlumno", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDocumentoAlumnoEstadoMatricula>(entity =>
            {
                entity.ToTable("T_TipoDocumentoAlumnoEstadoMatricula", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDocumentoAlumnoModalidadCurso>(entity =>
            {
                entity.ToTable("T_TipoDocumentoAlumnoModalidadCurso", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDocumentoAlumnoPgeneral>(entity =>
            {
                entity.ToTable("T_TipoDocumentoAlumnoPGeneral", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDocumentoAlumnoSubEstadoMatricula>(entity =>
            {
                entity.ToTable("T_TipoDocumentoAlumnoSubEstadoMatricula", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoDocumentoPersonal>(entity =>
            {
                entity.ToTable("T_TipoDocumentoPersonal", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoEmpresa>(entity =>
            {
                entity.ToTable("T_TipoEmpresa", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoEnvioAutomatico>(entity =>
            {
                entity.ToTable("T_TipoEnvioAutomatico", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoEnvioCorreo>(entity =>
            {
                entity.ToTable("T_TipoEnvioCorreo", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoEnvioPrograma>(entity =>
            {
                entity.ToTable("T_TipoEnvioPrograma", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoEstadoRiesgo>(entity =>
            {
                entity.ToTable("T_TipoEstadoRiesgo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoEstudio>(entity =>
            {
                entity.ToTable("T_TipoEstudio", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoEtiqueta>(entity =>
            {
                entity.ToTable("T_TipoEtiqueta", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoEvaluacionTrabajo>(entity =>
            {
                entity.ToTable("T_TipoEvaluacionTrabajo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoExperiencia>(entity =>
            {
                entity.ToTable("T_TipoExperiencia", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoFactor>(entity =>
            {
                entity.ToTable("T_TipoFactor", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoFactorCentil>(entity =>
            {
                entity.ToTable("T_TipoFactorCentil", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoFormacion>(entity =>
            {
                entity.ToTable("T_TipoFormacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoFormulario>(entity =>
            {
                entity.ToTable("T_TipoFormulario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoIdentificador>(entity =>
            {
                entity.ToTable("T_TipoIdentificador", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoImpuesto>(entity =>
            {
                entity.ToTable("T_TipoImpuesto", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoInteracccion>(entity =>
            {
                entity.ToTable("T_TipoInteracccion", "mkt");

                entity.Property(e => e.Canal)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoInteraccionGeneral>(entity =>
            {
                entity.ToTable("T_TipoInteraccionGeneral", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoInteraccionMandril>(entity =>
            {
                entity.ToTable("T_TipoInteraccionMandril", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoInteraccionPortalFormulario>(entity =>
            {
                entity.ToTable("T_TipoInteraccionPortalFormulario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoMarcador>(entity =>
            {
                entity.ToTable("T_TipoMarcador", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoMensajeMessenger>(entity =>
            {
                entity.ToTable("T_TipoMensajeMessenger", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoModalidad>(entity =>
            {
                entity.ToTable("T_TipoModalidad", "pla");

                entity.Property(e => e.Abreviatura)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionCorta)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ImagenPrincipal)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ImagenPrincipalAlf)
                    .IsRequired()
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.ImagenSecundaria)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ImagenSecundariaAlf)
                    .IsRequired()
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Preguntas)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoMovimientoCaja>(entity =>
            {
                entity.ToTable("T_TipoMovimientoCaja", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoPago>(entity =>
            {
                entity.ToTable("T_TipoPago", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoPagoCategoria>(entity =>
            {
                entity.ToTable("T_TipoPagoCategoria", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCategoriaProgramaNavigation)
                    .WithMany(p => p.TTipoPagoCategoria)
                    .HasForeignKey(d => d.IdCategoriaPrograma)
                    .HasConstraintName("FK_T_TipoPagoCategoria_T_CategoriaPrograma");

                entity.HasOne(d => d.IdModoPagoNavigation)
                    .WithMany(p => p.TTipoPagoCategoria)
                    .HasForeignKey(d => d.IdModoPago)
                    .HasConstraintName("FK_T_TipoPagoCategoria_T_ModoPago");

                entity.HasOne(d => d.IdTipoPagoNavigation)
                    .WithMany(p => p.TTipoPagoCategoria)
                    .HasForeignKey(d => d.IdTipoPago)
                    .HasConstraintName("FK_T_TipoPagoCategoria_T_TipoPago");
            });

            modelBuilder.Entity<TTipoPagoRemuneracion>(entity =>
            {
                entity.ToTable("T_TipoPagoRemuneracion", "gp");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoPerfil>(entity =>
            {
                entity.ToTable("T_TipoPerfil", "gp");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoPersona>(entity =>
            {
                entity.ToTable("T_TipoPersona", "conf");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTablaOriginal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoPreguntaEvaluacion>(entity =>
            {
                entity.ToTable("T_TipoPreguntaEvaluacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoPrograma>(entity =>
            {
                entity.ToTable("T_TipoPrograma", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoPromedio>(entity =>
            {
                entity.ToTable("T_TipoPromedio", "pla");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoPublicidadWeb>(entity =>
            {
                entity.ToTable("T_TipoPublicidadWeb", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoReclamoAlumno>(entity =>
            {
                entity.ToTable("T_TipoReclamoAlumno", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoRemuneracionAdicional>(entity =>
            {
                entity.ToTable("T_TipoRemuneracionAdicional", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoRespuesta>(entity =>
            {
                entity.ToTable("T_TipoRespuesta", "gp");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoRespuestaCalificacion>(entity =>
            {
                entity.ToTable("T_TipoRespuestaCalificacion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoRevisionPw>(entity =>
            {
                entity.ToTable("T_TipoRevision_PW", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoSangre>(entity =>
            {
                entity.ToTable("T_TipoSangre", "gp");

                entity.Property(e => e.Comentario)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.TipoSangre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoSeguimientoAlumnoCategoria>(entity =>
            {
                entity.ToTable("T_TipoSeguimientoAlumnoCategoria", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoServicio>(entity =>
            {
                entity.ToTable("T_TipoServicio", "fin");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoSolicitudOperaciones>(entity =>
            {
                entity.ToTable("T_TipoSolicitudOperaciones", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoTemaProgramaCapacitacion>(entity =>
            {
                entity.ToTable("T_TipoTemaProgramaCapacitacion", "pla");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTipoVista>(entity =>
            {
                entity.ToTable("T_TipoVista", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTitulo>(entity =>
            {
                entity.ToTable("T_Titulo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTokenPostulanteProcesoSeleccion>(entity =>
            {
                entity.ToTable("T_TokenPostulanteProcesoSeleccion", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvioAccesos).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Token)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TokenHash)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTroncalCiudad>(entity =>
            {
                entity.ToTable("T_TroncalCiudad", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTroncalPais>(entity =>
            {
                entity.ToTable("T_TroncalPais", "pla");

                entity.Property(e => e.DenominacionMoneda)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTroncalPartner>(entity =>
            {
                entity.ToTable("T_TroncalPartner", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTroncalPgeneral>(entity =>
            {
                entity.ToTable("T_TroncalPGeneral", "pla");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TUnsuscribedMailchimp>(entity =>
            {
                entity.ToTable("T_UnsuscribedMailchimp", "mkt");

                entity.Property(e => e.CampaniaId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.FechaUnsuscribed)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ListaId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TUrlBlockStorage>(entity =>
            {
                entity.ToTable("T_UrlBlockStorage", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruta)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TUrlContenedorPermisos>(entity =>
            {
                entity.ToTable("T_UrlContenedorPermisos", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalAreaTrabajoNavigation)
                    .WithMany(p => p.TUrlContenedorPermisos)
                    .HasForeignKey(d => d.IdPersonalAreaTrabajo)
                    .HasConstraintName("FK_T_UrlContenedorPermisos_T_PersonalAreaTrabajo");

                entity.HasOne(d => d.IdUrlBlockStorageNavigation)
                    .WithMany(p => p.TUrlContenedorPermisos)
                    .HasForeignKey(d => d.IdUrlBlockStorage)
                    .HasConstraintName("FK_T_UrlContenedorPermisos_T_UrlBlockStorage");
            });

            modelBuilder.Entity<TUrlSubContenedor>(entity =>
            {
                entity.ToTable("T_UrlSubContenedor", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Ruta)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdUrlBlockStorageNavigation)
                    .WithMany(p => p.TUrlSubContenedor)
                    .HasForeignKey(d => d.IdUrlBlockStorage)
                    .HasConstraintName("FK_T_UrlSubContenedor_T_UrlBlockStorage");
            });

            modelBuilder.Entity<TUsuario>(entity =>
            {
                entity.ToTable("T_Usuario", "conf");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoAreaTrabajo)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TUsuario)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_Usuario_T_Personal");

                entity.HasOne(d => d.IdUsuarioRolNavigation)
                    .WithMany(p => p.TUsuario)
                    .HasForeignKey(d => d.IdUsuarioRol)
                    .HasConstraintName("FK_T_Usuario_T_UsuarioRol");
            });

            modelBuilder.Entity<TUsuarioRol>(entity =>
            {
                entity.ToTable("T_UsuarioRol", "conf");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TUsuarioZopim>(entity =>
            {
                entity.ToTable("T_UsuarioZopim", "pla");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TValidarCiudad>(entity =>
            {
                entity.ToTable("T_ValidarCiudad", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TVersionPrograma>(entity =>
            {
                entity.ToTable("T_VersionPrograma", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TVisualizacionBsPlay>(entity =>
            {
                entity.ToTable("T_VisualizacionBsPlay", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TVueloTipoTramo>(entity =>
            {
                entity.ToTable("T_VueloTipoTramo", "pla");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWebhookRequestLog>(entity =>
            {
                entity.ToTable("T_WebhookRequest_Log", "com");

                entity.Property(e => e.Content).IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Verb)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWebinar>(entity =>
            {
                entity.ToTable("T_Webinar", "ope");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.LinkAulaVirtual)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCursoCompleto)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdExpositorNavigation)
                    .WithMany(p => p.TWebinar)
                    .HasForeignKey(d => d.IdExpositor)
                    .HasConstraintName("FK_T_Webinar_T_Expositor");

                entity.HasOne(d => d.IdWebinarCategoriaConfirmacionAsistenciaNavigation)
                    .WithMany(p => p.TWebinar)
                    .HasForeignKey(d => d.IdWebinarCategoriaConfirmacionAsistencia)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_Webinar_T_WebinarCategoriaConfirmacionAsistencia");
            });

            modelBuilder.Entity<TWebinarAsistencia>(entity =>
            {
                entity.ToTable("T_WebinarAsistencia", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TWebinarAsistencia)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FK_T_WebinarAsistencia_T_MatriculaCabecera");

                entity.HasOne(d => d.IdWebinarDetalleNavigation)
                    .WithMany(p => p.TWebinarAsistencia)
                    .HasForeignKey(d => d.IdWebinarDetalle)
                    .HasConstraintName("FK_T_WebinarAsistencia_T_WebinarDetalle");
            });

            modelBuilder.Entity<TWebinarCategoriaConfirmacionAsistencia>(entity =>
            {
                entity.ToTable("T_WebinarCategoriaConfirmacionAsistencia", "ope");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlImagen)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWebinarCentroCosto>(entity =>
            {
                entity.ToTable("T_WebinarCentroCosto", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCentroCostoNavigation)
                    .WithMany(p => p.TWebinarCentroCosto)
                    .HasForeignKey(d => d.IdCentroCosto)
                    .HasConstraintName("FK_T_WebinarCentroCosto_T_CentroCosto");

                entity.HasOne(d => d.IdWebinarNavigation)
                    .WithMany(p => p.TWebinarCentroCosto)
                    .HasForeignKey(d => d.IdWebinar)
                    .HasConstraintName("FK_T_WebinarCentroCosto_T_Webinar");
            });

            modelBuilder.Entity<TWebinarDetalle>(entity =>
            {
                entity.ToTable("T_WebinarDetalle", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Link)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdWebinarNavigation)
                    .WithMany(p => p.TWebinarDetalle)
                    .HasForeignKey(d => d.IdWebinar)
                    .HasConstraintName("FK_T_WebinarDetalle_T_Webinar");
            });

            modelBuilder.Entity<TWebinarExcluir>(entity =>
            {
                entity.ToTable("T_WebinarExcluir", "ope");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMatriculaCabeceraNavigation)
                    .WithMany(p => p.TWebinarExcluir)
                    .HasForeignKey(d => d.IdMatriculaCabecera)
                    .HasConstraintName("FK_T_WebinarExcluir_T_MatriculaCabecera");
            });

            modelBuilder.Entity<TWhatsAppConfiguracion>(entity =>
            {
                entity.ToTable("T_WhatsAppConfiguracion", "mkt");

                entity.Property(e => e.Certificado).IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IpHost)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Numero)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UrlWhatsApp).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vname)
                    .HasColumnName("VName")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPaisNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracion)
                    .HasForeignKey(d => d.IdPais)
                    .HasConstraintName("FK_T_WhatsAppConfiguracion_T_Pais");
            });

            modelBuilder.Entity<TWhatsAppConfiguracionEnvio>(entity =>
            {
                entity.ToTable("T_WhatsAppConfiguracionEnvio", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaDesactivacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoListaDetalleNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionEnvio)
                    .HasForeignKey(d => d.IdConjuntoListaDetalle)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionEnvio_T_ConjuntoListaDetalle");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionEnvio)
                    .HasForeignKey(d => d.IdPersonal)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionEnvio_T_Personal");

                entity.HasOne(d => d.IdPlantillaNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionEnvio)
                    .HasForeignKey(d => d.IdPlantilla)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionEnvio_T_Plantilla");
            });

            modelBuilder.Entity<TWhatsAppConfiguracionEnvioDetalle>(entity =>
            {
                entity.ToTable("T_WhatsAppConfiguracionEnvioDetalle", "mkt");

                entity.HasIndex(e => new { e.FechaCreacion, e.Mensaje, e.WhatsAppId })
                    .HasName("WhatsAppConfiguracionEnvioDetalle_WhatsAppId");

                entity.HasIndex(e => new { e.IdConjuntoListaResultado, e.EnviadoCorrectamente, e.FechaCreacion })
                    .HasName("INC_T_WhtsAppConfiguracionEnvioDetalle_PorEnviadoCorrectamente_PorFechaCreacion");

                entity.HasIndex(e => new { e.FechaCreacion, e.IdConjuntoListaResultado, e.EnviadoCorrectamente, e.DescartarCrearOportunidad, e.UsuarioCreacion, e.IdPrioridadMailChimpListaCorreo })
                    .HasName("INC_T_WhatsAppConfiguracionEnvioDetalle_PorEnviadoCorrectamente");

                entity.HasIndex(e => new { e.Mensaje, e.WhatsAppId, e.IdConjuntoListaResultado, e.IdWhatsAppConfiguracionLogEjecucion, e.EnviadoCorrectamente, e.FechaCreacion })
                    .HasName("INC_T_WhatsAppConfiguracionEnvioDetalle_PorIdConjuntoListaResultado_PorIdWhatsAppConfiguracionLogEjecucion");

                entity.HasIndex(e => new { e.DescartarCrearOportunidad, e.EnviadoCorrectamente, e.FechaCreacion, e.IdWhatsAppConfiguracionLogEjecucion, e.Mensaje, e.UsuarioCreacion, e.WhatsAppId, e.IdConjuntoListaResultado })
                    .HasName("INC_T_WhatsAppConfiguracionEnvioDetalle_IdConjuntoListaResultado");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Mensaje).HasColumnType("varchar(max)");

                entity.Property(e => e.MensajeError)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WhatsAppId)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdConjuntoListaResultadoNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionEnvioDetalle)
                    .HasForeignKey(d => d.IdConjuntoListaResultado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionEnvioDetalle_T_ConjuntoListaResultado");

                entity.HasOne(d => d.IdPrioridadMailChimpListaCorreoNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionEnvioDetalle)
                    .HasForeignKey(d => d.IdPrioridadMailChimpListaCorreo)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionEnvioDetalle_T_PrioridadMailChimpListaCorreo");

                entity.HasOne(d => d.IdWhatsAppConfiguracionLogEjecucionNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionEnvioDetalle)
                    .HasForeignKey(d => d.IdWhatsAppConfiguracionLogEjecucion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionEnvioDetalle_T_WhatsAppConfiguracionLogEjecucion");
            });

            modelBuilder.Entity<TWhatsAppConfiguracionEnvioDetalleOportunidad>(entity =>
            {
                entity.ToTable("T_WhatsAppConfiguracionEnvioDetalleOportunidad", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWhatsAppConfiguracionEnvioPorPrograma>(entity =>
            {
                entity.ToTable("T_WhatsAppConfiguracionEnvioPorPrograma", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPgeneralNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionEnvioPorPrograma)
                    .HasForeignKey(d => d.IdPgeneral)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionEnvioPorPrograma_T_PGeneral");

                entity.HasOne(d => d.IdTipoEnvioProgramaNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionEnvioPorPrograma)
                    .HasForeignKey(d => d.IdTipoEnvioPrograma)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionEnvioPorPrograma_T_TipoEnvioPrograma");

                entity.HasOne(d => d.IdWhatsAppConfiguracionEnvioNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionEnvioPorPrograma)
                    .HasForeignKey(d => d.IdWhatsAppConfiguracionEnvio)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionEnvioPorPrograma_T_WhatsAppConfiguracionEnvio");
            });

            modelBuilder.Entity<TWhatsAppConfiguracionLogEjecucion>(entity =>
            {
                entity.ToTable("T_WhatsAppConfiguracionLogEjecucion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdWhatsAppConfiguracionEnvioNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionLogEjecucion)
                    .HasForeignKey(d => d.IdWhatsAppConfiguracionEnvio)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionLogEjecucion_T_WhatsAppConfiguracionEnvio");
            });

            modelBuilder.Entity<TWhatsAppConfiguracionPreEnvio>(entity =>
            {
                entity.ToTable("T_WhatsAppConfiguracionPreEnvio", "mkt");

                entity.Property(e => e.Celular)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.IdPgeneral).HasColumnName("IdPGeneral");

                entity.Property(e => e.MensajeProceso)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObjetoPlantilla)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(3500)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAlumnoNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionPreEnvio)
                    .HasForeignKey(d => d.IdAlumno)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionPreEnvio_T_Alumno");

                entity.HasOne(d => d.IdPaisNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionPreEnvio)
                    .HasForeignKey(d => d.IdPais)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionPreEnvio_T_Pais");

                entity.HasOne(d => d.IdPlantillaNavigation)
                    .WithMany(p => p.TWhatsAppConfiguracionPreEnvio)
                    .HasForeignKey(d => d.IdPlantilla)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_WhatsAppConfiguracionPreEnvio_T_Plantilla");
            });

            modelBuilder.Entity<TWhatsAppDesuscrito>(entity =>
            {
                entity.ToTable("T_WhatsAppDesuscrito", "mkt");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NumeroTelefono)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWhatsAppEstadoMensajeEnviado>(entity =>
            {
                entity.ToTable("T_WhatsAppEstadoMensajeEnviado", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaRecipientId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaTimeStamp)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPaisNavigation)
                    .WithMany(p => p.TWhatsAppEstadoMensajeEnviado)
                    .HasForeignKey(d => d.IdPais)
                    .HasConstraintName("FK_T_WhatsAppEstadoMensajeEnviado_T_Pais");
            });

            modelBuilder.Entity<TWhatsAppEstadoValidacion>(entity =>
            {
                entity.ToTable("T_WhatsAppEstadoValidacion", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWhatsAppMensajeEnviado>(entity =>
            {
                entity.ToTable("T_WhatsAppMensajeEnviado", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaCaption).IsUnicode(false);

                entity.Property(e => e.WaFile).IsUnicode(false);

                entity.Property(e => e.WaFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WaId)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.WaLink).IsUnicode(false);

                entity.Property(e => e.WaMimeType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WaRecipientType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WaSha256).IsUnicode(false);

                entity.Property(e => e.WaTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPaisNavigation)
                    .WithMany(p => p.TWhatsAppMensajeEnviado)
                    .HasForeignKey(d => d.IdPais)
                    .HasConstraintName("FK_T_WhatsAppMensajeEnviado_T_Pais");

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TWhatsAppMensajeEnviado)
                    .HasForeignKey(d => d.IdPersonal)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_WhatsAppMensajeEnviado_T_Personal");
            });

            modelBuilder.Entity<TWhatsAppMensajeEnviadoPostulante>(entity =>
            {
                entity.ToTable("T_WhatsAppMensajeEnviadoPostulante", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaCaption).IsUnicode(false);

                entity.Property(e => e.WaFile).IsUnicode(false);

                entity.Property(e => e.WaFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WaId)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.WaLink).IsUnicode(false);

                entity.Property(e => e.WaMimeType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WaRecipientType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WaSha256).IsUnicode(false);

                entity.Property(e => e.WaTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWhatsAppMensajePublicidad>(entity =>
            {
                entity.ToTable("T_WhatsAppMensajePublicidad", "mkt");

                entity.HasIndex(e => new { e.IdAlumno, e.IdPersonal, e.Celular, e.FechaCreacion })
                    .HasName("WhatsAppMensajePublicidad_Celular_FechaCreacion");

                entity.Property(e => e.Celular)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdWhatsAppConfiguracionEnvioNavigation)
                    .WithMany(p => p.TWhatsAppMensajePublicidad)
                    .HasForeignKey(d => d.IdWhatsAppConfiguracionEnvio)
                    .HasConstraintName("FK_T_WhatsAppMensajePublicidad_T_WhatsAppConfiguracionEnvio");

                entity.HasOne(d => d.IdWhatsAppEstadoValidacionNavigation)
                    .WithMany(p => p.TWhatsAppMensajePublicidad)
                    .HasForeignKey(d => d.IdWhatsAppEstadoValidacion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_WhatsAppMensajePublicidad_T_WhatsAppEstadoValidacion");
            });

            modelBuilder.Entity<TWhatsAppMensajeRecibido>(entity =>
            {
                entity.ToTable("T_WhatsAppMensajeRecibido", "mkt");

                entity.HasIndex(e => e.WaFrom)
                    .HasName("INC_WhatsAppMensajeRecibido_WaFrom");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaCaption).IsUnicode(false);

                entity.Property(e => e.WaFile).IsUnicode(false);

                entity.Property(e => e.WaFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WaFrom)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaId)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.WaIdTypeMensaje)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaMimeType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WaSha256).IsUnicode(false);

                entity.Property(e => e.WaTimeStamp)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.WaType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPaisNavigation)
                    .WithMany(p => p.TWhatsAppMensajeRecibido)
                    .HasForeignKey(d => d.IdPais)
                    .HasConstraintName("FK_T_WhatsAppMensajeRecibido_T_Pais");
            });

            modelBuilder.Entity<TWhatsAppMensajeRecibidoPostulante>(entity =>
            {
                entity.ToTable("T_WhatsAppMensajeRecibidoPostulante", "gp");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaCaption).IsUnicode(false);

                entity.Property(e => e.WaFile).IsUnicode(false);

                entity.Property(e => e.WaFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WaFrom)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaId)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.WaIdTypeMensaje)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaMimeType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WaSha256).IsUnicode(false);

                entity.Property(e => e.WaTimeStamp)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.WaType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWhatsAppNumeroValidado>(entity =>
            {
                entity.ToTable("T_WhatsAppNumeroValidado", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.NumeroCelular)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWhatsAppObjetoSerealizado>(entity =>
            {
                entity.ToTable("T_WhatsAppObjetoSerealizado", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaObjeto).IsUnicode(false);

                entity.HasOne(d => d.IdPaisNavigation)
                    .WithMany(p => p.TWhatsAppObjetoSerealizado)
                    .HasForeignKey(d => d.IdPais)
                    .HasConstraintName("FK_T_WhatsAppObjetoSerealizado_T_Pais");
            });

            modelBuilder.Entity<TWhatsAppPlantillaPorOcurrenciaActividad>(entity =>
            {
                entity.ToTable("T_WhatsAppPlantillaPorOcurrenciaActividad", "com");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOcurrenciaActividadNavigation)
                    .WithMany(p => p.TWhatsAppPlantillaPorOcurrenciaActividad)
                    .HasForeignKey(d => d.IdOcurrenciaActividad)
                    .HasConstraintName("FK_T_WhatsAppPlantillaPorOcurrenciaActividad_T_OcurrenciaActividad");

                entity.HasOne(d => d.IdPlantillaNavigation)
                    .WithMany(p => p.TWhatsAppPlantillaPorOcurrenciaActividad)
                    .HasForeignKey(d => d.IdPlantilla)
                    .HasConstraintName("FK_T_WhatsAppPlantillaPorOcurrenciaActividad_T_Plantilla");
            });

            modelBuilder.Entity<TWhatsAppTipoMensaje>(entity =>
            {
                entity.ToTable("T_WhatsAppTipoMensaje", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre).HasMaxLength(50);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TWhatsAppUsuario>(entity =>
            {
                entity.ToTable("T_WhatsAppUsuario", "mkt");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RolUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUsername)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPersonalNavigation)
                    .WithMany(p => p.TWhatsAppUsuario)
                    .HasForeignKey(d => d.IdPersonal)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_T_WhatsAppUsuario_T_Personal");
            });

            modelBuilder.Entity<TWhatsAppUsuarioCredencial>(entity =>
            {
                entity.ToTable("T_WhatsAppUsuarioCredencial", "mkt");

                entity.Property(e => e.ExpiresAfter).HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UserAuthToken).IsUnicode(false);

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdWhatsAppConfiguracionNavigation)
                    .WithMany(p => p.TWhatsAppUsuarioCredencial)
                    .HasForeignKey(d => d.IdWhatsAppConfiguracion)
                    .HasConstraintName("FK_T_WhatsAppUsuarioCredencial_T_WhatsAppConfiguracion");

                entity.HasOne(d => d.IdWhatsAppUsuarioNavigation)
                    .WithMany(p => p.TWhatsAppUsuarioCredencial)
                    .HasForeignKey(d => d.IdWhatsAppUsuario)
                    .HasConstraintName("FK_T_WhatsAppUsuarioCredencial_T_WhatsAppUsuario");
            });

            modelBuilder.Entity<TipoCambioSelector>(entity =>
            {
                entity.ToTable("TipoCambioSelector", "fin");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRequired()
                    .IsRowVersion();

                entity.Property(e => e.UsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });
        }
    }
}
