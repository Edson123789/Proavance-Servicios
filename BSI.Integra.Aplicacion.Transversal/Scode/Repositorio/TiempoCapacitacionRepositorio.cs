using System;using System.Collections.Generic;using System.Linq.Expressions;using System.Text;using AutoMapper;using BSI.Integra.Aplicacion.DTOs;using BSI.Integra.Aplicacion.Transversal.BO;using BSI.Integra.Persistencia.Models;using BSI.Integra.Persistencia.Repository;using Newtonsoft.Json;namespace BSI.Integra.Aplicacion.Transversal.Repositorio{    public class TiempoCapacitacionRepositorio : BaseRepository<TTiempoCapacitacion, TiempoCapacitacionBO>    {        #region Metodos Base        public TiempoCapacitacionRepositorio() : base()        {        }        public TiempoCapacitacionRepositorio(integraDBContext contexto) : base(contexto)        {        }        public IEnumerable<TiempoCapacitacionBO> GetBy(Expression<Func<TTiempoCapacitacion, bool>> filter)        {            IEnumerable<TTiempoCapacitacion> listado = base.GetBy(filter);            List<TiempoCapacitacionBO> listadoBO = new List<TiempoCapacitacionBO>();            foreach (var itemEntidad in listado)            {                TiempoCapacitacionBO objetoBO = Mapper.Map<TTiempoCapacitacion, TiempoCapacitacionBO>(itemEntidad, opt => opt.ConfigureMap(MemberList.None));                listadoBO.Add(objetoBO);            }            return listadoBO;        }        public TiempoCapacitacionBO FirstById(int id)        {            try            {                TTiempoCapacitacion entidad = base.FirstById(id);                TiempoCapacitacionBO objetoBO = new TiempoCapacitacionBO();                Mapper.Map<TTiempoCapacitacion, TiempoCapacitacionBO>(entidad, objetoBO, opt => opt.ConfigureMap(MemberList.None));                return objetoBO;            }            catch (Exception e)            {                throw new Exception(e.Message);            }        }        public TiempoCapacitacionBO FirstBy(Expression<Func<TTiempoCapacitacion, bool>> filter)        {            try            {                TTiempoCapacitacion entidad = base.FirstBy(filter);                TiempoCapacitacionBO objetoBO = Mapper.Map<TTiempoCapacitacion, TiempoCapacitacionBO>(entidad, opt => opt.ConfigureMap(MemberList.None));                return objetoBO;            }            catch (Exception e)            {                throw new Exception(e.Message);            }        }        public bool Insert(TiempoCapacitacionBO objetoBO)        {            try            {                //mapeo de la entidad                TTiempoCapacitacion entidad = MapeoEntidad(objetoBO);                bool resultado = base.Insert(entidad);                if (resultado)                    AsignacionId(entidad, objetoBO);                return resultado;            }            catch (Exception e)            {                throw new Exception(e.Message);            }        }        public bool Insert(IEnumerable<TiempoCapacitacionBO> listadoBO)        {            try            {                foreach (var objetoBO in listadoBO)                {                    bool resultado = Insert(objetoBO);                    if (resultado == false)                        return false;                }                return true;            }            catch (Exception e)            {                throw e;            }        }        public bool Update(TiempoCapacitacionBO objetoBO)        {            try            {                if (objetoBO == null)                {                    throw new ArgumentNullException("Entidad nula");                }                //mapeo de la entidad                TTiempoCapacitacion entidad = MapeoEntidad(objetoBO);                bool resultado = base.Update(entidad);                if (resultado)                    AsignacionId(entidad, objetoBO);                return resultado;            }            catch (Exception e)            {                throw e;            }        }        public bool Update(IEnumerable<TiempoCapacitacionBO> listadoBO)        {            try            {                foreach (var objetoBO in listadoBO)                {                    bool resultado = Update(objetoBO);                    if (resultado == false)                        return false;                }                return true;            }            catch (Exception e)            {                throw e;            }        }        private void AsignacionId(TTiempoCapacitacion entidad, TiempoCapacitacionBO objetoBO)        {            try            {                if (entidad != null && objetoBO != null)                {                    objetoBO.Id = entidad.Id;                }            }            catch (Exception e)            {                throw new Exception(e.Message);            }        }        private TTiempoCapacitacion MapeoEntidad(TiempoCapacitacionBO objetoBO)        {            try            {                //crea la entidad padre                TTiempoCapacitacion entidad = new TTiempoCapacitacion();                entidad = Mapper.Map<TiempoCapacitacionBO, TTiempoCapacitacion>(objetoBO,                    opt => opt.ConfigureMap(MemberList.None));                //mapea los hijos                return entidad;            }            catch (Exception e)            {                throw new Exception(e.Message);            }        }        #endregion        /// <summary>        /// Retorna tiempos capacitacion para ser usados en filtros        /// </summary>        /// <returns>id, nombre</returns>        public List<TiempoCapacitacionFiltroDTO> ObtenerTodoFiltro()        {            try            {                List<TiempoCapacitacionFiltroDTO> tiemposCapacitacionFiltro = new List<TiempoCapacitacionFiltroDTO>();                string _queryTiempoCapacitacion = string.Empty;                _queryTiempoCapacitacion = "SELECT Id,Nombre FROM mkt.V_TTiempoCapacitacion_ObtenerIdNombre WHERE Estado = 1";                var tiempoCapacitacionDB = _dapper.QueryDapper(_queryTiempoCapacitacion, null);                if (!string.IsNullOrEmpty(tiempoCapacitacionDB) && !tiempoCapacitacionDB.Contains("[]"))                {                    tiemposCapacitacionFiltro = JsonConvert.DeserializeObject<List<TiempoCapacitacionFiltroDTO>>(tiempoCapacitacionDB);                }                return tiemposCapacitacionFiltro;            }            catch (Exception e)            {                throw new Exception(e.Message);            }                    }    }}